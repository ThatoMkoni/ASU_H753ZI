
ASU_H753ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008794  08008794  00009794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087cc  080087cc  000097cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087d4  080087d4  000097d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080087d8  080087d8  000097d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000020  24000000  080087dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004a0  24000020  080087fc  0000a020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004c0  080087fc  0000a4c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001226a  00000000  00000000  0000a04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022cf  00000000  00000000  0001c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c48  00000000  00000000  0001e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000097b  00000000  00000000  0001f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036b7c  00000000  00000000  0001fb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011d52  00000000  00000000  000566c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015be85  00000000  00000000  00068419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c429e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032cc  00000000  00000000  001c42e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001c75b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800877c 	.word	0x0800877c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	0800877c 	.word	0x0800877c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ProcessAudio>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void ProcessAudio(int16_t *INPUT_BUFFER, int16_t *OUTPUT_BUFFER, uint16_t OUTPUT_SIZE){
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < OUTPUT_SIZE; i++) {
 8000612:	2300      	movs	r3, #0
 8000614:	82fb      	strh	r3, [r7, #22]
 8000616:	e00d      	b.n	8000634 <ProcessAudio+0x30>
        OUTPUT_BUFFER[i] = INPUT_BUFFER[2 * i];   // pick left channel only
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	441a      	add	r2, r3
 8000620:	8afb      	ldrh	r3, [r7, #22]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	440b      	add	r3, r1
 8000628:	f9b2 2000 	ldrsh.w	r2, [r2]
 800062c:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < OUTPUT_SIZE; i++) {
 800062e:	8afb      	ldrh	r3, [r7, #22]
 8000630:	3301      	adds	r3, #1
 8000632:	82fb      	strh	r3, [r7, #22]
 8000634:	8afa      	ldrh	r2, [r7, #22]
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3ed      	bcc.n	8000618 <ProcessAudio+0x14>
    }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	371c      	adds	r7, #28
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fcf4 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f850 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f912 	bl	8000880 <MX_GPIO_Init>
  MX_DMA_Init();
 800065c:	f000 f8f0 	bl	8000840 <MX_DMA_Init>
  MX_I2S1_Init();
 8000660:	f000 f8bc 	bl	80007dc <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)I2S_DMA_BUFFER, I2S_DMA_BUFFER_SIZE);
 8000664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000668:	491d      	ldr	r1, [pc, #116]	@ (80006e0 <main+0x94>)
 800066a:	481e      	ldr	r0, [pc, #120]	@ (80006e4 <main+0x98>)
 800066c:	f003 fa58 	bl	8003b20 <HAL_I2S_Receive_DMA>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fbb3 	bl	8000ddc <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000676:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <main+0x9c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <main+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <main+0x9c>)
 8000686:	2200      	movs	r2, #0
 8000688:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <main+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <main+0x9c>)
 8000692:	2200      	movs	r2, #0
 8000694:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000696:	4914      	ldr	r1, [pc, #80]	@ (80006e8 <main+0x9c>)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fc15 	bl	8000ec8 <BSP_COM_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f9ae 	bl	8000a04 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(Full_Cplt_Flag == 1){
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <main+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d10a      	bne.n	80006c8 <main+0x7c>
	 		  ProcessAudio(I2S_DMA_BUFFER, AUDIO_BUFFER, AUDIO_BUFFER_SIZE);
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	490e      	ldr	r1, [pc, #56]	@ (80006f0 <main+0xa4>)
 80006b6:	480a      	ldr	r0, [pc, #40]	@ (80006e0 <main+0x94>)
 80006b8:	f7ff ffa4 	bl	8000604 <ProcessAudio>
	 		  Full_Cplt_Flag = 0;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <main+0xa0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	 		  Half_Cplt_Flag = 0;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <main+0xa8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
	  }

	  if(Half_Cplt_Flag == 1){
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <main+0xa8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d1ea      	bne.n	80006a8 <main+0x5c>
		  ProcessAudio(I2S_DMA_BUFFER, AUDIO_BUFFER, AUDIO_BUFFER_SIZE);
 80006d2:	2280      	movs	r2, #128	@ 0x80
 80006d4:	4906      	ldr	r1, [pc, #24]	@ (80006f0 <main+0xa4>)
 80006d6:	4802      	ldr	r0, [pc, #8]	@ (80006e0 <main+0x94>)
 80006d8:	f7ff ff94 	bl	8000604 <ProcessAudio>
	  if(Full_Cplt_Flag == 1){
 80006dc:	e7e4      	b.n	80006a8 <main+0x5c>
 80006de:	bf00      	nop
 80006e0:	24000118 	.word	0x24000118
 80006e4:	2400004c 	.word	0x2400004c
 80006e8:	2400003c 	.word	0x2400003c
 80006ec:	2400041d 	.word	0x2400041d
 80006f0:	24000318 	.word	0x24000318
 80006f4:	2400041c 	.word	0x2400041c

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09c      	sub	sp, #112	@ 0x70
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000702:	224c      	movs	r2, #76	@ 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f008 f80c 	bl	8008724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2220      	movs	r2, #32
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f008 f806 	bl	8008724 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000718:	2002      	movs	r0, #2
 800071a:	f003 fb03 	bl	8003d24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <SystemClock_Config+0xd8>)
 8000724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000726:	4a2a      	ldr	r2, [pc, #168]	@ (80007d0 <SystemClock_Config+0xd8>)
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <SystemClock_Config+0xd8>)
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <SystemClock_Config+0xdc>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000740:	4a24      	ldr	r2, [pc, #144]	@ (80007d4 <SystemClock_Config+0xdc>)
 8000742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <SystemClock_Config+0xdc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000754:	bf00      	nop
 8000756:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemClock_Config+0xdc>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000762:	d1f8      	bne.n	8000756 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <SystemClock_Config+0xe0>)
 8000766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <SystemClock_Config+0xe0>)
 800076a:	f023 0303 	bic.w	r3, r3, #3
 800076e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000774:	2301      	movs	r3, #1
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2340      	movs	r3, #64	@ 0x40
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	4618      	mov	r0, r3
 8000786:	f003 fb07 	bl	8003d98 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000790:	f000 f938 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	233f      	movs	r3, #63	@ 0x3f
 8000796:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2101      	movs	r1, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 ff47 	bl	800464c <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007c4:	f000 f91e 	bl	8000a04 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3770      	adds	r7, #112	@ 0x70
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800
 80007d8:	58024400 	.word	0x58024400

080007dc <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_I2S1_Init+0x5c>)
 80007e2:	4a16      	ldr	r2, [pc, #88]	@ (800083c <MX_I2S1_Init+0x60>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_I2S1_Init+0x5c>)
 80007e8:	2206      	movs	r2, #6
 80007ea:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_I2S1_Init+0x5c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_I2S1_Init+0x5c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_I2S1_Init+0x5c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_I2S1_Init+0x5c>)
 8000800:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000804:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_I2S1_Init+0x5c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_I2S1_Init+0x5c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_I2S1_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_I2S1_Init+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_I2S1_Init+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_I2S1_Init+0x5c>)
 8000826:	f003 f859 	bl	80038dc <HAL_I2S_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f8e8 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2400004c 	.word	0x2400004c
 800083c:	40013000 	.word	0x40013000

08000840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <MX_DMA_Init+0x3c>)
 8000848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <MX_DMA_Init+0x3c>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_DMA_Init+0x3c>)
 8000858:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	200b      	movs	r0, #11
 800086a:	f000 fd60 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800086e:	200b      	movs	r0, #11
 8000870:	f000 fd77 	bl	8001362 <HAL_NVIC_EnableIRQ>

}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58024400 	.word	0x58024400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b31      	ldr	r3, [pc, #196]	@ (800095c <MX_GPIO_Init+0xdc>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089c:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <MX_GPIO_Init+0xdc>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ba:	4a28      	ldr	r2, [pc, #160]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c4:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d8:	4a20      	ldr	r2, [pc, #128]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e2:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	4a19      	ldr	r2, [pc, #100]	@ (800095c <MX_GPIO_Init+0xdc>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000900:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_GPIO_Init+0xdc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000914:	4812      	ldr	r0, [pc, #72]	@ (8000960 <MX_GPIO_Init+0xe0>)
 8000916:	f002 ffc7 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <MX_GPIO_Init+0xe4>)
 8000930:	f002 fe0a 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000934:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_GPIO_Init+0xe0>)
 800094e:	f002 fdfb 	bl	8003548 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	@ 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	58024400 	.word	0x58024400
 8000960:	58020400 	.word	0x58020400
 8000964:	58020800 	.word	0x58020800

08000968 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	inpBuffPtr = &I2S_DMA_BUFFER[0];
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000972:	4a0c      	ldr	r2, [pc, #48]	@ (80009a4 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000974:	601a      	str	r2, [r3, #0]
	audioBuffPtr = &AUDIO_BUFFER[0];
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_I2S_RxHalfCpltCallback+0x40>)
 8000978:	4a0c      	ldr	r2, [pc, #48]	@ (80009ac <HAL_I2S_RxHalfCpltCallback+0x44>)
 800097a:	601a      	str	r2, [r3, #0]
	Half_Cplt_Flag = 1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <HAL_I2S_RxHalfCpltCallback+0x48>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]


	counter ++;
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	b21b      	sxth	r3, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	3301      	adds	r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	b21a      	sxth	r2, r3
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8000992:	801a      	strh	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	24000420 	.word	0x24000420
 80009a4:	24000118 	.word	0x24000118
 80009a8:	24000424 	.word	0x24000424
 80009ac:	24000318 	.word	0x24000318
 80009b0:	2400041c 	.word	0x2400041c
 80009b4:	2400041a 	.word	0x2400041a

080009b8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	inpBuffPtr = &I2S_DMA_BUFFER[I2S_DMA_BUFFER_SIZE/2];
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_I2S_RxCpltCallback+0x30>)
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_I2S_RxCpltCallback+0x34>)
 80009c4:	601a      	str	r2, [r3, #0]
	audioBuffPtr = &AUDIO_BUFFER[AUDIO_BUFFER_SIZE/2];
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_I2S_RxCpltCallback+0x38>)
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_I2S_RxCpltCallback+0x3c>)
 80009ca:	601a      	str	r2, [r3, #0]
	Full_Cplt_Flag = 1;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_I2S_RxCpltCallback+0x40>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]

	I2S_CURRENT_SAMPLE = I2S_DMA_BUFFER[0];
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_I2S_RxCpltCallback+0x44>)
 80009d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <HAL_I2S_RxCpltCallback+0x48>)
 80009da:	801a      	strh	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	24000420 	.word	0x24000420
 80009ec:	24000218 	.word	0x24000218
 80009f0:	24000424 	.word	0x24000424
 80009f4:	24000398 	.word	0x24000398
 80009f8:	2400041d 	.word	0x2400041d
 80009fc:	24000118 	.word	0x24000118
 8000a00:	24000418 	.word	0x24000418

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_MspInit+0x30>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a1c:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_MspInit+0x30>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_MspInit+0x30>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	58024400 	.word	0x58024400

08000a44 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ba      	sub	sp, #232	@ 0xe8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	22c0      	movs	r2, #192	@ 0xc0
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f007 fe5d 	bl	8008724 <memset>
  if(hi2s->Instance==SPI1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a47      	ldr	r2, [pc, #284]	@ (8000b8c <HAL_I2S_MspInit+0x148>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	f040 8087 	bne.w	8000b84 <HAL_I2S_MspInit+0x140>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a7a:	f04f 0300 	mov.w	r3, #0
 8000a7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000a82:	2320      	movs	r3, #32
 8000a84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000a86:	2381      	movs	r3, #129	@ 0x81
 8000a88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000a96:	2340      	movs	r3, #64	@ 0x40
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 f959 	bl	8004d64 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8000ab8:	f7ff ffa4 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000abc:	4b34      	ldr	r3, [pc, #208]	@ (8000b90 <HAL_I2S_MspInit+0x14c>)
 8000abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ac2:	4a33      	ldr	r2, [pc, #204]	@ (8000b90 <HAL_I2S_MspInit+0x14c>)
 8000ac4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ac8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <HAL_I2S_MspInit+0x14c>)
 8000ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <HAL_I2S_MspInit+0x14c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <HAL_I2S_MspInit+0x14c>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <HAL_I2S_MspInit+0x14c>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000af8:	2370      	movs	r3, #112	@ 0x70
 8000afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b10:	2305      	movs	r3, #5
 8000b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481d      	ldr	r0, [pc, #116]	@ (8000b94 <HAL_I2S_MspInit+0x150>)
 8000b1e:	f002 fd13 	bl	8003548 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b24:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <HAL_I2S_MspInit+0x158>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b2a:	2225      	movs	r2, #37	@ 0x25
 8000b2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b40:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b48:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b50:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b58:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b60:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b68:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b6a:	f000 fc15 	bl	8001398 <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_I2S_MspInit+0x134>
    {
      Error_Handler();
 8000b74:	f7ff ff46 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b7c:	649a      	str	r2, [r3, #72]	@ 0x48
 8000b7e:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_I2S_MspInit+0x154>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b84:	bf00      	nop
 8000b86:	37e8      	adds	r7, #232	@ 0xe8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020000 	.word	0x58020000
 8000b98:	240000a0 	.word	0x240000a0
 8000b9c:	40020010 	.word	0x40020010

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 fa93 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <DMA1_Stream0_IRQHandler+0x10>)
 8000c06:	f001 f98d 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	240000a0 	.word	0x240000a0

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c18:	4b43      	ldr	r3, [pc, #268]	@ (8000d28 <SystemInit+0x114>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a42      	ldr	r2, [pc, #264]	@ (8000d28 <SystemInit+0x114>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c28:	4b40      	ldr	r3, [pc, #256]	@ (8000d2c <SystemInit+0x118>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	2b06      	cmp	r3, #6
 8000c32:	d807      	bhi.n	8000c44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c34:	4b3d      	ldr	r3, [pc, #244]	@ (8000d2c <SystemInit+0x118>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 030f 	bic.w	r3, r3, #15
 8000c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d2c <SystemInit+0x118>)
 8000c3e:	f043 0307 	orr.w	r3, r3, #7
 8000c42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	@ (8000d30 <SystemInit+0x11c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a39      	ldr	r2, [pc, #228]	@ (8000d30 <SystemInit+0x11c>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c50:	4b37      	ldr	r3, [pc, #220]	@ (8000d30 <SystemInit+0x11c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <SystemInit+0x11c>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4935      	ldr	r1, [pc, #212]	@ (8000d30 <SystemInit+0x11c>)
 8000c5c:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <SystemInit+0x120>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <SystemInit+0x118>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <SystemInit+0x118>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f023 030f 	bic.w	r3, r3, #15
 8000c76:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <SystemInit+0x118>)
 8000c78:	f043 0307 	orr.w	r3, r3, #7
 8000c7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <SystemInit+0x11c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <SystemInit+0x11c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <SystemInit+0x11c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <SystemInit+0x11c>)
 8000c92:	4a29      	ldr	r2, [pc, #164]	@ (8000d38 <SystemInit+0x124>)
 8000c94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <SystemInit+0x11c>)
 8000c98:	4a28      	ldr	r2, [pc, #160]	@ (8000d3c <SystemInit+0x128>)
 8000c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <SystemInit+0x11c>)
 8000c9e:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <SystemInit+0x12c>)
 8000ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <SystemInit+0x11c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <SystemInit+0x11c>)
 8000caa:	4a25      	ldr	r2, [pc, #148]	@ (8000d40 <SystemInit+0x12c>)
 8000cac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <SystemInit+0x11c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <SystemInit+0x11c>)
 8000cb6:	4a22      	ldr	r2, [pc, #136]	@ (8000d40 <SystemInit+0x12c>)
 8000cb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <SystemInit+0x11c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <SystemInit+0x11c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d30 <SystemInit+0x11c>)
 8000cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <SystemInit+0x11c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <SystemInit+0x130>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <SystemInit+0x134>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cde:	d202      	bcs.n	8000ce6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <SystemInit+0x138>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <SystemInit+0x11c>)
 8000ce8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d113      	bne.n	8000d1c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <SystemInit+0x11c>)
 8000cf6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <SystemInit+0x11c>)
 8000cfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <SystemInit+0x13c>)
 8000d06:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d0a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <SystemInit+0x11c>)
 8000d0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d12:	4a07      	ldr	r2, [pc, #28]	@ (8000d30 <SystemInit+0x11c>)
 8000d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	52002000 	.word	0x52002000
 8000d30:	58024400 	.word	0x58024400
 8000d34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d38:	02020200 	.word	0x02020200
 8000d3c:	01ff0000 	.word	0x01ff0000
 8000d40:	01010280 	.word	0x01010280
 8000d44:	5c001000 	.word	0x5c001000
 8000d48:	ffff0000 	.word	0xffff0000
 8000d4c:	51008108 	.word	0x51008108
 8000d50:	52004000 	.word	0x52004000

08000d54 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <ExitRun0Mode+0x2c>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <ExitRun0Mode+0x2c>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d64:	bf00      	nop
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <ExitRun0Mode+0x2c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f9      	beq.n	8000d66 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	58024800 	.word	0x58024800

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000dc0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d88:	f7ff ffe4 	bl	8000d54 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d8c:	f7ff ff42 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f007 fcbd 	bl	8008734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc47 	bl	800064c <main>
  bx  lr
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dc8:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8000dcc:	080087dc 	.word	0x080087dc
  ldr r2, =_sbss
 8000dd0:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8000dd4:	240004c0 	.word	0x240004c0

08000dd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC3_IRQHandler>
	...

08000ddc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d009      	beq.n	8000e04 <BSP_LED_Init+0x28>
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d006      	beq.n	8000e04 <BSP_LED_Init+0x28>
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d003      	beq.n	8000e04 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dfc:	f06f 0301 	mvn.w	r3, #1
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e02:	e055      	b.n	8000eb0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10f      	bne.n	8000e2a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	e021      	b.n	8000e6e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10f      	bne.n	8000e50 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e40:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	e00e      	b.n	8000e6e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <BSP_LED_Init+0xe0>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <BSP_LED_Init+0xe4>)
 8000e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e76:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <BSP_LED_Init+0xe8>)
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	f107 0218 	add.w	r2, r7, #24
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fb58 	bl	8003548 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <BSP_LED_Init+0xe8>)
 8000e9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <BSP_LED_Init+0xe4>)
 8000ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f002 fcfc 	bl	80038a8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3730      	adds	r7, #48	@ 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	080087a4 	.word	0x080087a4
 8000ec4:	2400000c 	.word	0x2400000c

08000ec8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ede:	f06f 0301 	mvn.w	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e018      	b.n	8000f18 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2294      	movs	r2, #148	@ 0x94
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <BSP_COM_Init+0x5c>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f84a 	bl	8000f8c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2294      	movs	r2, #148	@ 0x94
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <BSP_COM_Init+0x5c>)
 8000f02:	4413      	add	r3, r2
 8000f04:	6839      	ldr	r1, [r7, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f80e 	bl	8000f28 <MX_USART3_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f12:	f06f 0303 	mvn.w	r3, #3
 8000f16:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f18:	68fb      	ldr	r3, [r7, #12]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000428 	.word	0x24000428

08000f28 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_USART3_Init+0x60>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	220c      	movs	r2, #12
 8000f46:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	895b      	ldrh	r3, [r3, #10]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	891b      	ldrh	r3, [r3, #8]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	899b      	ldrh	r3, [r3, #12]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f74:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f006 fbf2 	bl	8007760 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000008 	.word	0x24000008

08000f8c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <COM1_MspInit+0xa8>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <COM1_MspInit+0xa8>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <COM1_MspInit+0xa8>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <COM1_MspInit+0xa8>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <COM1_MspInit+0xa8>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <COM1_MspInit+0xa8>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <COM1_MspInit+0xa8>)
 8000fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd6:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <COM1_MspInit+0xa8>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <COM1_MspInit+0xa8>)
 8000fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000fee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001000:	2307      	movs	r3, #7
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480b      	ldr	r0, [pc, #44]	@ (8001038 <COM1_MspInit+0xac>)
 800100c:	f002 fa9c 	bl	8003548 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001014:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <COM1_MspInit+0xac>)
 8001026:	f002 fa8f 	bl	8003548 <HAL_GPIO_Init>
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	@ 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	58024400 	.word	0x58024400
 8001038:	58020c00 	.word	0x58020c00

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	2003      	movs	r0, #3
 8001044:	f000 f968 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001048:	f003 fcb6 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 800104c:	4602      	mov	r2, r0
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_Init+0x68>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	4913      	ldr	r1, [pc, #76]	@ (80010a8 <HAL_Init+0x6c>)
 800105a:	5ccb      	ldrb	r3, [r1, r3]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_Init+0x68>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <HAL_Init+0x6c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <HAL_Init+0x70>)
 800107e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001080:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <HAL_Init+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f814 	bl	80010b4 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e002      	b.n	800109c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001096:	f7ff fcbb 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024400 	.word	0x58024400
 80010a8:	08008794 	.word	0x08008794
 80010ac:	24000004 	.word	0x24000004
 80010b0:	24000000 	.word	0x24000000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_InitTick+0x60>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e021      	b.n	800110c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <HAL_InitTick+0x64>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f94d 	bl	800137e <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f917 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <HAL_InitTick+0x68>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2400001c 	.word	0x2400001c
 8001118:	24000000 	.word	0x24000000
 800111c:	24000018 	.word	0x24000018

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2400001c 	.word	0x2400001c
 8001144:	240004bc 	.word	0x240004bc

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	240004bc 	.word	0x240004bc

08001160 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <HAL_GetREVID+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0c1b      	lsrs	r3, r3, #16
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	5c001000 	.word	0x5c001000

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	05fa0000 	.word	0x05fa0000

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	@ (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff29 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff40 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff33 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa4 	bl	80012d4 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fed2 	bl	8001148 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e316      	b.n	80019de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a66      	ldr	r2, [pc, #408]	@ (8001550 <HAL_DMA_Init+0x1b8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d04a      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a65      	ldr	r2, [pc, #404]	@ (8001554 <HAL_DMA_Init+0x1bc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d045      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a63      	ldr	r2, [pc, #396]	@ (8001558 <HAL_DMA_Init+0x1c0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d040      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a62      	ldr	r2, [pc, #392]	@ (800155c <HAL_DMA_Init+0x1c4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d03b      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a60      	ldr	r2, [pc, #384]	@ (8001560 <HAL_DMA_Init+0x1c8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d036      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001564 <HAL_DMA_Init+0x1cc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d031      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001568 <HAL_DMA_Init+0x1d0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d02c      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5c      	ldr	r2, [pc, #368]	@ (800156c <HAL_DMA_Init+0x1d4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d027      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a5a      	ldr	r2, [pc, #360]	@ (8001570 <HAL_DMA_Init+0x1d8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d022      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a59      	ldr	r2, [pc, #356]	@ (8001574 <HAL_DMA_Init+0x1dc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d01d      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a57      	ldr	r2, [pc, #348]	@ (8001578 <HAL_DMA_Init+0x1e0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d018      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a56      	ldr	r2, [pc, #344]	@ (800157c <HAL_DMA_Init+0x1e4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d013      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a54      	ldr	r2, [pc, #336]	@ (8001580 <HAL_DMA_Init+0x1e8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00e      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a53      	ldr	r2, [pc, #332]	@ (8001584 <HAL_DMA_Init+0x1ec>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d009      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a51      	ldr	r2, [pc, #324]	@ (8001588 <HAL_DMA_Init+0x1f0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d004      	beq.n	8001450 <HAL_DMA_Init+0xb8>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a50      	ldr	r2, [pc, #320]	@ (800158c <HAL_DMA_Init+0x1f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_DMA_Init+0xbc>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_DMA_Init+0xbe>
 8001454:	2300      	movs	r3, #0
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 813b 	beq.w	80016d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a37      	ldr	r2, [pc, #220]	@ (8001550 <HAL_DMA_Init+0x1b8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d04a      	beq.n	800150c <HAL_DMA_Init+0x174>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a36      	ldr	r2, [pc, #216]	@ (8001554 <HAL_DMA_Init+0x1bc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d045      	beq.n	800150c <HAL_DMA_Init+0x174>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a34      	ldr	r2, [pc, #208]	@ (8001558 <HAL_DMA_Init+0x1c0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d040      	beq.n	800150c <HAL_DMA_Init+0x174>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a33      	ldr	r2, [pc, #204]	@ (800155c <HAL_DMA_Init+0x1c4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d03b      	beq.n	800150c <HAL_DMA_Init+0x174>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a31      	ldr	r2, [pc, #196]	@ (8001560 <HAL_DMA_Init+0x1c8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d036      	beq.n	800150c <HAL_DMA_Init+0x174>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a30      	ldr	r2, [pc, #192]	@ (8001564 <HAL_DMA_Init+0x1cc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d031      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001568 <HAL_DMA_Init+0x1d0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d02c      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2d      	ldr	r2, [pc, #180]	@ (800156c <HAL_DMA_Init+0x1d4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d027      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001570 <HAL_DMA_Init+0x1d8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d022      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001574 <HAL_DMA_Init+0x1dc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d01d      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a28      	ldr	r2, [pc, #160]	@ (8001578 <HAL_DMA_Init+0x1e0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d018      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a27      	ldr	r2, [pc, #156]	@ (800157c <HAL_DMA_Init+0x1e4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d013      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a25      	ldr	r2, [pc, #148]	@ (8001580 <HAL_DMA_Init+0x1e8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00e      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <HAL_DMA_Init+0x1ec>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d009      	beq.n	800150c <HAL_DMA_Init+0x174>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a22      	ldr	r2, [pc, #136]	@ (8001588 <HAL_DMA_Init+0x1f0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d004      	beq.n	800150c <HAL_DMA_Init+0x174>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	@ (800158c <HAL_DMA_Init+0x1f4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d108      	bne.n	800151e <HAL_DMA_Init+0x186>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e007      	b.n	800152e <HAL_DMA_Init+0x196>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800152e:	e02f      	b.n	8001590 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001530:	f7ff fe0a 	bl	8001148 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d928      	bls.n	8001590 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e246      	b.n	80019de <HAL_DMA_Init+0x646>
 8001550:	40020010 	.word	0x40020010
 8001554:	40020028 	.word	0x40020028
 8001558:	40020040 	.word	0x40020040
 800155c:	40020058 	.word	0x40020058
 8001560:	40020070 	.word	0x40020070
 8001564:	40020088 	.word	0x40020088
 8001568:	400200a0 	.word	0x400200a0
 800156c:	400200b8 	.word	0x400200b8
 8001570:	40020410 	.word	0x40020410
 8001574:	40020428 	.word	0x40020428
 8001578:	40020440 	.word	0x40020440
 800157c:	40020458 	.word	0x40020458
 8001580:	40020470 	.word	0x40020470
 8001584:	40020488 	.word	0x40020488
 8001588:	400204a0 	.word	0x400204a0
 800158c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1c8      	bne.n	8001530 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4b83      	ldr	r3, [pc, #524]	@ (80017b8 <HAL_DMA_Init+0x420>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d107      	bne.n	80015f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	4313      	orrs	r3, r2
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80015f4:	4b71      	ldr	r3, [pc, #452]	@ (80017bc <HAL_DMA_Init+0x424>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b71      	ldr	r3, [pc, #452]	@ (80017c0 <HAL_DMA_Init+0x428>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001600:	d328      	bcc.n	8001654 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b28      	cmp	r3, #40	@ 0x28
 8001608:	d903      	bls.n	8001612 <HAL_DMA_Init+0x27a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001610:	d917      	bls.n	8001642 <HAL_DMA_Init+0x2aa>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b3e      	cmp	r3, #62	@ 0x3e
 8001618:	d903      	bls.n	8001622 <HAL_DMA_Init+0x28a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b42      	cmp	r3, #66	@ 0x42
 8001620:	d90f      	bls.n	8001642 <HAL_DMA_Init+0x2aa>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b46      	cmp	r3, #70	@ 0x46
 8001628:	d903      	bls.n	8001632 <HAL_DMA_Init+0x29a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b48      	cmp	r3, #72	@ 0x48
 8001630:	d907      	bls.n	8001642 <HAL_DMA_Init+0x2aa>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b4e      	cmp	r3, #78	@ 0x4e
 8001638:	d905      	bls.n	8001646 <HAL_DMA_Init+0x2ae>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b52      	cmp	r3, #82	@ 0x52
 8001640:	d801      	bhi.n	8001646 <HAL_DMA_Init+0x2ae>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_DMA_Init+0x2b0>
 8001646:	2300      	movs	r3, #0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001652:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f023 0307 	bic.w	r3, r3, #7
 800166a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	2b04      	cmp	r3, #4
 800167c:	d117      	bne.n	80016ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4313      	orrs	r3, r2
 8001686:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00e      	beq.n	80016ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f001 fdcf 	bl	8003234 <DMA_CheckFifoParam>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e197      	b.n	80019de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f001 fd0a 	bl	80030d0 <DMA_CalcBaseAndBitshift>
 80016bc:	4603      	mov	r3, r0
 80016be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	223f      	movs	r2, #63	@ 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e0cd      	b.n	800186e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a3b      	ldr	r2, [pc, #236]	@ (80017c4 <HAL_DMA_Init+0x42c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d022      	beq.n	8001722 <HAL_DMA_Init+0x38a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a39      	ldr	r2, [pc, #228]	@ (80017c8 <HAL_DMA_Init+0x430>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01d      	beq.n	8001722 <HAL_DMA_Init+0x38a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a38      	ldr	r2, [pc, #224]	@ (80017cc <HAL_DMA_Init+0x434>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d018      	beq.n	8001722 <HAL_DMA_Init+0x38a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a36      	ldr	r2, [pc, #216]	@ (80017d0 <HAL_DMA_Init+0x438>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_DMA_Init+0x38a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a35      	ldr	r2, [pc, #212]	@ (80017d4 <HAL_DMA_Init+0x43c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d00e      	beq.n	8001722 <HAL_DMA_Init+0x38a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a33      	ldr	r2, [pc, #204]	@ (80017d8 <HAL_DMA_Init+0x440>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d009      	beq.n	8001722 <HAL_DMA_Init+0x38a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a32      	ldr	r2, [pc, #200]	@ (80017dc <HAL_DMA_Init+0x444>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d004      	beq.n	8001722 <HAL_DMA_Init+0x38a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a30      	ldr	r2, [pc, #192]	@ (80017e0 <HAL_DMA_Init+0x448>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_DMA_Init+0x38e>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_DMA_Init+0x390>
 8001726:	2300      	movs	r3, #0
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8097 	beq.w	800185c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a24      	ldr	r2, [pc, #144]	@ (80017c4 <HAL_DMA_Init+0x42c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d021      	beq.n	800177c <HAL_DMA_Init+0x3e4>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <HAL_DMA_Init+0x430>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01c      	beq.n	800177c <HAL_DMA_Init+0x3e4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <HAL_DMA_Init+0x434>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d017      	beq.n	800177c <HAL_DMA_Init+0x3e4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1f      	ldr	r2, [pc, #124]	@ (80017d0 <HAL_DMA_Init+0x438>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d012      	beq.n	800177c <HAL_DMA_Init+0x3e4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1e      	ldr	r2, [pc, #120]	@ (80017d4 <HAL_DMA_Init+0x43c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00d      	beq.n	800177c <HAL_DMA_Init+0x3e4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <HAL_DMA_Init+0x440>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d008      	beq.n	800177c <HAL_DMA_Init+0x3e4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1b      	ldr	r2, [pc, #108]	@ (80017dc <HAL_DMA_Init+0x444>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d003      	beq.n	800177c <HAL_DMA_Init+0x3e4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	@ (80017e0 <HAL_DMA_Init+0x448>)
 800177a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_DMA_Init+0x44c>)
 8001798:	4013      	ands	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b40      	cmp	r3, #64	@ 0x40
 80017a2:	d021      	beq.n	80017e8 <HAL_DMA_Init+0x450>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b80      	cmp	r3, #128	@ 0x80
 80017aa:	d102      	bne.n	80017b2 <HAL_DMA_Init+0x41a>
 80017ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017b0:	e01b      	b.n	80017ea <HAL_DMA_Init+0x452>
 80017b2:	2300      	movs	r3, #0
 80017b4:	e019      	b.n	80017ea <HAL_DMA_Init+0x452>
 80017b6:	bf00      	nop
 80017b8:	fe10803f 	.word	0xfe10803f
 80017bc:	5c001000 	.word	0x5c001000
 80017c0:	ffff0000 	.word	0xffff0000
 80017c4:	58025408 	.word	0x58025408
 80017c8:	5802541c 	.word	0x5802541c
 80017cc:	58025430 	.word	0x58025430
 80017d0:	58025444 	.word	0x58025444
 80017d4:	58025458 	.word	0x58025458
 80017d8:	5802546c 	.word	0x5802546c
 80017dc:	58025480 	.word	0x58025480
 80017e0:	58025494 	.word	0x58025494
 80017e4:	fffe000f 	.word	0xfffe000f
 80017e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68d2      	ldr	r2, [r2, #12]
 80017ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001800:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001808:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001818:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b6e      	ldr	r3, [pc, #440]	@ (80019e8 <HAL_DMA_Init+0x650>)
 8001830:	4413      	add	r3, r2
 8001832:	4a6e      	ldr	r2, [pc, #440]	@ (80019ec <HAL_DMA_Init+0x654>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	009a      	lsls	r2, r3, #2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f001 fc45 	bl	80030d0 <DMA_CalcBaseAndBitshift>
 8001846:	4603      	mov	r3, r0
 8001848:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2201      	movs	r2, #1
 8001854:	409a      	lsls	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	e008      	b.n	800186e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2240      	movs	r2, #64	@ 0x40
 8001860:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0b7      	b.n	80019de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <HAL_DMA_Init+0x658>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d072      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <HAL_DMA_Init+0x65c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d06d      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <HAL_DMA_Init+0x660>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d068      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <HAL_DMA_Init+0x664>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d063      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <HAL_DMA_Init+0x668>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d05e      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <HAL_DMA_Init+0x66c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d059      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <HAL_DMA_Init+0x670>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d054      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <HAL_DMA_Init+0x674>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d04f      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <HAL_DMA_Init+0x678>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04a      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <HAL_DMA_Init+0x67c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d045      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a50      	ldr	r2, [pc, #320]	@ (8001a18 <HAL_DMA_Init+0x680>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d040      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a4e      	ldr	r2, [pc, #312]	@ (8001a1c <HAL_DMA_Init+0x684>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d03b      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001a20 <HAL_DMA_Init+0x688>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d036      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a24 <HAL_DMA_Init+0x68c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d031      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001a28 <HAL_DMA_Init+0x690>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d02c      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a48      	ldr	r2, [pc, #288]	@ (8001a2c <HAL_DMA_Init+0x694>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d027      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a47      	ldr	r2, [pc, #284]	@ (8001a30 <HAL_DMA_Init+0x698>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a45      	ldr	r2, [pc, #276]	@ (8001a34 <HAL_DMA_Init+0x69c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01d      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a44      	ldr	r2, [pc, #272]	@ (8001a38 <HAL_DMA_Init+0x6a0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d018      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a42      	ldr	r2, [pc, #264]	@ (8001a3c <HAL_DMA_Init+0x6a4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a41      	ldr	r2, [pc, #260]	@ (8001a40 <HAL_DMA_Init+0x6a8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00e      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a3f      	ldr	r2, [pc, #252]	@ (8001a44 <HAL_DMA_Init+0x6ac>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a48 <HAL_DMA_Init+0x6b0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_DMA_Init+0x5c6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a3c      	ldr	r2, [pc, #240]	@ (8001a4c <HAL_DMA_Init+0x6b4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Init+0x5ca>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_DMA_Init+0x5cc>
 8001962:	2300      	movs	r3, #0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d032      	beq.n	80019ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f001 fcdf 	bl	800332c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b80      	cmp	r3, #128	@ 0x80
 8001974:	d102      	bne.n	800197c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001990:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d010      	beq.n	80019bc <HAL_DMA_Init+0x624>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d80c      	bhi.n	80019bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f001 fd5c 	bl	8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	e008      	b.n	80019ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	a7fdabf8 	.word	0xa7fdabf8
 80019ec:	cccccccd 	.word	0xcccccccd
 80019f0:	40020010 	.word	0x40020010
 80019f4:	40020028 	.word	0x40020028
 80019f8:	40020040 	.word	0x40020040
 80019fc:	40020058 	.word	0x40020058
 8001a00:	40020070 	.word	0x40020070
 8001a04:	40020088 	.word	0x40020088
 8001a08:	400200a0 	.word	0x400200a0
 8001a0c:	400200b8 	.word	0x400200b8
 8001a10:	40020410 	.word	0x40020410
 8001a14:	40020428 	.word	0x40020428
 8001a18:	40020440 	.word	0x40020440
 8001a1c:	40020458 	.word	0x40020458
 8001a20:	40020470 	.word	0x40020470
 8001a24:	40020488 	.word	0x40020488
 8001a28:	400204a0 	.word	0x400204a0
 8001a2c:	400204b8 	.word	0x400204b8
 8001a30:	58025408 	.word	0x58025408
 8001a34:	5802541c 	.word	0x5802541c
 8001a38:	58025430 	.word	0x58025430
 8001a3c:	58025444 	.word	0x58025444
 8001a40:	58025458 	.word	0x58025458
 8001a44:	5802546c 	.word	0x5802546c
 8001a48:	58025480 	.word	0x58025480
 8001a4c:	58025494 	.word	0x58025494

08001a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e226      	b.n	8001eba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_DMA_Start_IT+0x2a>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e21f      	b.n	8001eba <HAL_DMA_Start_IT+0x46a>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	f040 820a 	bne.w	8001ea4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a68      	ldr	r2, [pc, #416]	@ (8001c44 <HAL_DMA_Start_IT+0x1f4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d04a      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a66      	ldr	r2, [pc, #408]	@ (8001c48 <HAL_DMA_Start_IT+0x1f8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d045      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <HAL_DMA_Start_IT+0x1fc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d040      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a63      	ldr	r2, [pc, #396]	@ (8001c50 <HAL_DMA_Start_IT+0x200>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d03b      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a62      	ldr	r2, [pc, #392]	@ (8001c54 <HAL_DMA_Start_IT+0x204>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d036      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a60      	ldr	r2, [pc, #384]	@ (8001c58 <HAL_DMA_Start_IT+0x208>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d031      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5f      	ldr	r2, [pc, #380]	@ (8001c5c <HAL_DMA_Start_IT+0x20c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d02c      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c60 <HAL_DMA_Start_IT+0x210>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d027      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c64 <HAL_DMA_Start_IT+0x214>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d022      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5a      	ldr	r2, [pc, #360]	@ (8001c68 <HAL_DMA_Start_IT+0x218>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01d      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a59      	ldr	r2, [pc, #356]	@ (8001c6c <HAL_DMA_Start_IT+0x21c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d018      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a57      	ldr	r2, [pc, #348]	@ (8001c70 <HAL_DMA_Start_IT+0x220>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a56      	ldr	r2, [pc, #344]	@ (8001c74 <HAL_DMA_Start_IT+0x224>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00e      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a54      	ldr	r2, [pc, #336]	@ (8001c78 <HAL_DMA_Start_IT+0x228>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d009      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a53      	ldr	r2, [pc, #332]	@ (8001c7c <HAL_DMA_Start_IT+0x22c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d004      	beq.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a51      	ldr	r2, [pc, #324]	@ (8001c80 <HAL_DMA_Start_IT+0x230>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <HAL_DMA_Start_IT+0x100>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e007      	b.n	8001b60 <HAL_DMA_Start_IT+0x110>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f001 f906 	bl	8002d78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <HAL_DMA_Start_IT+0x1f4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d04a      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a33      	ldr	r2, [pc, #204]	@ (8001c48 <HAL_DMA_Start_IT+0x1f8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d045      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a31      	ldr	r2, [pc, #196]	@ (8001c4c <HAL_DMA_Start_IT+0x1fc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d040      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a30      	ldr	r2, [pc, #192]	@ (8001c50 <HAL_DMA_Start_IT+0x200>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d03b      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a2e      	ldr	r2, [pc, #184]	@ (8001c54 <HAL_DMA_Start_IT+0x204>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d036      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <HAL_DMA_Start_IT+0x208>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d031      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <HAL_DMA_Start_IT+0x20c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d02c      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c60 <HAL_DMA_Start_IT+0x210>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d027      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a28      	ldr	r2, [pc, #160]	@ (8001c64 <HAL_DMA_Start_IT+0x214>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d022      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a27      	ldr	r2, [pc, #156]	@ (8001c68 <HAL_DMA_Start_IT+0x218>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01d      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a25      	ldr	r2, [pc, #148]	@ (8001c6c <HAL_DMA_Start_IT+0x21c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a24      	ldr	r2, [pc, #144]	@ (8001c70 <HAL_DMA_Start_IT+0x220>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <HAL_DMA_Start_IT+0x224>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a21      	ldr	r2, [pc, #132]	@ (8001c78 <HAL_DMA_Start_IT+0x228>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c7c <HAL_DMA_Start_IT+0x22c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_DMA_Start_IT+0x1bc>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_DMA_Start_IT+0x230>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Start_IT+0x1c0>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_DMA_Start_IT+0x1c2>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d036      	beq.n	8001c84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 021e 	bic.w	r2, r3, #30
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0216 	orr.w	r2, r2, #22
 8001c28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d03e      	beq.n	8001cb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0208 	orr.w	r2, r2, #8
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e035      	b.n	8001cb0 <HAL_DMA_Start_IT+0x260>
 8001c44:	40020010 	.word	0x40020010
 8001c48:	40020028 	.word	0x40020028
 8001c4c:	40020040 	.word	0x40020040
 8001c50:	40020058 	.word	0x40020058
 8001c54:	40020070 	.word	0x40020070
 8001c58:	40020088 	.word	0x40020088
 8001c5c:	400200a0 	.word	0x400200a0
 8001c60:	400200b8 	.word	0x400200b8
 8001c64:	40020410 	.word	0x40020410
 8001c68:	40020428 	.word	0x40020428
 8001c6c:	40020440 	.word	0x40020440
 8001c70:	40020458 	.word	0x40020458
 8001c74:	40020470 	.word	0x40020470
 8001c78:	40020488 	.word	0x40020488
 8001c7c:	400204a0 	.word	0x400204a0
 8001c80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 020e 	bic.w	r2, r3, #14
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 020a 	orr.w	r2, r2, #10
 8001c96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0204 	orr.w	r2, r2, #4
 8001cae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a83      	ldr	r2, [pc, #524]	@ (8001ec4 <HAL_DMA_Start_IT+0x474>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d072      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a82      	ldr	r2, [pc, #520]	@ (8001ec8 <HAL_DMA_Start_IT+0x478>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d06d      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a80      	ldr	r2, [pc, #512]	@ (8001ecc <HAL_DMA_Start_IT+0x47c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d068      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7f      	ldr	r2, [pc, #508]	@ (8001ed0 <HAL_DMA_Start_IT+0x480>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d063      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a7d      	ldr	r2, [pc, #500]	@ (8001ed4 <HAL_DMA_Start_IT+0x484>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d05e      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed8 <HAL_DMA_Start_IT+0x488>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d059      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7a      	ldr	r2, [pc, #488]	@ (8001edc <HAL_DMA_Start_IT+0x48c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d054      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a79      	ldr	r2, [pc, #484]	@ (8001ee0 <HAL_DMA_Start_IT+0x490>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d04f      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a77      	ldr	r2, [pc, #476]	@ (8001ee4 <HAL_DMA_Start_IT+0x494>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d04a      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a76      	ldr	r2, [pc, #472]	@ (8001ee8 <HAL_DMA_Start_IT+0x498>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d045      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a74      	ldr	r2, [pc, #464]	@ (8001eec <HAL_DMA_Start_IT+0x49c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d040      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a73      	ldr	r2, [pc, #460]	@ (8001ef0 <HAL_DMA_Start_IT+0x4a0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d03b      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a71      	ldr	r2, [pc, #452]	@ (8001ef4 <HAL_DMA_Start_IT+0x4a4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d036      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a70      	ldr	r2, [pc, #448]	@ (8001ef8 <HAL_DMA_Start_IT+0x4a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d031      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6e      	ldr	r2, [pc, #440]	@ (8001efc <HAL_DMA_Start_IT+0x4ac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02c      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8001f00 <HAL_DMA_Start_IT+0x4b0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d027      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6b      	ldr	r2, [pc, #428]	@ (8001f04 <HAL_DMA_Start_IT+0x4b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d022      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6a      	ldr	r2, [pc, #424]	@ (8001f08 <HAL_DMA_Start_IT+0x4b8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01d      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a68      	ldr	r2, [pc, #416]	@ (8001f0c <HAL_DMA_Start_IT+0x4bc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d018      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a67      	ldr	r2, [pc, #412]	@ (8001f10 <HAL_DMA_Start_IT+0x4c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a65      	ldr	r2, [pc, #404]	@ (8001f14 <HAL_DMA_Start_IT+0x4c4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a64      	ldr	r2, [pc, #400]	@ (8001f18 <HAL_DMA_Start_IT+0x4c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a62      	ldr	r2, [pc, #392]	@ (8001f1c <HAL_DMA_Start_IT+0x4cc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_DMA_Start_IT+0x350>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a61      	ldr	r2, [pc, #388]	@ (8001f20 <HAL_DMA_Start_IT+0x4d0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_DMA_Start_IT+0x354>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_Start_IT+0x356>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01a      	beq.n	8001de0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a37      	ldr	r2, [pc, #220]	@ (8001ec4 <HAL_DMA_Start_IT+0x474>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d04a      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a36      	ldr	r2, [pc, #216]	@ (8001ec8 <HAL_DMA_Start_IT+0x478>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d045      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a34      	ldr	r2, [pc, #208]	@ (8001ecc <HAL_DMA_Start_IT+0x47c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d040      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a33      	ldr	r2, [pc, #204]	@ (8001ed0 <HAL_DMA_Start_IT+0x480>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d03b      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a31      	ldr	r2, [pc, #196]	@ (8001ed4 <HAL_DMA_Start_IT+0x484>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d036      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a30      	ldr	r2, [pc, #192]	@ (8001ed8 <HAL_DMA_Start_IT+0x488>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d031      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <HAL_DMA_Start_IT+0x48c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02c      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <HAL_DMA_Start_IT+0x490>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d027      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <HAL_DMA_Start_IT+0x494>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d022      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee8 <HAL_DMA_Start_IT+0x498>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d01d      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a28      	ldr	r2, [pc, #160]	@ (8001eec <HAL_DMA_Start_IT+0x49c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d018      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a27      	ldr	r2, [pc, #156]	@ (8001ef0 <HAL_DMA_Start_IT+0x4a0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <HAL_DMA_Start_IT+0x4a4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00e      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a24      	ldr	r2, [pc, #144]	@ (8001ef8 <HAL_DMA_Start_IT+0x4a8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a22      	ldr	r2, [pc, #136]	@ (8001efc <HAL_DMA_Start_IT+0x4ac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_DMA_Start_IT+0x430>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <HAL_DMA_Start_IT+0x4b0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d108      	bne.n	8001e92 <HAL_DMA_Start_IT+0x442>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e012      	b.n	8001eb8 <HAL_DMA_Start_IT+0x468>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e009      	b.n	8001eb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40020010 	.word	0x40020010
 8001ec8:	40020028 	.word	0x40020028
 8001ecc:	40020040 	.word	0x40020040
 8001ed0:	40020058 	.word	0x40020058
 8001ed4:	40020070 	.word	0x40020070
 8001ed8:	40020088 	.word	0x40020088
 8001edc:	400200a0 	.word	0x400200a0
 8001ee0:	400200b8 	.word	0x400200b8
 8001ee4:	40020410 	.word	0x40020410
 8001ee8:	40020428 	.word	0x40020428
 8001eec:	40020440 	.word	0x40020440
 8001ef0:	40020458 	.word	0x40020458
 8001ef4:	40020470 	.word	0x40020470
 8001ef8:	40020488 	.word	0x40020488
 8001efc:	400204a0 	.word	0x400204a0
 8001f00:	400204b8 	.word	0x400204b8
 8001f04:	58025408 	.word	0x58025408
 8001f08:	5802541c 	.word	0x5802541c
 8001f0c:	58025430 	.word	0x58025430
 8001f10:	58025444 	.word	0x58025444
 8001f14:	58025458 	.word	0x58025458
 8001f18:	5802546c 	.word	0x5802546c
 8001f1c:	58025480 	.word	0x58025480
 8001f20:	58025494 	.word	0x58025494

08001f24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	@ 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f30:	4b67      	ldr	r3, [pc, #412]	@ (80020d0 <HAL_DMA_IRQHandler+0x1ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a67      	ldr	r2, [pc, #412]	@ (80020d4 <HAL_DMA_IRQHandler+0x1b0>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a9b      	lsrs	r3, r3, #10
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80020d8 <HAL_DMA_IRQHandler+0x1b4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5d      	ldr	r2, [pc, #372]	@ (80020dc <HAL_DMA_IRQHandler+0x1b8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d045      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80020e0 <HAL_DMA_IRQHandler+0x1bc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d040      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a5a      	ldr	r2, [pc, #360]	@ (80020e4 <HAL_DMA_IRQHandler+0x1c0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a59      	ldr	r2, [pc, #356]	@ (80020e8 <HAL_DMA_IRQHandler+0x1c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a57      	ldr	r2, [pc, #348]	@ (80020ec <HAL_DMA_IRQHandler+0x1c8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a56      	ldr	r2, [pc, #344]	@ (80020f0 <HAL_DMA_IRQHandler+0x1cc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02c      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a54      	ldr	r2, [pc, #336]	@ (80020f4 <HAL_DMA_IRQHandler+0x1d0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a53      	ldr	r2, [pc, #332]	@ (80020f8 <HAL_DMA_IRQHandler+0x1d4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a51      	ldr	r2, [pc, #324]	@ (80020fc <HAL_DMA_IRQHandler+0x1d8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a50      	ldr	r2, [pc, #320]	@ (8002100 <HAL_DMA_IRQHandler+0x1dc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8002104 <HAL_DMA_IRQHandler+0x1e0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a4d      	ldr	r2, [pc, #308]	@ (8002108 <HAL_DMA_IRQHandler+0x1e4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800210c <HAL_DMA_IRQHandler+0x1e8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8002110 <HAL_DMA_IRQHandler+0x1ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xd2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a48      	ldr	r2, [pc, #288]	@ (8002114 <HAL_DMA_IRQHandler+0x1f0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_DMA_IRQHandler+0xd6>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 842b 	beq.w	8002858 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2208      	movs	r2, #8
 800200c:	409a      	lsls	r2, r3
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80a2 	beq.w	800215c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_DMA_IRQHandler+0x1b4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d04a      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2d      	ldr	r2, [pc, #180]	@ (80020dc <HAL_DMA_IRQHandler+0x1b8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d045      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2b      	ldr	r2, [pc, #172]	@ (80020e0 <HAL_DMA_IRQHandler+0x1bc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d040      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2a      	ldr	r2, [pc, #168]	@ (80020e4 <HAL_DMA_IRQHandler+0x1c0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d03b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a28      	ldr	r2, [pc, #160]	@ (80020e8 <HAL_DMA_IRQHandler+0x1c4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d036      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a27      	ldr	r2, [pc, #156]	@ (80020ec <HAL_DMA_IRQHandler+0x1c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d031      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a25      	ldr	r2, [pc, #148]	@ (80020f0 <HAL_DMA_IRQHandler+0x1cc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a24      	ldr	r2, [pc, #144]	@ (80020f4 <HAL_DMA_IRQHandler+0x1d0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d027      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a22      	ldr	r2, [pc, #136]	@ (80020f8 <HAL_DMA_IRQHandler+0x1d4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d022      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a21      	ldr	r2, [pc, #132]	@ (80020fc <HAL_DMA_IRQHandler+0x1d8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d01d      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1f      	ldr	r2, [pc, #124]	@ (8002100 <HAL_DMA_IRQHandler+0x1dc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d018      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1e      	ldr	r2, [pc, #120]	@ (8002104 <HAL_DMA_IRQHandler+0x1e0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1c      	ldr	r2, [pc, #112]	@ (8002108 <HAL_DMA_IRQHandler+0x1e4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1b      	ldr	r2, [pc, #108]	@ (800210c <HAL_DMA_IRQHandler+0x1e8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d009      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_DMA_IRQHandler+0x1ec>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x194>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <HAL_DMA_IRQHandler+0x1f0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d12f      	bne.n	8002118 <HAL_DMA_IRQHandler+0x1f4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	e02e      	b.n	800212c <HAL_DMA_IRQHandler+0x208>
 80020ce:	bf00      	nop
 80020d0:	24000000 	.word	0x24000000
 80020d4:	1b4e81b5 	.word	0x1b4e81b5
 80020d8:	40020010 	.word	0x40020010
 80020dc:	40020028 	.word	0x40020028
 80020e0:	40020040 	.word	0x40020040
 80020e4:	40020058 	.word	0x40020058
 80020e8:	40020070 	.word	0x40020070
 80020ec:	40020088 	.word	0x40020088
 80020f0:	400200a0 	.word	0x400200a0
 80020f4:	400200b8 	.word	0x400200b8
 80020f8:	40020410 	.word	0x40020410
 80020fc:	40020428 	.word	0x40020428
 8002100:	40020440 	.word	0x40020440
 8002104:	40020458 	.word	0x40020458
 8002108:	40020470 	.word	0x40020470
 800210c:	40020488 	.word	0x40020488
 8002110:	400204a0 	.word	0x400204a0
 8002114:	400204b8 	.word	0x400204b8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2208      	movs	r2, #8
 800214a:	409a      	lsls	r2, r3
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d06e      	beq.n	8002250 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a69      	ldr	r2, [pc, #420]	@ (800231c <HAL_DMA_IRQHandler+0x3f8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a67      	ldr	r2, [pc, #412]	@ (8002320 <HAL_DMA_IRQHandler+0x3fc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a66      	ldr	r2, [pc, #408]	@ (8002324 <HAL_DMA_IRQHandler+0x400>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a64      	ldr	r2, [pc, #400]	@ (8002328 <HAL_DMA_IRQHandler+0x404>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a63      	ldr	r2, [pc, #396]	@ (800232c <HAL_DMA_IRQHandler+0x408>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a61      	ldr	r2, [pc, #388]	@ (8002330 <HAL_DMA_IRQHandler+0x40c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a60      	ldr	r2, [pc, #384]	@ (8002334 <HAL_DMA_IRQHandler+0x410>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002338 <HAL_DMA_IRQHandler+0x414>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5d      	ldr	r2, [pc, #372]	@ (800233c <HAL_DMA_IRQHandler+0x418>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a5b      	ldr	r2, [pc, #364]	@ (8002340 <HAL_DMA_IRQHandler+0x41c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5a      	ldr	r2, [pc, #360]	@ (8002344 <HAL_DMA_IRQHandler+0x420>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_DMA_IRQHandler+0x424>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a57      	ldr	r2, [pc, #348]	@ (800234c <HAL_DMA_IRQHandler+0x428>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a55      	ldr	r2, [pc, #340]	@ (8002350 <HAL_DMA_IRQHandler+0x42c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a54      	ldr	r2, [pc, #336]	@ (8002354 <HAL_DMA_IRQHandler+0x430>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2ee>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a52      	ldr	r2, [pc, #328]	@ (8002358 <HAL_DMA_IRQHandler+0x434>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10a      	bne.n	8002228 <HAL_DMA_IRQHandler+0x304>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e003      	b.n	8002230 <HAL_DMA_IRQHandler+0x30c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2300      	movs	r3, #0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2201      	movs	r2, #1
 800223e:	409a      	lsls	r2, r3
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	f043 0202 	orr.w	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2204      	movs	r2, #4
 800225a:	409a      	lsls	r2, r3
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 808f 	beq.w	8002384 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2c      	ldr	r2, [pc, #176]	@ (800231c <HAL_DMA_IRQHandler+0x3f8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d04a      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2a      	ldr	r2, [pc, #168]	@ (8002320 <HAL_DMA_IRQHandler+0x3fc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d045      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a29      	ldr	r2, [pc, #164]	@ (8002324 <HAL_DMA_IRQHandler+0x400>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d040      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_DMA_IRQHandler+0x404>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d03b      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a26      	ldr	r2, [pc, #152]	@ (800232c <HAL_DMA_IRQHandler+0x408>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d036      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a24      	ldr	r2, [pc, #144]	@ (8002330 <HAL_DMA_IRQHandler+0x40c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d031      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a23      	ldr	r2, [pc, #140]	@ (8002334 <HAL_DMA_IRQHandler+0x410>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d02c      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a21      	ldr	r2, [pc, #132]	@ (8002338 <HAL_DMA_IRQHandler+0x414>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d027      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a20      	ldr	r2, [pc, #128]	@ (800233c <HAL_DMA_IRQHandler+0x418>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002340 <HAL_DMA_IRQHandler+0x41c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01d      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <HAL_DMA_IRQHandler+0x420>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d018      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <HAL_DMA_IRQHandler+0x424>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	@ (800234c <HAL_DMA_IRQHandler+0x428>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00e      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <HAL_DMA_IRQHandler+0x42c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_DMA_IRQHandler+0x430>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_DMA_IRQHandler+0x3e2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <HAL_DMA_IRQHandler+0x434>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d12a      	bne.n	800235c <HAL_DMA_IRQHandler+0x438>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e023      	b.n	8002364 <HAL_DMA_IRQHandler+0x440>
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2204      	movs	r2, #4
 8002372:	409a      	lsls	r2, r3
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2210      	movs	r2, #16
 800238e:	409a      	lsls	r2, r3
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a6 	beq.w	80024e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a85      	ldr	r2, [pc, #532]	@ (80025b4 <HAL_DMA_IRQHandler+0x690>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04a      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a83      	ldr	r2, [pc, #524]	@ (80025b8 <HAL_DMA_IRQHandler+0x694>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d045      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a82      	ldr	r2, [pc, #520]	@ (80025bc <HAL_DMA_IRQHandler+0x698>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d040      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a80      	ldr	r2, [pc, #512]	@ (80025c0 <HAL_DMA_IRQHandler+0x69c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d03b      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7f      	ldr	r2, [pc, #508]	@ (80025c4 <HAL_DMA_IRQHandler+0x6a0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d036      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7d      	ldr	r2, [pc, #500]	@ (80025c8 <HAL_DMA_IRQHandler+0x6a4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7c      	ldr	r2, [pc, #496]	@ (80025cc <HAL_DMA_IRQHandler+0x6a8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d02c      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7a      	ldr	r2, [pc, #488]	@ (80025d0 <HAL_DMA_IRQHandler+0x6ac>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a79      	ldr	r2, [pc, #484]	@ (80025d4 <HAL_DMA_IRQHandler+0x6b0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a77      	ldr	r2, [pc, #476]	@ (80025d8 <HAL_DMA_IRQHandler+0x6b4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a76      	ldr	r2, [pc, #472]	@ (80025dc <HAL_DMA_IRQHandler+0x6b8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d018      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a74      	ldr	r2, [pc, #464]	@ (80025e0 <HAL_DMA_IRQHandler+0x6bc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a73      	ldr	r2, [pc, #460]	@ (80025e4 <HAL_DMA_IRQHandler+0x6c0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a71      	ldr	r2, [pc, #452]	@ (80025e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a70      	ldr	r2, [pc, #448]	@ (80025ec <HAL_DMA_IRQHandler+0x6c8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_DMA_IRQHandler+0x516>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10a      	bne.n	8002450 <HAL_DMA_IRQHandler+0x52c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e009      	b.n	8002464 <HAL_DMA_IRQHandler+0x540>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03e      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2210      	movs	r2, #16
 8002472:	409a      	lsls	r2, r3
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d018      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d108      	bne.n	80024a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d024      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
 80024a4:	e01f      	b.n	80024e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01b      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	4798      	blx	r3
 80024b6:	e016      	b.n	80024e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2220      	movs	r2, #32
 80024f0:	409a      	lsls	r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8110 	beq.w	800271c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2c      	ldr	r2, [pc, #176]	@ (80025b4 <HAL_DMA_IRQHandler+0x690>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d04a      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2b      	ldr	r2, [pc, #172]	@ (80025b8 <HAL_DMA_IRQHandler+0x694>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d045      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <HAL_DMA_IRQHandler+0x698>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d040      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a28      	ldr	r2, [pc, #160]	@ (80025c0 <HAL_DMA_IRQHandler+0x69c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d03b      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <HAL_DMA_IRQHandler+0x6a0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d036      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a25      	ldr	r2, [pc, #148]	@ (80025c8 <HAL_DMA_IRQHandler+0x6a4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d031      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a23      	ldr	r2, [pc, #140]	@ (80025cc <HAL_DMA_IRQHandler+0x6a8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d02c      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a22      	ldr	r2, [pc, #136]	@ (80025d0 <HAL_DMA_IRQHandler+0x6ac>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d027      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a20      	ldr	r2, [pc, #128]	@ (80025d4 <HAL_DMA_IRQHandler+0x6b0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d022      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1f      	ldr	r2, [pc, #124]	@ (80025d8 <HAL_DMA_IRQHandler+0x6b4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d01d      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_DMA_IRQHandler+0x6b8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d018      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <HAL_DMA_IRQHandler+0x6bc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1a      	ldr	r2, [pc, #104]	@ (80025e4 <HAL_DMA_IRQHandler+0x6c0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00e      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a19      	ldr	r2, [pc, #100]	@ (80025e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d009      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a17      	ldr	r2, [pc, #92]	@ (80025ec <HAL_DMA_IRQHandler+0x6c8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_DMA_IRQHandler+0x678>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	@ (80025f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d12b      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x6d0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	e02a      	b.n	8002608 <HAL_DMA_IRQHandler+0x6e4>
 80025b2:	bf00      	nop
 80025b4:	40020010 	.word	0x40020010
 80025b8:	40020028 	.word	0x40020028
 80025bc:	40020040 	.word	0x40020040
 80025c0:	40020058 	.word	0x40020058
 80025c4:	40020070 	.word	0x40020070
 80025c8:	40020088 	.word	0x40020088
 80025cc:	400200a0 	.word	0x400200a0
 80025d0:	400200b8 	.word	0x400200b8
 80025d4:	40020410 	.word	0x40020410
 80025d8:	40020428 	.word	0x40020428
 80025dc:	40020440 	.word	0x40020440
 80025e0:	40020458 	.word	0x40020458
 80025e4:	40020470 	.word	0x40020470
 80025e8:	40020488 	.word	0x40020488
 80025ec:	400204a0 	.word	0x400204a0
 80025f0:	400204b8 	.word	0x400204b8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8087 	beq.w	800271c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2220      	movs	r2, #32
 8002618:	409a      	lsls	r2, r3
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b04      	cmp	r3, #4
 8002628:	d139      	bne.n	800269e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0216 	bic.w	r2, r2, #22
 8002638:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002648:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <HAL_DMA_IRQHandler+0x736>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0208 	bic.w	r2, r2, #8
 8002668:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	223f      	movs	r2, #63	@ 0x3f
 8002674:	409a      	lsls	r2, r3
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 834a 	beq.w	8002d28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
          }
          return;
 800269c:	e344      	b.n	8002d28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d02c      	beq.n	800271c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
 80026ca:	e027      	b.n	800271c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d023      	beq.n	800271c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e01e      	b.n	800271c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10f      	bne.n	800270c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0210 	bic.w	r2, r2, #16
 80026fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8306 	beq.w	8002d32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8088 	beq.w	8002844 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2204      	movs	r2, #4
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7a      	ldr	r2, [pc, #488]	@ (800292c <HAL_DMA_IRQHandler+0xa08>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04a      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a79      	ldr	r2, [pc, #484]	@ (8002930 <HAL_DMA_IRQHandler+0xa0c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d045      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a77      	ldr	r2, [pc, #476]	@ (8002934 <HAL_DMA_IRQHandler+0xa10>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d040      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a76      	ldr	r2, [pc, #472]	@ (8002938 <HAL_DMA_IRQHandler+0xa14>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d03b      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a74      	ldr	r2, [pc, #464]	@ (800293c <HAL_DMA_IRQHandler+0xa18>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d036      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a73      	ldr	r2, [pc, #460]	@ (8002940 <HAL_DMA_IRQHandler+0xa1c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d031      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a71      	ldr	r2, [pc, #452]	@ (8002944 <HAL_DMA_IRQHandler+0xa20>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d02c      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a70      	ldr	r2, [pc, #448]	@ (8002948 <HAL_DMA_IRQHandler+0xa24>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d027      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6e      	ldr	r2, [pc, #440]	@ (800294c <HAL_DMA_IRQHandler+0xa28>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d022      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6d      	ldr	r2, [pc, #436]	@ (8002950 <HAL_DMA_IRQHandler+0xa2c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d01d      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002954 <HAL_DMA_IRQHandler+0xa30>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d018      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002958 <HAL_DMA_IRQHandler+0xa34>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d013      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a68      	ldr	r2, [pc, #416]	@ (800295c <HAL_DMA_IRQHandler+0xa38>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00e      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a67      	ldr	r2, [pc, #412]	@ (8002960 <HAL_DMA_IRQHandler+0xa3c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a65      	ldr	r2, [pc, #404]	@ (8002964 <HAL_DMA_IRQHandler+0xa40>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_DMA_IRQHandler+0x8b8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a64      	ldr	r2, [pc, #400]	@ (8002968 <HAL_DMA_IRQHandler+0xa44>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <HAL_DMA_IRQHandler+0x8ca>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e007      	b.n	80027fe <HAL_DMA_IRQHandler+0x8da>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3301      	adds	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002806:	429a      	cmp	r2, r3
 8002808:	d307      	bcc.n	800281a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f2      	bne.n	80027fe <HAL_DMA_IRQHandler+0x8da>
 8002818:	e000      	b.n	800281c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800281a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002832:	e003      	b.n	800283c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8272 	beq.w	8002d32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
 8002856:	e26c      	b.n	8002d32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a43      	ldr	r2, [pc, #268]	@ (800296c <HAL_DMA_IRQHandler+0xa48>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d022      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x984>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a42      	ldr	r2, [pc, #264]	@ (8002970 <HAL_DMA_IRQHandler+0xa4c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d01d      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x984>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a40      	ldr	r2, [pc, #256]	@ (8002974 <HAL_DMA_IRQHandler+0xa50>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d018      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x984>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a3f      	ldr	r2, [pc, #252]	@ (8002978 <HAL_DMA_IRQHandler+0xa54>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x984>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3d      	ldr	r2, [pc, #244]	@ (800297c <HAL_DMA_IRQHandler+0xa58>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00e      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x984>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3c      	ldr	r2, [pc, #240]	@ (8002980 <HAL_DMA_IRQHandler+0xa5c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x984>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a3a      	ldr	r2, [pc, #232]	@ (8002984 <HAL_DMA_IRQHandler+0xa60>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x984>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a39      	ldr	r2, [pc, #228]	@ (8002988 <HAL_DMA_IRQHandler+0xa64>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_DMA_IRQHandler+0x988>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_DMA_IRQHandler+0x98a>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 823f 	beq.w	8002d32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2204      	movs	r2, #4
 80028c6:	409a      	lsls	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80cd 	beq.w	8002a6c <HAL_DMA_IRQHandler+0xb48>
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80c7 	beq.w	8002a6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2204      	movs	r2, #4
 80028e8:	409a      	lsls	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d049      	beq.n	800298c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8210 	beq.w	8002d2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002914:	e20a      	b.n	8002d2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8206 	beq.w	8002d2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002928:	e200      	b.n	8002d2c <HAL_DMA_IRQHandler+0xe08>
 800292a:	bf00      	nop
 800292c:	40020010 	.word	0x40020010
 8002930:	40020028 	.word	0x40020028
 8002934:	40020040 	.word	0x40020040
 8002938:	40020058 	.word	0x40020058
 800293c:	40020070 	.word	0x40020070
 8002940:	40020088 	.word	0x40020088
 8002944:	400200a0 	.word	0x400200a0
 8002948:	400200b8 	.word	0x400200b8
 800294c:	40020410 	.word	0x40020410
 8002950:	40020428 	.word	0x40020428
 8002954:	40020440 	.word	0x40020440
 8002958:	40020458 	.word	0x40020458
 800295c:	40020470 	.word	0x40020470
 8002960:	40020488 	.word	0x40020488
 8002964:	400204a0 	.word	0x400204a0
 8002968:	400204b8 	.word	0x400204b8
 800296c:	58025408 	.word	0x58025408
 8002970:	5802541c 	.word	0x5802541c
 8002974:	58025430 	.word	0x58025430
 8002978:	58025444 	.word	0x58025444
 800297c:	58025458 	.word	0x58025458
 8002980:	5802546c 	.word	0x5802546c
 8002984:	58025480 	.word	0x58025480
 8002988:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d160      	bne.n	8002a58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b98 <HAL_DMA_IRQHandler+0xc74>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04a      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a7d      	ldr	r2, [pc, #500]	@ (8002b9c <HAL_DMA_IRQHandler+0xc78>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d045      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba0 <HAL_DMA_IRQHandler+0xc7c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ba4 <HAL_DMA_IRQHandler+0xc80>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d03b      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a79      	ldr	r2, [pc, #484]	@ (8002ba8 <HAL_DMA_IRQHandler+0xc84>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d036      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a77      	ldr	r2, [pc, #476]	@ (8002bac <HAL_DMA_IRQHandler+0xc88>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a76      	ldr	r2, [pc, #472]	@ (8002bb0 <HAL_DMA_IRQHandler+0xc8c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02c      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a74      	ldr	r2, [pc, #464]	@ (8002bb4 <HAL_DMA_IRQHandler+0xc90>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d027      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a73      	ldr	r2, [pc, #460]	@ (8002bb8 <HAL_DMA_IRQHandler+0xc94>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a71      	ldr	r2, [pc, #452]	@ (8002bbc <HAL_DMA_IRQHandler+0xc98>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a70      	ldr	r2, [pc, #448]	@ (8002bc0 <HAL_DMA_IRQHandler+0xc9c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d018      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc4 <HAL_DMA_IRQHandler+0xca0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6d      	ldr	r2, [pc, #436]	@ (8002bc8 <HAL_DMA_IRQHandler+0xca4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bcc <HAL_DMA_IRQHandler+0xca8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd0 <HAL_DMA_IRQHandler+0xcac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xb12>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a68      	ldr	r2, [pc, #416]	@ (8002bd4 <HAL_DMA_IRQHandler+0xcb0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <HAL_DMA_IRQHandler+0xb24>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e007      	b.n	8002a58 <HAL_DMA_IRQHandler+0xb34>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8165 	beq.w	8002d2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6a:	e15f      	b.n	8002d2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2202      	movs	r2, #2
 8002a76:	409a      	lsls	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80c5 	beq.w	8002c0c <HAL_DMA_IRQHandler+0xce8>
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80bf 	beq.w	8002c0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2202      	movs	r2, #2
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d018      	beq.n	8002ada <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 813a 	beq.w	8002d30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ac4:	e134      	b.n	8002d30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8130 	beq.w	8002d30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ad8:	e12a      	b.n	8002d30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f040 8089 	bne.w	8002bf8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2b      	ldr	r2, [pc, #172]	@ (8002b98 <HAL_DMA_IRQHandler+0xc74>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04a      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a29      	ldr	r2, [pc, #164]	@ (8002b9c <HAL_DMA_IRQHandler+0xc78>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d045      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a28      	ldr	r2, [pc, #160]	@ (8002ba0 <HAL_DMA_IRQHandler+0xc7c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <HAL_DMA_IRQHandler+0xc80>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a25      	ldr	r2, [pc, #148]	@ (8002ba8 <HAL_DMA_IRQHandler+0xc84>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d036      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <HAL_DMA_IRQHandler+0xc88>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d031      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a22      	ldr	r2, [pc, #136]	@ (8002bb0 <HAL_DMA_IRQHandler+0xc8c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02c      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a20      	ldr	r2, [pc, #128]	@ (8002bb4 <HAL_DMA_IRQHandler+0xc90>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d027      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <HAL_DMA_IRQHandler+0xc94>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <HAL_DMA_IRQHandler+0xc98>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <HAL_DMA_IRQHandler+0xc9c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_DMA_IRQHandler+0xca0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a19      	ldr	r2, [pc, #100]	@ (8002bc8 <HAL_DMA_IRQHandler+0xca4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	@ (8002bcc <HAL_DMA_IRQHandler+0xca8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a16      	ldr	r2, [pc, #88]	@ (8002bd0 <HAL_DMA_IRQHandler+0xcac>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xc62>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <HAL_DMA_IRQHandler+0xcb0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d128      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0xcb4>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0214 	bic.w	r2, r2, #20
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e027      	b.n	8002be8 <HAL_DMA_IRQHandler+0xcc4>
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 020a 	bic.w	r2, r2, #10
 8002be6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8097 	beq.w	8002d30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c0a:	e091      	b.n	8002d30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2208      	movs	r2, #8
 8002c16:	409a      	lsls	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8088 	beq.w	8002d32 <HAL_DMA_IRQHandler+0xe0e>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8082 	beq.w	8002d32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a41      	ldr	r2, [pc, #260]	@ (8002d38 <HAL_DMA_IRQHandler+0xe14>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d04a      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d3c <HAL_DMA_IRQHandler+0xe18>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d045      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a3e      	ldr	r2, [pc, #248]	@ (8002d40 <HAL_DMA_IRQHandler+0xe1c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d040      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3c      	ldr	r2, [pc, #240]	@ (8002d44 <HAL_DMA_IRQHandler+0xe20>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d03b      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d48 <HAL_DMA_IRQHandler+0xe24>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d036      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a39      	ldr	r2, [pc, #228]	@ (8002d4c <HAL_DMA_IRQHandler+0xe28>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d031      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a38      	ldr	r2, [pc, #224]	@ (8002d50 <HAL_DMA_IRQHandler+0xe2c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d02c      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a36      	ldr	r2, [pc, #216]	@ (8002d54 <HAL_DMA_IRQHandler+0xe30>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d027      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a35      	ldr	r2, [pc, #212]	@ (8002d58 <HAL_DMA_IRQHandler+0xe34>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a33      	ldr	r2, [pc, #204]	@ (8002d5c <HAL_DMA_IRQHandler+0xe38>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <HAL_DMA_IRQHandler+0xe3c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a30      	ldr	r2, [pc, #192]	@ (8002d64 <HAL_DMA_IRQHandler+0xe40>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2f      	ldr	r2, [pc, #188]	@ (8002d68 <HAL_DMA_IRQHandler+0xe44>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d6c <HAL_DMA_IRQHandler+0xe48>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8002d70 <HAL_DMA_IRQHandler+0xe4c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_IRQHandler+0xdaa>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d74 <HAL_DMA_IRQHandler+0xe50>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0xdbc>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 021c 	bic.w	r2, r2, #28
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e007      	b.n	8002cf0 <HAL_DMA_IRQHandler+0xdcc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 020e 	bic.w	r2, r2, #14
 8002cee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e004      	b.n	8002d32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002d28:	bf00      	nop
 8002d2a:	e002      	b.n	8002d32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d32:	3728      	adds	r7, #40	@ 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40020010 	.word	0x40020010
 8002d3c:	40020028 	.word	0x40020028
 8002d40:	40020040 	.word	0x40020040
 8002d44:	40020058 	.word	0x40020058
 8002d48:	40020070 	.word	0x40020070
 8002d4c:	40020088 	.word	0x40020088
 8002d50:	400200a0 	.word	0x400200a0
 8002d54:	400200b8 	.word	0x400200b8
 8002d58:	40020410 	.word	0x40020410
 8002d5c:	40020428 	.word	0x40020428
 8002d60:	40020440 	.word	0x40020440
 8002d64:	40020458 	.word	0x40020458
 8002d68:	40020470 	.word	0x40020470
 8002d6c:	40020488 	.word	0x40020488
 8002d70:	400204a0 	.word	0x400204a0
 8002d74:	400204b8 	.word	0x400204b8

08002d78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7f      	ldr	r2, [pc, #508]	@ (8002f94 <DMA_SetConfig+0x21c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d072      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7d      	ldr	r2, [pc, #500]	@ (8002f98 <DMA_SetConfig+0x220>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d06d      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7c      	ldr	r2, [pc, #496]	@ (8002f9c <DMA_SetConfig+0x224>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d068      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a7a      	ldr	r2, [pc, #488]	@ (8002fa0 <DMA_SetConfig+0x228>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d063      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a79      	ldr	r2, [pc, #484]	@ (8002fa4 <DMA_SetConfig+0x22c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d05e      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a77      	ldr	r2, [pc, #476]	@ (8002fa8 <DMA_SetConfig+0x230>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d059      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a76      	ldr	r2, [pc, #472]	@ (8002fac <DMA_SetConfig+0x234>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d054      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a74      	ldr	r2, [pc, #464]	@ (8002fb0 <DMA_SetConfig+0x238>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d04f      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	@ (8002fb4 <DMA_SetConfig+0x23c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a71      	ldr	r2, [pc, #452]	@ (8002fb8 <DMA_SetConfig+0x240>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a70      	ldr	r2, [pc, #448]	@ (8002fbc <DMA_SetConfig+0x244>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc0 <DMA_SetConfig+0x248>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002fc4 <DMA_SetConfig+0x24c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc8 <DMA_SetConfig+0x250>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6a      	ldr	r2, [pc, #424]	@ (8002fcc <DMA_SetConfig+0x254>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a68      	ldr	r2, [pc, #416]	@ (8002fd0 <DMA_SetConfig+0x258>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a67      	ldr	r2, [pc, #412]	@ (8002fd4 <DMA_SetConfig+0x25c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	@ (8002fd8 <DMA_SetConfig+0x260>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a64      	ldr	r2, [pc, #400]	@ (8002fdc <DMA_SetConfig+0x264>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a62      	ldr	r2, [pc, #392]	@ (8002fe0 <DMA_SetConfig+0x268>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a61      	ldr	r2, [pc, #388]	@ (8002fe4 <DMA_SetConfig+0x26c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe8 <DMA_SetConfig+0x270>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a5e      	ldr	r2, [pc, #376]	@ (8002fec <DMA_SetConfig+0x274>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <DMA_SetConfig+0x10a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff0 <DMA_SetConfig+0x278>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <DMA_SetConfig+0x10e>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <DMA_SetConfig+0x110>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ea6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a39      	ldr	r2, [pc, #228]	@ (8002f94 <DMA_SetConfig+0x21c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d04a      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a38      	ldr	r2, [pc, #224]	@ (8002f98 <DMA_SetConfig+0x220>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d045      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a36      	ldr	r2, [pc, #216]	@ (8002f9c <DMA_SetConfig+0x224>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d040      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a35      	ldr	r2, [pc, #212]	@ (8002fa0 <DMA_SetConfig+0x228>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d03b      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a33      	ldr	r2, [pc, #204]	@ (8002fa4 <DMA_SetConfig+0x22c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d036      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a32      	ldr	r2, [pc, #200]	@ (8002fa8 <DMA_SetConfig+0x230>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d031      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a30      	ldr	r2, [pc, #192]	@ (8002fac <DMA_SetConfig+0x234>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02c      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb0 <DMA_SetConfig+0x238>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d027      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb4 <DMA_SetConfig+0x23c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb8 <DMA_SetConfig+0x240>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01d      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2a      	ldr	r2, [pc, #168]	@ (8002fbc <DMA_SetConfig+0x244>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a29      	ldr	r2, [pc, #164]	@ (8002fc0 <DMA_SetConfig+0x248>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a27      	ldr	r2, [pc, #156]	@ (8002fc4 <DMA_SetConfig+0x24c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a26      	ldr	r2, [pc, #152]	@ (8002fc8 <DMA_SetConfig+0x250>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a24      	ldr	r2, [pc, #144]	@ (8002fcc <DMA_SetConfig+0x254>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <DMA_SetConfig+0x1d0>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a23      	ldr	r2, [pc, #140]	@ (8002fd0 <DMA_SetConfig+0x258>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <DMA_SetConfig+0x1d4>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <DMA_SetConfig+0x1d6>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d059      	beq.n	8003006 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	223f      	movs	r2, #63	@ 0x3f
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b40      	cmp	r3, #64	@ 0x40
 8002f80:	d138      	bne.n	8002ff4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f92:	e086      	b.n	80030a2 <DMA_SetConfig+0x32a>
 8002f94:	40020010 	.word	0x40020010
 8002f98:	40020028 	.word	0x40020028
 8002f9c:	40020040 	.word	0x40020040
 8002fa0:	40020058 	.word	0x40020058
 8002fa4:	40020070 	.word	0x40020070
 8002fa8:	40020088 	.word	0x40020088
 8002fac:	400200a0 	.word	0x400200a0
 8002fb0:	400200b8 	.word	0x400200b8
 8002fb4:	40020410 	.word	0x40020410
 8002fb8:	40020428 	.word	0x40020428
 8002fbc:	40020440 	.word	0x40020440
 8002fc0:	40020458 	.word	0x40020458
 8002fc4:	40020470 	.word	0x40020470
 8002fc8:	40020488 	.word	0x40020488
 8002fcc:	400204a0 	.word	0x400204a0
 8002fd0:	400204b8 	.word	0x400204b8
 8002fd4:	58025408 	.word	0x58025408
 8002fd8:	5802541c 	.word	0x5802541c
 8002fdc:	58025430 	.word	0x58025430
 8002fe0:	58025444 	.word	0x58025444
 8002fe4:	58025458 	.word	0x58025458
 8002fe8:	5802546c 	.word	0x5802546c
 8002fec:	58025480 	.word	0x58025480
 8002ff0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
}
 8003004:	e04d      	b.n	80030a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a29      	ldr	r2, [pc, #164]	@ (80030b0 <DMA_SetConfig+0x338>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <DMA_SetConfig+0x2de>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a27      	ldr	r2, [pc, #156]	@ (80030b4 <DMA_SetConfig+0x33c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <DMA_SetConfig+0x2de>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a26      	ldr	r2, [pc, #152]	@ (80030b8 <DMA_SetConfig+0x340>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d018      	beq.n	8003056 <DMA_SetConfig+0x2de>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a24      	ldr	r2, [pc, #144]	@ (80030bc <DMA_SetConfig+0x344>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <DMA_SetConfig+0x2de>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <DMA_SetConfig+0x348>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <DMA_SetConfig+0x2de>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a21      	ldr	r2, [pc, #132]	@ (80030c4 <DMA_SetConfig+0x34c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <DMA_SetConfig+0x2de>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <DMA_SetConfig+0x350>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <DMA_SetConfig+0x2de>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <DMA_SetConfig+0x354>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <DMA_SetConfig+0x2e2>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <DMA_SetConfig+0x2e4>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2201      	movs	r2, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b40      	cmp	r3, #64	@ 0x40
 800307e:	d108      	bne.n	8003092 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	60da      	str	r2, [r3, #12]
}
 8003090:	e007      	b.n	80030a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	60da      	str	r2, [r3, #12]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	58025408 	.word	0x58025408
 80030b4:	5802541c 	.word	0x5802541c
 80030b8:	58025430 	.word	0x58025430
 80030bc:	58025444 	.word	0x58025444
 80030c0:	58025458 	.word	0x58025458
 80030c4:	5802546c 	.word	0x5802546c
 80030c8:	58025480 	.word	0x58025480
 80030cc:	58025494 	.word	0x58025494

080030d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a42      	ldr	r2, [pc, #264]	@ (80031e8 <DMA_CalcBaseAndBitshift+0x118>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d04a      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a41      	ldr	r2, [pc, #260]	@ (80031ec <DMA_CalcBaseAndBitshift+0x11c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d045      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a3f      	ldr	r2, [pc, #252]	@ (80031f0 <DMA_CalcBaseAndBitshift+0x120>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d040      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3e      	ldr	r2, [pc, #248]	@ (80031f4 <DMA_CalcBaseAndBitshift+0x124>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d03b      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a3c      	ldr	r2, [pc, #240]	@ (80031f8 <DMA_CalcBaseAndBitshift+0x128>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d036      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3b      	ldr	r2, [pc, #236]	@ (80031fc <DMA_CalcBaseAndBitshift+0x12c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d031      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a39      	ldr	r2, [pc, #228]	@ (8003200 <DMA_CalcBaseAndBitshift+0x130>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02c      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a38      	ldr	r2, [pc, #224]	@ (8003204 <DMA_CalcBaseAndBitshift+0x134>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d027      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a36      	ldr	r2, [pc, #216]	@ (8003208 <DMA_CalcBaseAndBitshift+0x138>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a35      	ldr	r2, [pc, #212]	@ (800320c <DMA_CalcBaseAndBitshift+0x13c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d01d      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a33      	ldr	r2, [pc, #204]	@ (8003210 <DMA_CalcBaseAndBitshift+0x140>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a32      	ldr	r2, [pc, #200]	@ (8003214 <DMA_CalcBaseAndBitshift+0x144>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a30      	ldr	r2, [pc, #192]	@ (8003218 <DMA_CalcBaseAndBitshift+0x148>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2f      	ldr	r2, [pc, #188]	@ (800321c <DMA_CalcBaseAndBitshift+0x14c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2d      	ldr	r2, [pc, #180]	@ (8003220 <DMA_CalcBaseAndBitshift+0x150>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xa8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2c      	ldr	r2, [pc, #176]	@ (8003224 <DMA_CalcBaseAndBitshift+0x154>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <DMA_CalcBaseAndBitshift+0xac>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <DMA_CalcBaseAndBitshift+0xae>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d024      	beq.n	80031cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3b10      	subs	r3, #16
 800318a:	4a27      	ldr	r2, [pc, #156]	@ (8003228 <DMA_CalcBaseAndBitshift+0x158>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	4a24      	ldr	r2, [pc, #144]	@ (800322c <DMA_CalcBaseAndBitshift+0x15c>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	461a      	mov	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d908      	bls.n	80031bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003230 <DMA_CalcBaseAndBitshift+0x160>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	1d1a      	adds	r2, r3, #4
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80031ba:	e00d      	b.n	80031d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <DMA_CalcBaseAndBitshift+0x160>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ca:	e005      	b.n	80031d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40020010 	.word	0x40020010
 80031ec:	40020028 	.word	0x40020028
 80031f0:	40020040 	.word	0x40020040
 80031f4:	40020058 	.word	0x40020058
 80031f8:	40020070 	.word	0x40020070
 80031fc:	40020088 	.word	0x40020088
 8003200:	400200a0 	.word	0x400200a0
 8003204:	400200b8 	.word	0x400200b8
 8003208:	40020410 	.word	0x40020410
 800320c:	40020428 	.word	0x40020428
 8003210:	40020440 	.word	0x40020440
 8003214:	40020458 	.word	0x40020458
 8003218:	40020470 	.word	0x40020470
 800321c:	40020488 	.word	0x40020488
 8003220:	400204a0 	.word	0x400204a0
 8003224:	400204b8 	.word	0x400204b8
 8003228:	aaaaaaab 	.word	0xaaaaaaab
 800322c:	080087ac 	.word	0x080087ac
 8003230:	fffffc00 	.word	0xfffffc00

08003234 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d120      	bne.n	800328a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	2b03      	cmp	r3, #3
 800324e:	d858      	bhi.n	8003302 <DMA_CheckFifoParam+0xce>
 8003250:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <DMA_CheckFifoParam+0x24>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	08003269 	.word	0x08003269
 800325c:	0800327b 	.word	0x0800327b
 8003260:	08003269 	.word	0x08003269
 8003264:	08003303 	.word	0x08003303
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d048      	beq.n	8003306 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003278:	e045      	b.n	8003306 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003282:	d142      	bne.n	800330a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003288:	e03f      	b.n	800330a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003292:	d123      	bne.n	80032dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003298:	2b03      	cmp	r3, #3
 800329a:	d838      	bhi.n	800330e <DMA_CheckFifoParam+0xda>
 800329c:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <DMA_CheckFifoParam+0x70>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	080032bb 	.word	0x080032bb
 80032ac:	080032b5 	.word	0x080032b5
 80032b0:	080032cd 	.word	0x080032cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
        break;
 80032b8:	e030      	b.n	800331c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d025      	beq.n	8003312 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032ca:	e022      	b.n	8003312 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032d4:	d11f      	bne.n	8003316 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032da:	e01c      	b.n	8003316 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d902      	bls.n	80032ea <DMA_CheckFifoParam+0xb6>
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d003      	beq.n	80032f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80032e8:	e018      	b.n	800331c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
        break;
 80032ee:	e015      	b.n	800331c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00e      	beq.n	800331a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
    break;
 8003300:	e00b      	b.n	800331a <DMA_CheckFifoParam+0xe6>
        break;
 8003302:	bf00      	nop
 8003304:	e00a      	b.n	800331c <DMA_CheckFifoParam+0xe8>
        break;
 8003306:	bf00      	nop
 8003308:	e008      	b.n	800331c <DMA_CheckFifoParam+0xe8>
        break;
 800330a:	bf00      	nop
 800330c:	e006      	b.n	800331c <DMA_CheckFifoParam+0xe8>
        break;
 800330e:	bf00      	nop
 8003310:	e004      	b.n	800331c <DMA_CheckFifoParam+0xe8>
        break;
 8003312:	bf00      	nop
 8003314:	e002      	b.n	800331c <DMA_CheckFifoParam+0xe8>
        break;
 8003316:	bf00      	nop
 8003318:	e000      	b.n	800331c <DMA_CheckFifoParam+0xe8>
    break;
 800331a:	bf00      	nop
    }
  }

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop

0800332c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a38      	ldr	r2, [pc, #224]	@ (8003420 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a36      	ldr	r2, [pc, #216]	@ (8003424 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01d      	beq.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a35      	ldr	r2, [pc, #212]	@ (8003428 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d018      	beq.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a33      	ldr	r2, [pc, #204]	@ (800342c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a32      	ldr	r2, [pc, #200]	@ (8003430 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00e      	beq.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a30      	ldr	r2, [pc, #192]	@ (8003434 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d009      	beq.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2f      	ldr	r2, [pc, #188]	@ (8003438 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2d      	ldr	r2, [pc, #180]	@ (800343c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01a      	beq.n	80033ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	3b08      	subs	r3, #8
 800339c:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4b26      	ldr	r3, [pc, #152]	@ (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a24      	ldr	r2, [pc, #144]	@ (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80033b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2201      	movs	r2, #1
 80033c2:	409a      	lsls	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80033c8:	e024      	b.n	8003414 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3b10      	subs	r3, #16
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d806      	bhi.n	80033f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d902      	bls.n	80033f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3308      	adds	r3, #8
 80033f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a16      	ldr	r2, [pc, #88]	@ (800345c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003404:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2201      	movs	r2, #1
 800340e:	409a      	lsls	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	58025408 	.word	0x58025408
 8003424:	5802541c 	.word	0x5802541c
 8003428:	58025430 	.word	0x58025430
 800342c:	58025444 	.word	0x58025444
 8003430:	58025458 	.word	0x58025458
 8003434:	5802546c 	.word	0x5802546c
 8003438:	58025480 	.word	0x58025480
 800343c:	58025494 	.word	0x58025494
 8003440:	cccccccd 	.word	0xcccccccd
 8003444:	16009600 	.word	0x16009600
 8003448:	58025880 	.word	0x58025880
 800344c:	aaaaaaab 	.word	0xaaaaaaab
 8003450:	400204b8 	.word	0x400204b8
 8003454:	4002040f 	.word	0x4002040f
 8003458:	10008200 	.word	0x10008200
 800345c:	40020880 	.word	0x40020880

08003460 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d04a      	beq.n	800350c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d847      	bhi.n	800350c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a25      	ldr	r2, [pc, #148]	@ (8003518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d022      	beq.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a24      	ldr	r2, [pc, #144]	@ (800351c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d01d      	beq.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a22      	ldr	r2, [pc, #136]	@ (8003520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d018      	beq.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a21      	ldr	r2, [pc, #132]	@ (8003524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4b17      	ldr	r3, [pc, #92]	@ (8003538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	461a      	mov	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a15      	ldr	r2, [pc, #84]	@ (800353c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80034e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80034ea:	e009      	b.n	8003500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80034fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	2201      	movs	r2, #1
 8003506:	409a      	lsls	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	58025408 	.word	0x58025408
 800351c:	5802541c 	.word	0x5802541c
 8003520:	58025430 	.word	0x58025430
 8003524:	58025444 	.word	0x58025444
 8003528:	58025458 	.word	0x58025458
 800352c:	5802546c 	.word	0x5802546c
 8003530:	58025480 	.word	0x58025480
 8003534:	58025494 	.word	0x58025494
 8003538:	1600963f 	.word	0x1600963f
 800353c:	58025940 	.word	0x58025940
 8003540:	1000823f 	.word	0x1000823f
 8003544:	40020940 	.word	0x40020940

08003548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003556:	4b89      	ldr	r3, [pc, #548]	@ (800377c <HAL_GPIO_Init+0x234>)
 8003558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800355a:	e194      	b.n	8003886 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8186 	beq.w	8003880 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d005      	beq.n	800358c <HAL_GPIO_Init+0x44>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d130      	bne.n	80035ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	2203      	movs	r2, #3
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035c2:	2201      	movs	r2, #1
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	f003 0201 	and.w	r2, r3, #1
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d017      	beq.n	800362a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d123      	bne.n	800367e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	08da      	lsrs	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3208      	adds	r2, #8
 800363e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	220f      	movs	r2, #15
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	08da      	lsrs	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80e0 	beq.w	8003880 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003780 <HAL_GPIO_Init+0x238>)
 80036c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003780 <HAL_GPIO_Init+0x238>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_GPIO_Init+0x238>)
 80036d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036de:	4a29      	ldr	r2, [pc, #164]	@ (8003784 <HAL_GPIO_Init+0x23c>)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	3302      	adds	r3, #2
 80036e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	220f      	movs	r2, #15
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a20      	ldr	r2, [pc, #128]	@ (8003788 <HAL_GPIO_Init+0x240>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d052      	beq.n	80037b0 <HAL_GPIO_Init+0x268>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1f      	ldr	r2, [pc, #124]	@ (800378c <HAL_GPIO_Init+0x244>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d031      	beq.n	8003776 <HAL_GPIO_Init+0x22e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1e      	ldr	r2, [pc, #120]	@ (8003790 <HAL_GPIO_Init+0x248>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02b      	beq.n	8003772 <HAL_GPIO_Init+0x22a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1d      	ldr	r2, [pc, #116]	@ (8003794 <HAL_GPIO_Init+0x24c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d025      	beq.n	800376e <HAL_GPIO_Init+0x226>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <HAL_GPIO_Init+0x250>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01f      	beq.n	800376a <HAL_GPIO_Init+0x222>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <HAL_GPIO_Init+0x254>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d019      	beq.n	8003766 <HAL_GPIO_Init+0x21e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1a      	ldr	r2, [pc, #104]	@ (80037a0 <HAL_GPIO_Init+0x258>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_GPIO_Init+0x21a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <HAL_GPIO_Init+0x25c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00d      	beq.n	800375e <HAL_GPIO_Init+0x216>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <HAL_GPIO_Init+0x260>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <HAL_GPIO_Init+0x212>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <HAL_GPIO_Init+0x264>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <HAL_GPIO_Init+0x20e>
 8003752:	2309      	movs	r3, #9
 8003754:	e02d      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 8003756:	230a      	movs	r3, #10
 8003758:	e02b      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 800375a:	2308      	movs	r3, #8
 800375c:	e029      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 800375e:	2307      	movs	r3, #7
 8003760:	e027      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 8003762:	2306      	movs	r3, #6
 8003764:	e025      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 8003766:	2305      	movs	r3, #5
 8003768:	e023      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 800376a:	2304      	movs	r3, #4
 800376c:	e021      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 800376e:	2303      	movs	r3, #3
 8003770:	e01f      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 8003772:	2302      	movs	r3, #2
 8003774:	e01d      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 8003776:	2301      	movs	r3, #1
 8003778:	e01b      	b.n	80037b2 <HAL_GPIO_Init+0x26a>
 800377a:	bf00      	nop
 800377c:	58000080 	.word	0x58000080
 8003780:	58024400 	.word	0x58024400
 8003784:	58000400 	.word	0x58000400
 8003788:	58020000 	.word	0x58020000
 800378c:	58020400 	.word	0x58020400
 8003790:	58020800 	.word	0x58020800
 8003794:	58020c00 	.word	0x58020c00
 8003798:	58021000 	.word	0x58021000
 800379c:	58021400 	.word	0x58021400
 80037a0:	58021800 	.word	0x58021800
 80037a4:	58021c00 	.word	0x58021c00
 80037a8:	58022000 	.word	0x58022000
 80037ac:	58022400 	.word	0x58022400
 80037b0:	2300      	movs	r3, #0
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	f002 0203 	and.w	r2, r2, #3
 80037b8:	0092      	lsls	r2, r2, #2
 80037ba:	4093      	lsls	r3, r2
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c2:	4938      	ldr	r1, [pc, #224]	@ (80038a4 <HAL_GPIO_Init+0x35c>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3301      	adds	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f ae63 	bne.w	800355c <HAL_GPIO_Init+0x14>
  }
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	3724      	adds	r7, #36	@ 0x24
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	58000400 	.word	0x58000400

080038a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
 80038b4:	4613      	mov	r3, r2
 80038b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038c4:	e003      	b.n	80038ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	041a      	lsls	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	619a      	str	r2, [r3, #24]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e10d      	b.n	8003b0a <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd f89e 	bl	8000a44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d008      	beq.n	8003950 <HAL_I2S_Init+0x74>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d004      	beq.n	8003950 <HAL_I2S_Init+0x74>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b0a      	cmp	r3, #10
 800394c:	f040 8087 	bne.w	8003a5e <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d05a      	beq.n	8003a0e <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003960:	2302      	movs	r3, #2
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e001      	b.n	800396a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003966:	2301      	movs	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b30      	cmp	r3, #48	@ 0x30
 8003970:	d003      	beq.n	800397a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003976:	2bb0      	cmp	r3, #176	@ 0xb0
 8003978:	d102      	bne.n	8003980 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800397a:	2301      	movs	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	e001      	b.n	8003984 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003984:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	f002 fbf4 	bl	8006178 <HAL_RCCEx_GetPeriphCLKFreq>
 8003990:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800399a:	d113      	bne.n	80039c4 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800399c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	3305      	adds	r3, #5
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e014      	b.n	80039ee <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80039c4:	2220      	movs	r2, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	3305      	adds	r3, #5
 80039ec:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4a48      	ldr	r2, [pc, #288]	@ (8003b14 <HAL_I2S_Init+0x238>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e003      	b.n	8003a16 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <HAL_I2S_Init+0x146>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d002      	beq.n	8003a28 <HAL_I2S_Init+0x14c>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2bff      	cmp	r3, #255	@ 0xff
 8003a26:	d907      	bls.n	8003a38 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e068      	b.n	8003b0a <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a48:	4b33      	ldr	r3, [pc, #204]	@ (8003b18 <HAL_I2S_Init+0x23c>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	0411      	lsls	r1, r2, #16
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0612      	lsls	r2, r2, #24
 8003a54:	4311      	orrs	r1, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a64:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <HAL_I2S_Init+0x240>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6851      	ldr	r1, [r2, #4]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6892      	ldr	r2, [r2, #8]
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6992      	ldr	r2, [r2, #24]
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6a12      	ldr	r2, [r2, #32]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6912      	ldr	r2, [r2, #16]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8003aa4:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ab4:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d007      	beq.n	8003ae4 <HAL_I2S_Init+0x208>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b06      	cmp	r3, #6
 8003ada:	d003      	beq.n	8003ae4 <HAL_I2S_Init+0x208>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b0a      	cmp	r3, #10
 8003ae2:	d10a      	bne.n	8003afa <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	cccccccd 	.word	0xcccccccd
 8003b18:	fe00ffff 	.word	0xfe00ffff
 8003b1c:	fdff9040 	.word	0xfdff9040

08003b20 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_I2S_Receive_DMA+0x1e>
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e086      	b.n	8003c50 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e07e      	b.n	8003c50 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2S_Receive_DMA+0x42>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e076      	b.n	8003c50 <HAL_I2S_Receive_DMA+0x130>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <HAL_I2S_Receive_DMA+0x138>)
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c5c <HAL_I2S_Receive_DMA+0x13c>)
 8003baa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c60 <HAL_I2S_Receive_DMA+0x140>)
 8003bb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3330      	adds	r3, #48	@ 0x30
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc4:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003bca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003bcc:	f7fd ff40 	bl	8001a50 <HAL_DMA_Start_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d011      	beq.n	8003bfa <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bda:	f043 0208 	orr.w	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	e02a      	b.n	8003c50 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c44:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	08003cbb 	.word	0x08003cbb
 8003c5c:	08003c79 	.word	0x08003c79
 8003c60:	08003cd7 	.word	0x08003cd7

08003c64 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c9c:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7fc fe83 	bl	80009b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7fc fe4d 	bl	8000968 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003cf2:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	f043 0208 	orr.w	r2, r3, #8
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff ffa5 	bl	8003c64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_PWREx_ConfigSupply+0x70>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00a      	beq.n	8003d4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d38:	4b16      	ldr	r3, [pc, #88]	@ (8003d94 <HAL_PWREx_ConfigSupply+0x70>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d001      	beq.n	8003d4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e01f      	b.n	8003d8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e01d      	b.n	8003d8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d4e:	4b11      	ldr	r3, [pc, #68]	@ (8003d94 <HAL_PWREx_ConfigSupply+0x70>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f023 0207 	bic.w	r2, r3, #7
 8003d56:	490f      	ldr	r1, [pc, #60]	@ (8003d94 <HAL_PWREx_ConfigSupply+0x70>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d5e:	f7fd f9f3 	bl	8001148 <HAL_GetTick>
 8003d62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d64:	e009      	b.n	8003d7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d66:	f7fd f9ef 	bl	8001148 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d74:	d901      	bls.n	8003d7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e007      	b.n	8003d8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_PWREx_ConfigSupply+0x70>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d86:	d1ee      	bne.n	8003d66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	58024800 	.word	0x58024800

08003d98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	@ 0x30
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f000 bc48 	b.w	800463c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8088 	beq.w	8003eca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dba:	4b99      	ldr	r3, [pc, #612]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dc4:	4b96      	ldr	r3, [pc, #600]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d007      	beq.n	8003de0 <HAL_RCC_OscConfig+0x48>
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	2b18      	cmp	r3, #24
 8003dd4:	d111      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62>
 8003dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b8f      	ldr	r3, [pc, #572]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d06d      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x130>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d169      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f000 bc21 	b.w	800463c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x7a>
 8003e04:	4b86      	ldr	r3, [pc, #536]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a85      	ldr	r2, [pc, #532]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e02e      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x9c>
 8003e1a:	4b81      	ldr	r3, [pc, #516]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a80      	ldr	r2, [pc, #512]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b7e      	ldr	r3, [pc, #504]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0xc0>
 8003e3e:	4b78      	ldr	r3, [pc, #480]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a77      	ldr	r2, [pc, #476]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b75      	ldr	r3, [pc, #468]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a74      	ldr	r2, [pc, #464]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e58:	4b71      	ldr	r3, [pc, #452]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a70      	ldr	r2, [pc, #448]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b6e      	ldr	r3, [pc, #440]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6d      	ldr	r2, [pc, #436]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fd f966 	bl	8001148 <HAL_GetTick>
 8003e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fd f962 	bl	8001148 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	@ 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e3d4      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e92:	4b63      	ldr	r3, [pc, #396]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe8>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd f952 	bl	8001148 <HAL_GetTick>
 8003ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd f94e 	bl	8001148 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e3c0      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eba:	4b59      	ldr	r3, [pc, #356]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x110>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80ca 	beq.w	800406c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed8:	4b51      	ldr	r3, [pc, #324]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ee0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_RCC_OscConfig+0x166>
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	2b18      	cmp	r3, #24
 8003ef2:	d156      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x20a>
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d151      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003efe:	4b48      	ldr	r3, [pc, #288]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x17e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e392      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f16:	4b42      	ldr	r3, [pc, #264]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 0219 	bic.w	r2, r3, #25
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	493f      	ldr	r1, [pc, #252]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd f90e 	bl	8001148 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fd f90a 	bl	8001148 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e37c      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f42:	4b37      	ldr	r3, [pc, #220]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	f7fd f907 	bl	8001160 <HAL_GetREVID>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d817      	bhi.n	8003f8c <HAL_RCC_OscConfig+0x1f4>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b40      	cmp	r3, #64	@ 0x40
 8003f62:	d108      	bne.n	8003f76 <HAL_RCC_OscConfig+0x1de>
 8003f64:	4b2e      	ldr	r3, [pc, #184]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f74:	e07a      	b.n	800406c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b2a      	ldr	r3, [pc, #168]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	4926      	ldr	r1, [pc, #152]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f8a:	e06f      	b.n	800406c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8c:	4b24      	ldr	r3, [pc, #144]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	4921      	ldr	r1, [pc, #132]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa0:	e064      	b.n	800406c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d047      	beq.n	800403a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003faa:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 0219 	bic.w	r2, r3, #25
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	491a      	ldr	r1, [pc, #104]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fd f8c4 	bl	8001148 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc4:	f7fd f8c0 	bl	8001148 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e332      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe2:	f7fd f8bd 	bl	8001160 <HAL_GetREVID>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d819      	bhi.n	8004024 <HAL_RCC_OscConfig+0x28c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b40      	cmp	r3, #64	@ 0x40
 8003ff6:	d108      	bne.n	800400a <HAL_RCC_OscConfig+0x272>
 8003ff8:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004000:	4a07      	ldr	r2, [pc, #28]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 8004002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004006:	6053      	str	r3, [r2, #4]
 8004008:	e030      	b.n	800406c <HAL_RCC_OscConfig+0x2d4>
 800400a:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	031b      	lsls	r3, r3, #12
 8004018:	4901      	ldr	r1, [pc, #4]	@ (8004020 <HAL_RCC_OscConfig+0x288>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
 800401e:	e025      	b.n	800406c <HAL_RCC_OscConfig+0x2d4>
 8004020:	58024400 	.word	0x58024400
 8004024:	4b9a      	ldr	r3, [pc, #616]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	4997      	ldr	r1, [pc, #604]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
 8004038:	e018      	b.n	800406c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403a:	4b95      	ldr	r3, [pc, #596]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a94      	ldr	r2, [pc, #592]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd f87f 	bl	8001148 <HAL_GetTick>
 800404a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7fd f87b 	bl	8001148 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e2ed      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004060:	4b8b      	ldr	r3, [pc, #556]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f0      	bne.n	800404e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a9 	beq.w	80041cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407a:	4b85      	ldr	r3, [pc, #532]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004082:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004084:	4b82      	ldr	r3, [pc, #520]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d007      	beq.n	80040a0 <HAL_RCC_OscConfig+0x308>
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b18      	cmp	r3, #24
 8004094:	d13a      	bne.n	800410c <HAL_RCC_OscConfig+0x374>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d135      	bne.n	800410c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_OscConfig+0x320>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b80      	cmp	r3, #128	@ 0x80
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e2c1      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040b8:	f7fd f852 	bl	8001160 <HAL_GetREVID>
 80040bc:	4603      	mov	r3, r0
 80040be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d817      	bhi.n	80040f6 <HAL_RCC_OscConfig+0x35e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d108      	bne.n	80040e0 <HAL_RCC_OscConfig+0x348>
 80040ce:	4b70      	ldr	r3, [pc, #448]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80040d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040de:	e075      	b.n	80041cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	069b      	lsls	r3, r3, #26
 80040ee:	4968      	ldr	r1, [pc, #416]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040f4:	e06a      	b.n	80041cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040f6:	4b66      	ldr	r3, [pc, #408]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	061b      	lsls	r3, r3, #24
 8004104:	4962      	ldr	r1, [pc, #392]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800410a:	e05f      	b.n	80041cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d042      	beq.n	800419a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004114:	4b5e      	ldr	r3, [pc, #376]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5d      	ldr	r2, [pc, #372]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800411a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd f812 	bl	8001148 <HAL_GetTick>
 8004124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004128:	f7fd f80e 	bl	8001148 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e280      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800413a:	4b55      	ldr	r3, [pc, #340]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004146:	f7fd f80b 	bl	8001160 <HAL_GetREVID>
 800414a:	4603      	mov	r3, r0
 800414c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004150:	4293      	cmp	r3, r2
 8004152:	d817      	bhi.n	8004184 <HAL_RCC_OscConfig+0x3ec>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	2b20      	cmp	r3, #32
 800415a:	d108      	bne.n	800416e <HAL_RCC_OscConfig+0x3d6>
 800415c:	4b4c      	ldr	r3, [pc, #304]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004164:	4a4a      	ldr	r2, [pc, #296]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800416a:	6053      	str	r3, [r2, #4]
 800416c:	e02e      	b.n	80041cc <HAL_RCC_OscConfig+0x434>
 800416e:	4b48      	ldr	r3, [pc, #288]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	069b      	lsls	r3, r3, #26
 800417c:	4944      	ldr	r1, [pc, #272]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
 8004182:	e023      	b.n	80041cc <HAL_RCC_OscConfig+0x434>
 8004184:	4b42      	ldr	r3, [pc, #264]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	493f      	ldr	r1, [pc, #252]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004194:	4313      	orrs	r3, r2
 8004196:	60cb      	str	r3, [r1, #12]
 8004198:	e018      	b.n	80041cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800419a:	4b3d      	ldr	r3, [pc, #244]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3c      	ldr	r2, [pc, #240]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80041a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fc ffcf 	bl	8001148 <HAL_GetTick>
 80041aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041ae:	f7fc ffcb 	bl	8001148 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e23d      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041c0:	4b33      	ldr	r3, [pc, #204]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d036      	beq.n	8004246 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d019      	beq.n	8004214 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80041e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fc ffac 	bl	8001148 <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fc ffa8 	bl	8001148 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e21a      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004206:	4b22      	ldr	r3, [pc, #136]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x45c>
 8004212:	e018      	b.n	8004246 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004214:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004218:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fc ff92 	bl	8001148 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004228:	f7fc ff8e 	bl	8001148 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e200      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800423a:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800423c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d039      	beq.n	80042c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01c      	beq.n	8004294 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a0c      	ldr	r2, [pc, #48]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004260:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004264:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004266:	f7fc ff6f 	bl	8001148 <HAL_GetTick>
 800426a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426e:	f7fc ff6b 	bl	8001148 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e1dd      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_RCC_OscConfig+0x4f8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x4d6>
 800428c:	e01b      	b.n	80042c6 <HAL_RCC_OscConfig+0x52e>
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004294:	4b9b      	ldr	r3, [pc, #620]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a9a      	ldr	r2, [pc, #616]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 800429a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800429e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042a0:	f7fc ff52 	bl	8001148 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a8:	f7fc ff4e 	bl	8001148 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1c0      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042ba:	4b92      	ldr	r3, [pc, #584]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8081 	beq.w	80043d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004508 <HAL_RCC_OscConfig+0x770>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a8b      	ldr	r2, [pc, #556]	@ (8004508 <HAL_RCC_OscConfig+0x770>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e0:	f7fc ff32 	bl	8001148 <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fc ff2e 	bl	8001148 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1a0      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042fa:	4b83      	ldr	r3, [pc, #524]	@ (8004508 <HAL_RCC_OscConfig+0x770>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x584>
 800430e:	4b7d      	ldr	r3, [pc, #500]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004312:	4a7c      	ldr	r2, [pc, #496]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6713      	str	r3, [r2, #112]	@ 0x70
 800431a:	e02d      	b.n	8004378 <HAL_RCC_OscConfig+0x5e0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10c      	bne.n	800433e <HAL_RCC_OscConfig+0x5a6>
 8004324:	4b77      	ldr	r3, [pc, #476]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	4a76      	ldr	r2, [pc, #472]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004330:	4b74      	ldr	r3, [pc, #464]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	4a73      	ldr	r2, [pc, #460]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004336:	f023 0304 	bic.w	r3, r3, #4
 800433a:	6713      	str	r3, [r2, #112]	@ 0x70
 800433c:	e01c      	b.n	8004378 <HAL_RCC_OscConfig+0x5e0>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b05      	cmp	r3, #5
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0x5c8>
 8004346:	4b6f      	ldr	r3, [pc, #444]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	4a6e      	ldr	r2, [pc, #440]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	6713      	str	r3, [r2, #112]	@ 0x70
 8004352:	4b6c      	ldr	r3, [pc, #432]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	4a6b      	ldr	r2, [pc, #428]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6713      	str	r3, [r2, #112]	@ 0x70
 800435e:	e00b      	b.n	8004378 <HAL_RCC_OscConfig+0x5e0>
 8004360:	4b68      	ldr	r3, [pc, #416]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004364:	4a67      	ldr	r2, [pc, #412]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	6713      	str	r3, [r2, #112]	@ 0x70
 800436c:	4b65      	ldr	r3, [pc, #404]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	4a64      	ldr	r2, [pc, #400]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004372:	f023 0304 	bic.w	r3, r3, #4
 8004376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fc fee2 	bl	8001148 <HAL_GetTick>
 8004384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004386:	e00a      	b.n	800439e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fc fede 	bl	8001148 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e14e      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800439e:	4b59      	ldr	r3, [pc, #356]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ee      	beq.n	8004388 <HAL_RCC_OscConfig+0x5f0>
 80043aa:	e014      	b.n	80043d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fc fecc 	bl	8001148 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fc fec8 	bl	8001148 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e138      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ee      	bne.n	80043b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 812d 	beq.w	800463a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043e0:	4b48      	ldr	r3, [pc, #288]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043e8:	2b18      	cmp	r3, #24
 80043ea:	f000 80bd 	beq.w	8004568 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	f040 809e 	bne.w	8004534 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f8:	4b42      	ldr	r3, [pc, #264]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a41      	ldr	r2, [pc, #260]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80043fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fc fea0 	bl	8001148 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fc fe9c 	bl	8001148 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e10e      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800441e:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800442a:	4b36      	ldr	r3, [pc, #216]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 800442c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800442e:	4b37      	ldr	r3, [pc, #220]	@ (800450c <HAL_RCC_OscConfig+0x774>)
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	430a      	orrs	r2, r1
 800443e:	4931      	ldr	r1, [pc, #196]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	628b      	str	r3, [r1, #40]	@ 0x28
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	3b01      	subs	r3, #1
 800444a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004452:	3b01      	subs	r3, #1
 8004454:	025b      	lsls	r3, r3, #9
 8004456:	b29b      	uxth	r3, r3
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	3b01      	subs	r3, #1
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	3b01      	subs	r3, #1
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004474:	4923      	ldr	r1, [pc, #140]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800447a:	4b22      	ldr	r3, [pc, #136]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	4a21      	ldr	r2, [pc, #132]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004486:	4b1f      	ldr	r3, [pc, #124]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800448a:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004492:	00d2      	lsls	r2, r2, #3
 8004494:	491b      	ldr	r1, [pc, #108]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800449a:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 800449c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449e:	f023 020c 	bic.w	r2, r3, #12
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	4917      	ldr	r1, [pc, #92]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	f023 0202 	bic.w	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	4912      	ldr	r1, [pc, #72]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044be:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	4a10      	ldr	r2, [pc, #64]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80044e2:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	4a07      	ldr	r2, [pc, #28]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ee:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a04      	ldr	r2, [pc, #16]	@ (8004504 <HAL_RCC_OscConfig+0x76c>)
 80044f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fc fe25 	bl	8001148 <HAL_GetTick>
 80044fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004500:	e011      	b.n	8004526 <HAL_RCC_OscConfig+0x78e>
 8004502:	bf00      	nop
 8004504:	58024400 	.word	0x58024400
 8004508:	58024800 	.word	0x58024800
 800450c:	fffffc0c 	.word	0xfffffc0c
 8004510:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fc fe18 	bl	8001148 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e08a      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004526:	4b47      	ldr	r3, [pc, #284]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x77c>
 8004532:	e082      	b.n	800463a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004534:	4b43      	ldr	r3, [pc, #268]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 800453a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fc fe02 	bl	8001148 <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004548:	f7fc fdfe 	bl	8001148 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e070      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800455a:	4b3a      	ldr	r3, [pc, #232]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x7b0>
 8004566:	e068      	b.n	800463a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004568:	4b36      	ldr	r3, [pc, #216]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800456e:	4b35      	ldr	r3, [pc, #212]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	2b01      	cmp	r3, #1
 800457a:	d031      	beq.n	80045e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f003 0203 	and.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d12a      	bne.n	80045e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d122      	bne.n	80045e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d11a      	bne.n	80045e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	0a5b      	lsrs	r3, r3, #9
 80045ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d111      	bne.n	80045e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e02b      	b.n	800463c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80045e4:	4b17      	ldr	r3, [pc, #92]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 80045e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e8:	08db      	lsrs	r3, r3, #3
 80045ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d01f      	beq.n	800463a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80045fa:	4b12      	ldr	r3, [pc, #72]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	4a11      	ldr	r2, [pc, #68]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004606:	f7fc fd9f 	bl	8001148 <HAL_GetTick>
 800460a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800460c:	bf00      	nop
 800460e:	f7fc fd9b 	bl	8001148 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	4293      	cmp	r3, r2
 8004618:	d0f9      	beq.n	800460e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800461a:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 800461c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800461e:	4b0a      	ldr	r3, [pc, #40]	@ (8004648 <HAL_RCC_OscConfig+0x8b0>)
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004626:	00d2      	lsls	r2, r2, #3
 8004628:	4906      	ldr	r1, [pc, #24]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 800462a:	4313      	orrs	r3, r2
 800462c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800462e:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	4a04      	ldr	r2, [pc, #16]	@ (8004644 <HAL_RCC_OscConfig+0x8ac>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3730      	adds	r7, #48	@ 0x30
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	58024400 	.word	0x58024400
 8004648:	ffff0007 	.word	0xffff0007

0800464c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e19c      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b8a      	ldr	r3, [pc, #552]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d910      	bls.n	8004690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b87      	ldr	r3, [pc, #540]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 020f 	bic.w	r2, r3, #15
 8004676:	4985      	ldr	r1, [pc, #532]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b83      	ldr	r3, [pc, #524]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e184      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d908      	bls.n	80046be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046ac:	4b78      	ldr	r3, [pc, #480]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	4975      	ldr	r1, [pc, #468]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d010      	beq.n	80046ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	4b70      	ldr	r3, [pc, #448]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d908      	bls.n	80046ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046da:	4b6d      	ldr	r3, [pc, #436]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	496a      	ldr	r1, [pc, #424]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d010      	beq.n	800471a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	4b64      	ldr	r3, [pc, #400]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004704:	429a      	cmp	r2, r3
 8004706:	d908      	bls.n	800471a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004708:	4b61      	ldr	r3, [pc, #388]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	495e      	ldr	r1, [pc, #376]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004716:	4313      	orrs	r3, r2
 8004718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d010      	beq.n	8004748 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	4b59      	ldr	r3, [pc, #356]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004732:	429a      	cmp	r2, r3
 8004734:	d908      	bls.n	8004748 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004736:	4b56      	ldr	r3, [pc, #344]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	4953      	ldr	r1, [pc, #332]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004744:	4313      	orrs	r3, r2
 8004746:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	4b4d      	ldr	r3, [pc, #308]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	429a      	cmp	r2, r3
 8004762:	d908      	bls.n	8004776 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b4a      	ldr	r3, [pc, #296]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f023 020f 	bic.w	r2, r3, #15
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4947      	ldr	r1, [pc, #284]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004772:	4313      	orrs	r3, r2
 8004774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d055      	beq.n	800482e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004782:	4b43      	ldr	r3, [pc, #268]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4940      	ldr	r1, [pc, #256]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004790:	4313      	orrs	r3, r2
 8004792:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d107      	bne.n	80047ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800479c:	4b3c      	ldr	r3, [pc, #240]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d121      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0f6      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047b4:	4b36      	ldr	r3, [pc, #216]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d115      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0ea      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047cc:	4b30      	ldr	r3, [pc, #192]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0de      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0d6      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ec:	4b28      	ldr	r3, [pc, #160]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f023 0207 	bic.w	r2, r3, #7
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4925      	ldr	r1, [pc, #148]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fe:	f7fc fca3 	bl	8001148 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004804:	e00a      	b.n	800481c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004806:	f7fc fc9f 	bl	8001148 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e0be      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481c:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	429a      	cmp	r2, r3
 800482c:	d1eb      	bne.n	8004806 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d010      	beq.n	800485c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	4b14      	ldr	r3, [pc, #80]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	429a      	cmp	r2, r3
 8004848:	d208      	bcs.n	800485c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484a:	4b11      	ldr	r3, [pc, #68]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f023 020f 	bic.w	r2, r3, #15
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	490e      	ldr	r1, [pc, #56]	@ (8004890 <HAL_RCC_ClockConfig+0x244>)
 8004858:	4313      	orrs	r3, r2
 800485a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d214      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b08      	ldr	r3, [pc, #32]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 020f 	bic.w	r2, r3, #15
 8004872:	4906      	ldr	r1, [pc, #24]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b04      	ldr	r3, [pc, #16]	@ (800488c <HAL_RCC_ClockConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e086      	b.n	800499a <HAL_RCC_ClockConfig+0x34e>
 800488c:	52002000 	.word	0x52002000
 8004890:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d010      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	4b3f      	ldr	r3, [pc, #252]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d208      	bcs.n	80048c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048b0:	4b3c      	ldr	r3, [pc, #240]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	4939      	ldr	r1, [pc, #228]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d010      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	4b34      	ldr	r3, [pc, #208]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048da:	429a      	cmp	r2, r3
 80048dc:	d208      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048de:	4b31      	ldr	r3, [pc, #196]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	492e      	ldr	r1, [pc, #184]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d010      	beq.n	800491e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699a      	ldr	r2, [r3, #24]
 8004900:	4b28      	ldr	r3, [pc, #160]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004908:	429a      	cmp	r2, r3
 800490a:	d208      	bcs.n	800491e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800490c:	4b25      	ldr	r3, [pc, #148]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	4922      	ldr	r1, [pc, #136]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 800491a:	4313      	orrs	r3, r2
 800491c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d010      	beq.n	800494c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004936:	429a      	cmp	r2, r3
 8004938:	d208      	bcs.n	800494c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800493a:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	4917      	ldr	r1, [pc, #92]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 8004948:	4313      	orrs	r3, r2
 800494a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800494c:	f000 f834 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	4912      	ldr	r1, [pc, #72]	@ (80049a8 <HAL_RCC_ClockConfig+0x35c>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
 8004968:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800496a:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <HAL_RCC_ClockConfig+0x358>)
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	4a0d      	ldr	r2, [pc, #52]	@ (80049a8 <HAL_RCC_ClockConfig+0x35c>)
 8004974:	5cd3      	ldrb	r3, [r2, r3]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	4a0a      	ldr	r2, [pc, #40]	@ (80049ac <HAL_RCC_ClockConfig+0x360>)
 8004982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004984:	4a0a      	ldr	r2, [pc, #40]	@ (80049b0 <HAL_RCC_ClockConfig+0x364>)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800498a:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <HAL_RCC_ClockConfig+0x368>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fc fb90 	bl	80010b4 <HAL_InitTick>
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	08008794 	.word	0x08008794
 80049ac:	24000004 	.word	0x24000004
 80049b0:	24000000 	.word	0x24000000
 80049b4:	24000018 	.word	0x24000018

080049b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	@ 0x24
 80049bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049be:	4bb3      	ldr	r3, [pc, #716]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049c6:	2b18      	cmp	r3, #24
 80049c8:	f200 8155 	bhi.w	8004c76 <HAL_RCC_GetSysClockFreq+0x2be>
 80049cc:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004c77 	.word	0x08004c77
 80049dc:	08004c77 	.word	0x08004c77
 80049e0:	08004c77 	.word	0x08004c77
 80049e4:	08004c77 	.word	0x08004c77
 80049e8:	08004c77 	.word	0x08004c77
 80049ec:	08004c77 	.word	0x08004c77
 80049f0:	08004c77 	.word	0x08004c77
 80049f4:	08004a5f 	.word	0x08004a5f
 80049f8:	08004c77 	.word	0x08004c77
 80049fc:	08004c77 	.word	0x08004c77
 8004a00:	08004c77 	.word	0x08004c77
 8004a04:	08004c77 	.word	0x08004c77
 8004a08:	08004c77 	.word	0x08004c77
 8004a0c:	08004c77 	.word	0x08004c77
 8004a10:	08004c77 	.word	0x08004c77
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004c77 	.word	0x08004c77
 8004a1c:	08004c77 	.word	0x08004c77
 8004a20:	08004c77 	.word	0x08004c77
 8004a24:	08004c77 	.word	0x08004c77
 8004a28:	08004c77 	.word	0x08004c77
 8004a2c:	08004c77 	.word	0x08004c77
 8004a30:	08004c77 	.word	0x08004c77
 8004a34:	08004a6b 	.word	0x08004a6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a38:	4b94      	ldr	r3, [pc, #592]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a44:	4b91      	ldr	r3, [pc, #580]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	4a90      	ldr	r2, [pc, #576]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a56:	e111      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a58:	4b8d      	ldr	r3, [pc, #564]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a5a:	61bb      	str	r3, [r7, #24]
      break;
 8004a5c:	e10e      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a60:	61bb      	str	r3, [r7, #24]
      break;
 8004a62:	e10b      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a64:	4b8c      	ldr	r3, [pc, #560]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a66:	61bb      	str	r3, [r7, #24]
      break;
 8004a68:	e108      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a6a:	4b88      	ldr	r3, [pc, #544]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a74:	4b85      	ldr	r3, [pc, #532]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a80:	4b82      	ldr	r3, [pc, #520]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a8a:	4b80      	ldr	r3, [pc, #512]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8e:	08db      	lsrs	r3, r3, #3
 8004a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80e1 	beq.w	8004c70 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f000 8083 	beq.w	8004bbc <HAL_RCC_GetSysClockFreq+0x204>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f200 80a1 	bhi.w	8004c00 <HAL_RCC_GetSysClockFreq+0x248>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x114>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d056      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004aca:	e099      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004acc:	4b6f      	ldr	r3, [pc, #444]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02d      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	08db      	lsrs	r3, r3, #3
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	4a6b      	ldr	r2, [pc, #428]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b62      	ldr	r3, [pc, #392]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b32:	e087      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004ca0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b51      	ldr	r3, [pc, #324]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b76:	e065      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	4b40      	ldr	r3, [pc, #256]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bba:	e043      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004ca8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b2f      	ldr	r3, [pc, #188]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004be2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bfe:	e021      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c44:	4b11      	ldr	r3, [pc, #68]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c4e:	3301      	adds	r3, #1
 8004c50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	ee07 3a90 	vmov	s15, r3
 8004c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c68:	ee17 3a90 	vmov	r3, s15
 8004c6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c6e:	e005      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]
      break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c76:	4b07      	ldr	r3, [pc, #28]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c78:	61bb      	str	r3, [r7, #24]
      break;
 8004c7a:	bf00      	nop
  }

  return sysclockfreq;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	03d09000 	.word	0x03d09000
 8004c94:	003d0900 	.word	0x003d0900
 8004c98:	007a1200 	.word	0x007a1200
 8004c9c:	46000000 	.word	0x46000000
 8004ca0:	4c742400 	.word	0x4c742400
 8004ca4:	4a742400 	.word	0x4a742400
 8004ca8:	4af42400 	.word	0x4af42400

08004cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cb2:	f7ff fe81 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	4b10      	ldr	r3, [pc, #64]	@ (8004cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	490f      	ldr	r1, [pc, #60]	@ (8004d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cc4:	5ccb      	ldrb	r3, [r1, r3]
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	4a09      	ldr	r2, [pc, #36]	@ (8004d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cda:	5cd3      	ldrb	r3, [r2, r3]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a07      	ldr	r2, [pc, #28]	@ (8004d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ce8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cea:	4a07      	ldr	r2, [pc, #28]	@ (8004d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	08008794 	.word	0x08008794
 8004d04:	24000004 	.word	0x24000004
 8004d08:	24000000 	.word	0x24000000

08004d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d10:	f7ff ffcc 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4904      	ldr	r1, [pc, #16]	@ (8004d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	58024400 	.word	0x58024400
 8004d34:	08008794 	.word	0x08008794

08004d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d3c:	f7ff ffb6 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4904      	ldr	r1, [pc, #16]	@ (8004d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	08008794 	.word	0x08008794

08004d64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d68:	b0ca      	sub	sp, #296	@ 0x128
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d76:	2300      	movs	r3, #0
 8004d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d88:	2500      	movs	r5, #0
 8004d8a:	ea54 0305 	orrs.w	r3, r4, r5
 8004d8e:	d049      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d9a:	d02f      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004da0:	d828      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004da6:	d01a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dac:	d822      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004db6:	d007      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004db8:	e01c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dba:	4bb8      	ldr	r3, [pc, #736]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	4ab7      	ldr	r2, [pc, #732]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dc6:	e01a      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dcc:	3308      	adds	r3, #8
 8004dce:	2102      	movs	r1, #2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f002 fb61 	bl	8007498 <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ddc:	e00f      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	3328      	adds	r3, #40	@ 0x28
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 fc08 	bl	80075fc <RCCEx_PLL3_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004df2:	e004      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e06:	4ba5      	ldr	r3, [pc, #660]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e14:	4aa1      	ldr	r2, [pc, #644]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e16:	430b      	orrs	r3, r1
 8004e18:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e1a:	e003      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e30:	f04f 0900 	mov.w	r9, #0
 8004e34:	ea58 0309 	orrs.w	r3, r8, r9
 8004e38:	d047      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d82a      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e44:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e61 	.word	0x08004e61
 8004e50:	08004e6f 	.word	0x08004e6f
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004ea3 	.word	0x08004ea3
 8004e5c:	08004ea3 	.word	0x08004ea3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e60:	4b8e      	ldr	r3, [pc, #568]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	4a8d      	ldr	r2, [pc, #564]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e6c:	e01a      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e72:	3308      	adds	r3, #8
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f002 fb0e 	bl	8007498 <RCCEx_PLL2_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e82:	e00f      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	3328      	adds	r3, #40	@ 0x28
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f002 fbb5 	bl	80075fc <RCCEx_PLL3_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e98:	e004      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ea0:	e000      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eac:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	f023 0107 	bic.w	r1, r3, #7
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eba:	4a78      	ldr	r2, [pc, #480]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ec0:	e003      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004ed6:	f04f 0b00 	mov.w	fp, #0
 8004eda:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ede:	d04c      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eea:	d030      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef0:	d829      	bhi.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ef4:	d02d      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ef8:	d825      	bhi.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004efa:	2b80      	cmp	r3, #128	@ 0x80
 8004efc:	d018      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004efe:	2b80      	cmp	r3, #128	@ 0x80
 8004f00:	d821      	bhi.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d007      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f0a:	e01c      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0c:	4b63      	ldr	r3, [pc, #396]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	4a62      	ldr	r2, [pc, #392]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f18:	e01c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1e:	3308      	adds	r3, #8
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f002 fab8 	bl	8007498 <RCCEx_PLL2_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f2e:	e011      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f34:	3328      	adds	r3, #40	@ 0x28
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f002 fb5f 	bl	80075fc <RCCEx_PLL3_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f44:	e006      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f4c:	e002      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f4e:	bf00      	nop
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f70:	e003      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004f90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d053      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fa6:	d035      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004fa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fac:	d82e      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fb2:	d031      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004fb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fb8:	d828      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fbe:	d01a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc4:	d822      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fce:	d007      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004fd0:	e01c      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd2:	4b32      	ldr	r3, [pc, #200]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	4a31      	ldr	r2, [pc, #196]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fde:	e01c      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 fa55 	bl	8007498 <RCCEx_PLL2_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ff4:	e011      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	3328      	adds	r3, #40	@ 0x28
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 fafc 	bl	80075fc <RCCEx_PLL3_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800500a:	e006      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005012:	e002      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10b      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005022:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005032:	4a1a      	ldr	r2, [pc, #104]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005034:	430b      	orrs	r3, r1
 8005036:	6593      	str	r3, [r2, #88]	@ 0x58
 8005038:	e003      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800504e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005058:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800505c:	460b      	mov	r3, r1
 800505e:	4313      	orrs	r3, r2
 8005060:	d056      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005066:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800506a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800506e:	d038      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005074:	d831      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005076:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800507a:	d034      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800507c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005080:	d82b      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005082:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005086:	d01d      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800508c:	d825      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d006      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005096:	d00a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005098:	e01f      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a0:	4ba2      	ldr	r3, [pc, #648]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	4aa1      	ldr	r2, [pc, #644]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ac:	e01c      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b2:	3308      	adds	r3, #8
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 f9ee 	bl	8007498 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050c2:	e011      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c8:	3328      	adds	r3, #40	@ 0x28
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 fa95 	bl	80075fc <RCCEx_PLL3_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050e0:	e002      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050f0:	4b8e      	ldr	r3, [pc, #568]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005100:	4a8a      	ldr	r2, [pc, #552]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005102:	430b      	orrs	r3, r1
 8005104:	6593      	str	r3, [r2, #88]	@ 0x58
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800510c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800511c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005126:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d03a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005136:	2b30      	cmp	r3, #48	@ 0x30
 8005138:	d01f      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800513a:	2b30      	cmp	r3, #48	@ 0x30
 800513c:	d819      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800513e:	2b20      	cmp	r3, #32
 8005140:	d00c      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005142:	2b20      	cmp	r3, #32
 8005144:	d815      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d019      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800514a:	2b10      	cmp	r3, #16
 800514c:	d111      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514e:	4b77      	ldr	r3, [pc, #476]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	4a76      	ldr	r2, [pc, #472]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800515a:	e011      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005160:	3308      	adds	r3, #8
 8005162:	2102      	movs	r1, #2
 8005164:	4618      	mov	r0, r3
 8005166:	f002 f997 	bl	8007498 <RCCEx_PLL2_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005170:	e006      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800517e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005188:	4b68      	ldr	r3, [pc, #416]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800518a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800518c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005196:	4a65      	ldr	r2, [pc, #404]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005198:	430b      	orrs	r3, r1
 800519a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800519c:	e003      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80051b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4313      	orrs	r3, r2
 80051c4:	d051      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051d0:	d035      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051d6:	d82e      	bhi.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051dc:	d031      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051e2:	d828      	bhi.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e8:	d01a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80051ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ee:	d822      	bhi.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d007      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80051fa:	e01c      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fc:	4b4b      	ldr	r3, [pc, #300]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	4a4a      	ldr	r2, [pc, #296]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005208:	e01c      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520e:	3308      	adds	r3, #8
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f002 f940 	bl	8007498 <RCCEx_PLL2_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800521e:	e011      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005224:	3328      	adds	r3, #40	@ 0x28
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f002 f9e7 	bl	80075fc <RCCEx_PLL3_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800523c:	e002      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800523e:	bf00      	nop
 8005240:	e000      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800524c:	4b37      	ldr	r3, [pc, #220]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800524e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005250:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525a:	4a34      	ldr	r2, [pc, #208]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800525c:	430b      	orrs	r3, r1
 800525e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005260:	e003      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800527a:	2300      	movs	r3, #0
 800527c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005280:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005284:	460b      	mov	r3, r1
 8005286:	4313      	orrs	r3, r2
 8005288:	d056      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005294:	d033      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005296:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800529a:	d82c      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800529c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052a0:	d02f      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80052a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052a6:	d826      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052ac:	d02b      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80052ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052b2:	d820      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b8:	d012      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80052ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052be:	d81a      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d022      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c8:	d115      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	3308      	adds	r3, #8
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f002 f8e0 	bl	8007498 <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052de:	e015      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	3328      	adds	r3, #40	@ 0x28
 80052e6:	2101      	movs	r1, #1
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 f987 	bl	80075fc <RCCEx_PLL3_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052f4:	e00a      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052fc:	e006      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052fe:	bf00      	nop
 8005300:	e004      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005302:	bf00      	nop
 8005304:	e002      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800530a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005314:	4b05      	ldr	r3, [pc, #20]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005318:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005322:	4a02      	ldr	r2, [pc, #8]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005324:	430b      	orrs	r3, r1
 8005326:	6513      	str	r3, [r2, #80]	@ 0x50
 8005328:	e006      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005348:	2300      	movs	r3, #0
 800534a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800534e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005352:	460b      	mov	r3, r1
 8005354:	4313      	orrs	r3, r2
 8005356:	d055      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005364:	d033      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800536a:	d82c      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005370:	d02f      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005376:	d826      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005378:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800537c:	d02b      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800537e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005382:	d820      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005388:	d012      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800538a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800538e:	d81a      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d022      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005398:	d115      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539e:	3308      	adds	r3, #8
 80053a0:	2101      	movs	r1, #1
 80053a2:	4618      	mov	r0, r3
 80053a4:	f002 f878 	bl	8007498 <RCCEx_PLL2_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053ae:	e015      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b4:	3328      	adds	r3, #40	@ 0x28
 80053b6:	2101      	movs	r1, #1
 80053b8:	4618      	mov	r0, r3
 80053ba:	f002 f91f 	bl	80075fc <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053c4:	e00a      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053cc:	e006      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053ce:	bf00      	nop
 80053d0:	e004      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053d2:	bf00      	nop
 80053d4:	e002      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053e4:	4ba3      	ldr	r3, [pc, #652]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053f4:	4a9f      	ldr	r2, [pc, #636]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f6:	430b      	orrs	r3, r1
 80053f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053fa:	e003      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005414:	2300      	movs	r3, #0
 8005416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800541a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800541e:	460b      	mov	r3, r1
 8005420:	4313      	orrs	r3, r2
 8005422:	d037      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800542e:	d00e      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005434:	d816      	bhi.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d018      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800543e:	d111      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005440:	4b8c      	ldr	r3, [pc, #560]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	4a8b      	ldr	r2, [pc, #556]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800544a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800544c:	e00f      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005452:	3308      	adds	r3, #8
 8005454:	2101      	movs	r1, #1
 8005456:	4618      	mov	r0, r3
 8005458:	f002 f81e 	bl	8007498 <RCCEx_PLL2_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005462:	e004      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800546a:	e000      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800546c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005476:	4b7f      	ldr	r3, [pc, #508]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	4a7b      	ldr	r2, [pc, #492]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005486:	430b      	orrs	r3, r1
 8005488:	6513      	str	r3, [r2, #80]	@ 0x50
 800548a:	e003      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80054a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d039      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d81c      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80054be:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	08005501 	.word	0x08005501
 80054c8:	080054d5 	.word	0x080054d5
 80054cc:	080054e3 	.word	0x080054e3
 80054d0:	08005501 	.word	0x08005501
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d4:	4b67      	ldr	r3, [pc, #412]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	4a66      	ldr	r2, [pc, #408]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054e0:	e00f      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e6:	3308      	adds	r3, #8
 80054e8:	2102      	movs	r1, #2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 ffd4 	bl	8007498 <RCCEx_PLL2_Config>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054f6:	e004      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054fe:	e000      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800550a:	4b5a      	ldr	r3, [pc, #360]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800550c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800550e:	f023 0103 	bic.w	r1, r3, #3
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005518:	4a56      	ldr	r2, [pc, #344]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800551a:	430b      	orrs	r3, r1
 800551c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800551e:	e003      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005538:	2300      	movs	r3, #0
 800553a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800553e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005542:	460b      	mov	r3, r1
 8005544:	4313      	orrs	r3, r2
 8005546:	f000 809f 	beq.w	8005688 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554a:	4b4b      	ldr	r3, [pc, #300]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4a      	ldr	r2, [pc, #296]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005554:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005556:	f7fb fdf7 	bl	8001148 <HAL_GetTick>
 800555a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555e:	e00b      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005560:	f7fb fdf2 	bl	8001148 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b64      	cmp	r3, #100	@ 0x64
 800556e:	d903      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005576:	e005      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005578:	4b3f      	ldr	r3, [pc, #252]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ed      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005588:	2b00      	cmp	r3, #0
 800558a:	d179      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800558c:	4b39      	ldr	r3, [pc, #228]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800558e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005594:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005598:	4053      	eors	r3, r2
 800559a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d015      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055a2:	4b34      	ldr	r3, [pc, #208]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ae:	4b31      	ldr	r3, [pc, #196]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b2:	4a30      	ldr	r2, [pc, #192]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	4a2d      	ldr	r2, [pc, #180]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055da:	d118      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fb fdb4 	bl	8001148 <HAL_GetTick>
 80055e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055e4:	e00d      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e6:	f7fb fdaf 	bl	8001148 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d903      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005600:	e005      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005602:	4b1c      	ldr	r3, [pc, #112]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0eb      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005612:	2b00      	cmp	r3, #0
 8005614:	d129      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800561e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005626:	d10e      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005628:	4b12      	ldr	r3, [pc, #72]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005638:	091a      	lsrs	r2, r3, #4
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800563c:	4013      	ands	r3, r2
 800563e:	4a0d      	ldr	r2, [pc, #52]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005640:	430b      	orrs	r3, r1
 8005642:	6113      	str	r3, [r2, #16]
 8005644:	e005      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005646:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800564c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005650:	6113      	str	r3, [r2, #16]
 8005652:	4b08      	ldr	r3, [pc, #32]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005654:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800565e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005662:	4a04      	ldr	r2, [pc, #16]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6713      	str	r3, [r2, #112]	@ 0x70
 8005668:	e00e      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800566a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800566e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005672:	e009      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005674:	58024400 	.word	0x58024400
 8005678:	58024800 	.word	0x58024800
 800567c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f002 0301 	and.w	r3, r2, #1
 8005694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800569e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f000 8089 	beq.w	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056b0:	2b28      	cmp	r3, #40	@ 0x28
 80056b2:	d86b      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80056b4:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	08005795 	.word	0x08005795
 80056c0:	0800578d 	.word	0x0800578d
 80056c4:	0800578d 	.word	0x0800578d
 80056c8:	0800578d 	.word	0x0800578d
 80056cc:	0800578d 	.word	0x0800578d
 80056d0:	0800578d 	.word	0x0800578d
 80056d4:	0800578d 	.word	0x0800578d
 80056d8:	0800578d 	.word	0x0800578d
 80056dc:	08005761 	.word	0x08005761
 80056e0:	0800578d 	.word	0x0800578d
 80056e4:	0800578d 	.word	0x0800578d
 80056e8:	0800578d 	.word	0x0800578d
 80056ec:	0800578d 	.word	0x0800578d
 80056f0:	0800578d 	.word	0x0800578d
 80056f4:	0800578d 	.word	0x0800578d
 80056f8:	0800578d 	.word	0x0800578d
 80056fc:	08005777 	.word	0x08005777
 8005700:	0800578d 	.word	0x0800578d
 8005704:	0800578d 	.word	0x0800578d
 8005708:	0800578d 	.word	0x0800578d
 800570c:	0800578d 	.word	0x0800578d
 8005710:	0800578d 	.word	0x0800578d
 8005714:	0800578d 	.word	0x0800578d
 8005718:	0800578d 	.word	0x0800578d
 800571c:	08005795 	.word	0x08005795
 8005720:	0800578d 	.word	0x0800578d
 8005724:	0800578d 	.word	0x0800578d
 8005728:	0800578d 	.word	0x0800578d
 800572c:	0800578d 	.word	0x0800578d
 8005730:	0800578d 	.word	0x0800578d
 8005734:	0800578d 	.word	0x0800578d
 8005738:	0800578d 	.word	0x0800578d
 800573c:	08005795 	.word	0x08005795
 8005740:	0800578d 	.word	0x0800578d
 8005744:	0800578d 	.word	0x0800578d
 8005748:	0800578d 	.word	0x0800578d
 800574c:	0800578d 	.word	0x0800578d
 8005750:	0800578d 	.word	0x0800578d
 8005754:	0800578d 	.word	0x0800578d
 8005758:	0800578d 	.word	0x0800578d
 800575c:	08005795 	.word	0x08005795
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	3308      	adds	r3, #8
 8005766:	2101      	movs	r1, #1
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fe95 	bl	8007498 <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005774:	e00f      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3328      	adds	r3, #40	@ 0x28
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f001 ff3c 	bl	80075fc <RCCEx_PLL3_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800579e:	4bbf      	ldr	r3, [pc, #764]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ac:	4abb      	ldr	r2, [pc, #748]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057ae:	430b      	orrs	r3, r1
 80057b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057b2:	e003      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f002 0302 	and.w	r3, r2, #2
 80057c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d041      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d824      	bhi.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005839 	.word	0x08005839
 80057f0:	08005805 	.word	0x08005805
 80057f4:	0800581b 	.word	0x0800581b
 80057f8:	08005839 	.word	0x08005839
 80057fc:	08005839 	.word	0x08005839
 8005800:	08005839 	.word	0x08005839
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	3308      	adds	r3, #8
 800580a:	2101      	movs	r1, #1
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fe43 	bl	8007498 <RCCEx_PLL2_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005818:	e00f      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	3328      	adds	r3, #40	@ 0x28
 8005820:	2101      	movs	r1, #1
 8005822:	4618      	mov	r0, r3
 8005824:	f001 feea 	bl	80075fc <RCCEx_PLL3_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800582e:	e004      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005836:	e000      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005842:	4b96      	ldr	r3, [pc, #600]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005846:	f023 0107 	bic.w	r1, r3, #7
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005850:	4a92      	ldr	r2, [pc, #584]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005852:	430b      	orrs	r3, r1
 8005854:	6553      	str	r3, [r2, #84]	@ 0x54
 8005856:	e003      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f002 0304 	and.w	r3, r2, #4
 800586c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005870:	2300      	movs	r3, #0
 8005872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005876:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800587a:	460b      	mov	r3, r1
 800587c:	4313      	orrs	r3, r2
 800587e:	d044      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005888:	2b05      	cmp	r3, #5
 800588a:	d825      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800588c:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058e1 	.word	0x080058e1
 8005898:	080058ad 	.word	0x080058ad
 800589c:	080058c3 	.word	0x080058c3
 80058a0:	080058e1 	.word	0x080058e1
 80058a4:	080058e1 	.word	0x080058e1
 80058a8:	080058e1 	.word	0x080058e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b0:	3308      	adds	r3, #8
 80058b2:	2101      	movs	r1, #1
 80058b4:	4618      	mov	r0, r3
 80058b6:	f001 fdef 	bl	8007498 <RCCEx_PLL2_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058c0:	e00f      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	3328      	adds	r3, #40	@ 0x28
 80058c8:	2101      	movs	r1, #1
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 fe96 	bl	80075fc <RCCEx_PLL3_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058d6:	e004      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058de:	e000      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80058e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ea:	4b6c      	ldr	r3, [pc, #432]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ee:	f023 0107 	bic.w	r1, r3, #7
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058fa:	4a68      	ldr	r2, [pc, #416]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005900:	e003      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f002 0320 	and.w	r3, r2, #32
 8005916:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005924:	460b      	mov	r3, r1
 8005926:	4313      	orrs	r3, r2
 8005928:	d055      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005936:	d033      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800593c:	d82c      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005942:	d02f      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005948:	d826      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800594a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800594e:	d02b      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005954:	d820      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800595a:	d012      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800595c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005960:	d81a      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d022      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800596a:	d115      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	3308      	adds	r3, #8
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f001 fd8f 	bl	8007498 <RCCEx_PLL2_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005980:	e015      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	3328      	adds	r3, #40	@ 0x28
 8005988:	2102      	movs	r1, #2
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fe36 	bl	80075fc <RCCEx_PLL3_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005996:	e00a      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800599e:	e006      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059a0:	bf00      	nop
 80059a2:	e004      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059a4:	bf00      	nop
 80059a6:	e002      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059b6:	4b39      	ldr	r3, [pc, #228]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c6:	4a35      	ldr	r2, [pc, #212]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d058      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a02:	d033      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a08:	d82c      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0e:	d02f      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a14:	d826      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a1a:	d02b      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a20:	d820      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a26:	d012      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a2c:	d81a      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d022      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a36:	d115      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fd29 	bl	8007498 <RCCEx_PLL2_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a4c:	e015      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	3328      	adds	r3, #40	@ 0x28
 8005a54:	2102      	movs	r1, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fdd0 	bl	80075fc <RCCEx_PLL3_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a62:	e00a      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a6a:	e006      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a6c:	bf00      	nop
 8005a6e:	e004      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a70:	bf00      	nop
 8005a72:	e002      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a74:	bf00      	nop
 8005a76:	e000      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10e      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a82:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a92:	4a02      	ldr	r2, [pc, #8]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a9a:	bf00      	nop
 8005a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005abe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d055      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ad0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ad4:	d033      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005ad6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ada:	d82c      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae0:	d02f      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae6:	d826      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ae8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005aec:	d02b      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005aee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005af2:	d820      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005af8:	d012      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005afe:	d81a      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d022      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b08:	d115      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0e:	3308      	adds	r3, #8
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fcc0 	bl	8007498 <RCCEx_PLL2_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b1e:	e015      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b24:	3328      	adds	r3, #40	@ 0x28
 8005b26:	2102      	movs	r1, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fd67 	bl	80075fc <RCCEx_PLL3_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b34:	e00a      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b3c:	e006      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b3e:	bf00      	nop
 8005b40:	e004      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b42:	bf00      	nop
 8005b44:	e002      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10b      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b54:	4ba1      	ldr	r3, [pc, #644]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b64:	4a9d      	ldr	r2, [pc, #628]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b6a:	e003      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f002 0308 	and.w	r3, r2, #8
 8005b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b84:	2300      	movs	r3, #0
 8005b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4313      	orrs	r3, r2
 8005b92:	d01e      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	3328      	adds	r3, #40	@ 0x28
 8005ba8:	2102      	movs	r1, #2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 fd26 	bl	80075fc <RCCEx_PLL3_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005bbc:	4b87      	ldr	r3, [pc, #540]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bcc:	4a83      	ldr	r2, [pc, #524]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f002 0310 	and.w	r3, r2, #16
 8005bde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005be8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bec:	460b      	mov	r3, r1
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	d01e      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfe:	d10c      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	3328      	adds	r3, #40	@ 0x28
 8005c06:	2102      	movs	r1, #2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fcf7 	bl	80075fc <RCCEx_PLL3_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c1a:	4b70      	ldr	r3, [pc, #448]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d03e      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c5c:	d022      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c62:	d81b      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c6c:	d00b      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c6e:	e015      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	3308      	adds	r3, #8
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 fc0d 	bl	8007498 <RCCEx_PLL2_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c84:	e00f      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8a:	3328      	adds	r3, #40	@ 0x28
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 fcb4 	bl	80075fc <RCCEx_PLL3_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c9a:	e004      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cae:	4b4b      	ldr	r3, [pc, #300]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cbe:	4a47      	ldr	r2, [pc, #284]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cc4:	e003      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005cda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cdc:	2300      	movs	r3, #0
 8005cde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ce0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	d03b      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cf6:	d01f      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005cf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cfc:	d818      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d02:	d003      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d08:	d007      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005d0a:	e011      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d0c:	4b33      	ldr	r3, [pc, #204]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	4a32      	ldr	r2, [pc, #200]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d18:	e00f      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1e:	3328      	adds	r3, #40	@ 0x28
 8005d20:	2101      	movs	r1, #1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fc6a 	bl	80075fc <RCCEx_PLL3_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d2e:	e004      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d36:	e000      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d42:	4b26      	ldr	r3, [pc, #152]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	4a22      	ldr	r2, [pc, #136]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d58:	e003      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d70:	2300      	movs	r3, #0
 8005d72:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	d034      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8c:	d007      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005d8e:	e011      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d90:	4b12      	ldr	r3, [pc, #72]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	4a11      	ldr	r2, [pc, #68]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d9c:	e00e      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	3308      	adds	r3, #8
 8005da4:	2102      	movs	r1, #2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 fb76 	bl	8007498 <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005db2:	e003      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10d      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dc4:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd2:	4a02      	ldr	r2, [pc, #8]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dd8:	e006      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005dda:	bf00      	nop
 8005ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df6:	2300      	movs	r3, #0
 8005df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dfa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	d00c      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e08:	3328      	adds	r3, #40	@ 0x28
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 fbf5 	bl	80075fc <RCCEx_PLL3_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e34:	460b      	mov	r3, r1
 8005e36:	4313      	orrs	r3, r2
 8005e38:	d038      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e46:	d018      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e4c:	d811      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e52:	d014      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e58:	d80b      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d011      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e62:	d106      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4bc3      	ldr	r3, [pc, #780]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	4ac2      	ldr	r2, [pc, #776]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e70:	e008      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e78:	e004      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e8c:	4bb9      	ldr	r3, [pc, #740]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e9c:	4ab5      	ldr	r2, [pc, #724]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eba:	2300      	movs	r3, #0
 8005ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ebe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ec8:	4baa      	ldr	r3, [pc, #680]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ecc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed6:	4aa7      	ldr	r2, [pc, #668]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eea:	2300      	movs	r3, #0
 8005eec:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	d00a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ef8:	4b9e      	ldr	r3, [pc, #632]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f08:	4a9a      	ldr	r2, [pc, #616]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f2a:	4b92      	ldr	r3, [pc, #584]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f38:	4a8e      	ldr	r2, [pc, #568]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f54:	460b      	mov	r3, r1
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f5a:	4b86      	ldr	r3, [pc, #536]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	4a85      	ldr	r2, [pc, #532]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f64:	6113      	str	r3, [r2, #16]
 8005f66:	4b83      	ldr	r3, [pc, #524]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f68:	6919      	ldr	r1, [r3, #16]
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f72:	4a80      	ldr	r2, [pc, #512]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f86:	2300      	movs	r3, #0
 8005f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f94:	4b77      	ldr	r3, [pc, #476]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa2:	4a74      	ldr	r2, [pc, #464]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	d00a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fd4:	4a67      	ldr	r2, [pc, #412]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	d011      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fa4a 	bl	8007498 <RCCEx_PLL2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800600a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	2100      	movs	r1, #0
 8006024:	6239      	str	r1, [r7, #32]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006030:	460b      	mov	r3, r1
 8006032:	4313      	orrs	r3, r2
 8006034:	d011      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603a:	3308      	adds	r3, #8
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fa2a 	bl	8007498 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800604a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	2100      	movs	r1, #0
 8006064:	61b9      	str	r1, [r7, #24]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006070:	460b      	mov	r3, r1
 8006072:	4313      	orrs	r3, r2
 8006074:	d011      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	3308      	adds	r3, #8
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fa0a 	bl	8007498 <RCCEx_PLL2_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800608a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	2100      	movs	r1, #0
 80060a4:	6139      	str	r1, [r7, #16]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060b0:	460b      	mov	r3, r1
 80060b2:	4313      	orrs	r3, r2
 80060b4:	d011      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	3328      	adds	r3, #40	@ 0x28
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 fa9c 	bl	80075fc <RCCEx_PLL3_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	2100      	movs	r1, #0
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d011      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	3328      	adds	r3, #40	@ 0x28
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fa7c 	bl	80075fc <RCCEx_PLL3_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	2100      	movs	r1, #0
 8006124:	6039      	str	r1, [r7, #0]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d011      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	3328      	adds	r3, #40	@ 0x28
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fa5c 	bl	80075fc <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800614a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800615a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	e000      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
}
 8006168:	4618      	mov	r0, r3
 800616a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006174:	58024400 	.word	0x58024400

08006178 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b090      	sub	sp, #64	@ 0x40
 800617c:	af00      	add	r7, sp, #0
 800617e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006186:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800618a:	430b      	orrs	r3, r1
 800618c:	f040 8094 	bne.w	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006190:	4b9e      	ldr	r3, [pc, #632]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	2b04      	cmp	r3, #4
 800619e:	f200 8087 	bhi.w	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061bd 	.word	0x080061bd
 80061ac:	080061e5 	.word	0x080061e5
 80061b0:	0800620d 	.word	0x0800620d
 80061b4:	080062a9 	.word	0x080062a9
 80061b8:	08006235 	.word	0x08006235
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061bc:	4b93      	ldr	r3, [pc, #588]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061c8:	d108      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 f810 	bl	80071f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d8:	f000 bd45 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e0:	f000 bd41 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061e4:	4b89      	ldr	r3, [pc, #548]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f0:	d108      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fd54 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006200:	f000 bd31 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006208:	f000 bd2d 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800620c:	4b7f      	ldr	r3, [pc, #508]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006218:	d108      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fe94 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006228:	f000 bd1d 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006230:	f000 bd19 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006234:	4b75      	ldr	r3, [pc, #468]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006238:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800623e:	4b73      	ldr	r3, [pc, #460]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d10c      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800624a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624c:	2b00      	cmp	r3, #0
 800624e:	d109      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006250:	4b6e      	ldr	r3, [pc, #440]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	4a6d      	ldr	r2, [pc, #436]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
 8006260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006262:	e01f      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006264:	4b69      	ldr	r3, [pc, #420]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006270:	d106      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006278:	d102      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800627a:	4b66      	ldr	r3, [pc, #408]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800627e:	e011      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006280:	4b62      	ldr	r3, [pc, #392]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800628c:	d106      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800628e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006294:	d102      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006296:	4b60      	ldr	r3, [pc, #384]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629a:	e003      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062a0:	f000 bce1 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062a4:	f000 bcdf 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062a8:	4b5c      	ldr	r3, [pc, #368]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ac:	f000 bcdb 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b4:	f000 bcd7 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80062b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80062c0:	430b      	orrs	r3, r1
 80062c2:	f040 80ad 	bne.w	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80062c6:	4b51      	ldr	r3, [pc, #324]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80062ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d6:	d056      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062de:	f200 8090 	bhi.w	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80062e6:	f000 8088 	beq.w	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80062ee:	f200 8088 	bhi.w	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2b80      	cmp	r3, #128	@ 0x80
 80062f6:	d032      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	2b80      	cmp	r3, #128	@ 0x80
 80062fc:	f200 8081 	bhi.w	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	2b40      	cmp	r3, #64	@ 0x40
 800630a:	d014      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800630c:	e079      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800630e:	4b3f      	ldr	r3, [pc, #252]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800631a:	d108      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800631c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006320:	4618      	mov	r0, r3
 8006322:	f000 ff67 	bl	80071f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800632a:	f000 bc9c 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006332:	f000 bc98 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006336:	4b35      	ldr	r3, [pc, #212]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800633e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006342:	d108      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006344:	f107 0318 	add.w	r3, r7, #24
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fcab 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006352:	f000 bc88 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800635a:	f000 bc84 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800635e:	4b2b      	ldr	r3, [pc, #172]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636a:	d108      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800636c:	f107 030c 	add.w	r3, r7, #12
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fdeb 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800637a:	f000 bc74 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006382:	f000 bc70 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006386:	4b21      	ldr	r3, [pc, #132]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800638a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006390:	4b1e      	ldr	r3, [pc, #120]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d10c      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800639c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063a2:	4b1a      	ldr	r3, [pc, #104]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	4a18      	ldr	r2, [pc, #96]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b4:	e01f      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063b6:	4b15      	ldr	r3, [pc, #84]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c2:	d106      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ca:	d102      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063cc:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d0:	e011      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063d2:	4b0e      	ldr	r3, [pc, #56]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063de:	d106      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e6:	d102      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ec:	e003      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063f2:	f000 bc38 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063f6:	f000 bc36 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063fa:	4b08      	ldr	r3, [pc, #32]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fe:	f000 bc32 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006406:	f000 bc2e 	b.w	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800640a:	bf00      	nop
 800640c:	58024400 	.word	0x58024400
 8006410:	03d09000 	.word	0x03d09000
 8006414:	003d0900 	.word	0x003d0900
 8006418:	007a1200 	.word	0x007a1200
 800641c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006424:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006428:	430b      	orrs	r3, r1
 800642a:	f040 809c 	bne.w	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800642e:	4b9e      	ldr	r3, [pc, #632]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006432:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006436:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800643e:	d054      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006446:	f200 808b 	bhi.w	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006450:	f000 8083 	beq.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800645a:	f200 8081 	bhi.w	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006464:	d02f      	beq.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800646c:	d878      	bhi.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800647a:	d012      	beq.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800647c:	e070      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800647e:	4b8a      	ldr	r3, [pc, #552]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800648a:	d107      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800648c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006490:	4618      	mov	r0, r3
 8006492:	f000 feaf 	bl	80071f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800649a:	e3e4      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a0:	e3e1      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064a2:	4b81      	ldr	r3, [pc, #516]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064ae:	d107      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b0:	f107 0318 	add.w	r3, r7, #24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fbf5 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064be:	e3d2      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c4:	e3cf      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064c6:	4b78      	ldr	r3, [pc, #480]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064d2:	d107      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064d4:	f107 030c 	add.w	r3, r7, #12
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fd37 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e2:	e3c0      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e8:	e3bd      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ea:	4b6f      	ldr	r3, [pc, #444]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064f4:	4b6c      	ldr	r3, [pc, #432]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d10c      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006506:	4b68      	ldr	r3, [pc, #416]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	08db      	lsrs	r3, r3, #3
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	4a66      	ldr	r2, [pc, #408]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006512:	fa22 f303 	lsr.w	r3, r2, r3
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006518:	e01e      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800651a:	4b63      	ldr	r3, [pc, #396]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006526:	d106      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800652e:	d102      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006530:	4b5f      	ldr	r3, [pc, #380]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006534:	e010      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006536:	4b5c      	ldr	r3, [pc, #368]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006542:	d106      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800654a:	d102      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800654c:	4b59      	ldr	r3, [pc, #356]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006550:	e002      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006556:	e386      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006558:	e385      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800655a:	4b57      	ldr	r3, [pc, #348]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800655c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655e:	e382      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006564:	e37f      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800656e:	430b      	orrs	r3, r1
 8006570:	f040 80a7 	bne.w	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006574:	4b4c      	ldr	r3, [pc, #304]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006578:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800657c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006584:	d055      	beq.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800658c:	f200 8096 	bhi.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006596:	f000 8084 	beq.w	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065a0:	f200 808c 	bhi.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065aa:	d030      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065b2:	f200 8083 	bhi.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065c2:	d012      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80065c4:	e07a      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065c6:	4b38      	ldr	r3, [pc, #224]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065d2:	d107      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fe0b 	bl	80071f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e2:	e340      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e8:	e33d      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ea:	4b2f      	ldr	r3, [pc, #188]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065f6:	d107      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f8:	f107 0318 	add.w	r3, r7, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fb51 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006606:	e32e      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660c:	e32b      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800660e:	4b26      	ldr	r3, [pc, #152]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800661a:	d107      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800661c:	f107 030c 	add.w	r3, r7, #12
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc93 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800662a:	e31c      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006630:	e319      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006632:	4b1d      	ldr	r3, [pc, #116]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006636:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800663a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663c:	4b1a      	ldr	r3, [pc, #104]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d10c      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800664e:	4b16      	ldr	r3, [pc, #88]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	08db      	lsrs	r3, r3, #3
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	4a14      	ldr	r2, [pc, #80]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800665a:	fa22 f303 	lsr.w	r3, r2, r3
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006660:	e01e      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006662:	4b11      	ldr	r3, [pc, #68]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800666e:	d106      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006676:	d102      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006678:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800667a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800667c:	e010      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800667e:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800668a:	d106      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800668c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006692:	d102      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006694:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006698:	e002      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800669e:	e2e2      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066a0:	e2e1      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066a2:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80066a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a6:	e2de      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066a8:	58024400 	.word	0x58024400
 80066ac:	03d09000 	.word	0x03d09000
 80066b0:	003d0900 	.word	0x003d0900
 80066b4:	007a1200 	.word	0x007a1200
 80066b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c0:	e2d1      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80066ca:	430b      	orrs	r3, r1
 80066cc:	f040 809c 	bne.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80066d0:	4b93      	ldr	r3, [pc, #588]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80066d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066e0:	d054      	beq.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066e8:	f200 808b 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066f2:	f000 8083 	beq.w	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066fc:	f200 8081 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006706:	d02f      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800670e:	d878      	bhi.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800671c:	d012      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800671e:	e070      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006720:	4b7f      	ldr	r3, [pc, #508]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800672c:	d107      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800672e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fd5e 	bl	80071f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673c:	e293      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006742:	e290      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006744:	4b76      	ldr	r3, [pc, #472]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006750:	d107      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006752:	f107 0318 	add.w	r3, r7, #24
 8006756:	4618      	mov	r0, r3
 8006758:	f000 faa4 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006760:	e281      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006766:	e27e      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006768:	4b6d      	ldr	r3, [pc, #436]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006774:	d107      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fbe6 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006784:	e26f      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800678a:	e26c      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800678c:	4b64      	ldr	r3, [pc, #400]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800678e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006790:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006796:	4b62      	ldr	r3, [pc, #392]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d10c      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80067a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a8:	4b5d      	ldr	r3, [pc, #372]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	08db      	lsrs	r3, r3, #3
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ba:	e01e      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067bc:	4b58      	ldr	r3, [pc, #352]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c8:	d106      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80067ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067d0:	d102      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067d2:	4b55      	ldr	r3, [pc, #340]	@ (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067d6:	e010      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067d8:	4b51      	ldr	r3, [pc, #324]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067e4:	d106      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80067e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ec:	d102      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067ee:	4b4f      	ldr	r3, [pc, #316]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80067f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f2:	e002      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80067f8:	e235      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067fa:	e234      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80067fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006800:	e231      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006806:	e22e      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006810:	430b      	orrs	r3, r1
 8006812:	f040 808f 	bne.w	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006816:	4b42      	ldr	r3, [pc, #264]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800681e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006822:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006826:	d06b      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800682e:	d874      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006832:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006836:	d056      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800683e:	d86c      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006842:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006846:	d03b      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800684e:	d864      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006856:	d021      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800685e:	d85c      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800686c:	d004      	beq.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800686e:	e054      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006870:	f7fe fa4c 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8006874:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006876:	e1f6      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006878:	4b29      	ldr	r3, [pc, #164]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006884:	d107      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006886:	f107 0318 	add.w	r3, r7, #24
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fa0a 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006894:	e1e7      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689a:	e1e4      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800689c:	4b20      	ldr	r3, [pc, #128]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a8:	d107      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068aa:	f107 030c 	add.w	r3, r7, #12
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fb4c 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b8:	e1d5      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068be:	e1d2      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068c0:	4b17      	ldr	r3, [pc, #92]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d109      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068cc:	4b14      	ldr	r3, [pc, #80]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	4a13      	ldr	r2, [pc, #76]	@ (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
 80068dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068de:	e1c2      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e4:	e1bf      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f2:	d102      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80068f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f8:	e1b5      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fe:	e1b2      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006900:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800690c:	d102      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800690e:	4b07      	ldr	r3, [pc, #28]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006912:	e1a8      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006918:	e1a5      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800691e:	e1a2      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006920:	58024400 	.word	0x58024400
 8006924:	03d09000 	.word	0x03d09000
 8006928:	003d0900 	.word	0x003d0900
 800692c:	007a1200 	.word	0x007a1200
 8006930:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006938:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800693c:	430b      	orrs	r3, r1
 800693e:	d173      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006940:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006948:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800694a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006950:	d02f      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006958:	d863      	bhi.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006966:	d012      	beq.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006968:	e05b      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800696a:	4b92      	ldr	r3, [pc, #584]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006976:	d107      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006978:	f107 0318 	add.w	r3, r7, #24
 800697c:	4618      	mov	r0, r3
 800697e:	f000 f991 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006986:	e16e      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698c:	e16b      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800698e:	4b89      	ldr	r3, [pc, #548]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800699a:	d107      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800699c:	f107 030c 	add.w	r3, r7, #12
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fad3 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069aa:	e15c      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b0:	e159      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069b2:	4b80      	ldr	r3, [pc, #512]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069bc:	4b7d      	ldr	r3, [pc, #500]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d10c      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80069c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069ce:	4b79      	ldr	r3, [pc, #484]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	4a77      	ldr	r2, [pc, #476]	@ (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e0:	e01e      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069e2:	4b74      	ldr	r3, [pc, #464]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ee:	d106      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069f6:	d102      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069f8:	4b70      	ldr	r3, [pc, #448]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80069fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069fc:	e010      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069fe:	4b6d      	ldr	r3, [pc, #436]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a0a:	d106      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a12:	d102      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a14:	4b6a      	ldr	r3, [pc, #424]	@ (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a18:	e002      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a1e:	e122      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a20:	e121      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a26:	e11e      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006a30:	430b      	orrs	r3, r1
 8006a32:	d133      	bne.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a34:	4b5f      	ldr	r3, [pc, #380]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a4a:	d012      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006a4c:	e023      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a4e:	4b59      	ldr	r3, [pc, #356]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fbc7 	bl	80071f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a6a:	e0fc      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a70:	e0f9      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a72:	4b50      	ldr	r3, [pc, #320]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a80:	f107 0318 	add.w	r3, r7, #24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 f90d 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a8e:	e0ea      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a94:	e0e7      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9a:	e0e4      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	f040 808d 	bne.w	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006aaa:	4b42      	ldr	r3, [pc, #264]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006ab2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aba:	d06b      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ac2:	d874      	bhi.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aca:	d056      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad2:	d86c      	bhi.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ada:	d03b      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ae2:	d864      	bhi.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aea:	d021      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006af2:	d85c      	bhi.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d004      	beq.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b00:	d004      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006b02:	e054      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006b04:	f000 f8b8 	bl	8006c78 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b0a:	e0ac      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b0c:	4b29      	ldr	r3, [pc, #164]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b18:	d107      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f8c0 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b28:	e09d      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b2e:	e09a      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b30:	4b20      	ldr	r3, [pc, #128]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b3e:	f107 030c 	add.w	r3, r7, #12
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fa02 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b4c:	e08b      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b52:	e088      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b54:	4b17      	ldr	r3, [pc, #92]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d109      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	08db      	lsrs	r3, r3, #3
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	4a13      	ldr	r2, [pc, #76]	@ (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b72:	e078      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b78:	e075      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b86:	d102      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006b88:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b8c:	e06b      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b92:	e068      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b94:	4b07      	ldr	r3, [pc, #28]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ba0:	d102      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006ba2:	4b07      	ldr	r3, [pc, #28]	@ (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba6:	e05e      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bac:	e05b      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb2:	e058      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bb4:	58024400 	.word	0x58024400
 8006bb8:	03d09000 	.word	0x03d09000
 8006bbc:	003d0900 	.word	0x003d0900
 8006bc0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	d148      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006bd0:	4b27      	ldr	r3, [pc, #156]	@ (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bd8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be0:	d02a      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be8:	d838      	bhi.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bf6:	d00d      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006bf8:	e030      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c06:	d102      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006c08:	4b1a      	ldr	r3, [pc, #104]	@ (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c0c:	e02b      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c12:	e028      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c14:	4b16      	ldr	r3, [pc, #88]	@ (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c20:	d107      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fae4 	bl	80071f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c30:	e019      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c36:	e016      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c38:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c44:	d107      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c46:	f107 0318 	add.w	r3, r7, #24
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 f82a 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c54:	e007      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c5a:	e004      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c60:	e001      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3740      	adds	r7, #64	@ 0x40
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	58024400 	.word	0x58024400
 8006c74:	007a1200 	.word	0x007a1200

08006c78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c7c:	f7fe f816 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8006c80:	4602      	mov	r2, r0
 8006c82:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	091b      	lsrs	r3, r3, #4
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	4904      	ldr	r1, [pc, #16]	@ (8006ca0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c8e:	5ccb      	ldrb	r3, [r1, r3]
 8006c90:	f003 031f 	and.w	r3, r3, #31
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	08008794 	.word	0x08008794

08006ca4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b089      	sub	sp, #36	@ 0x24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cac:	4ba1      	ldr	r3, [pc, #644]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006cb6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cba:	0b1b      	lsrs	r3, r3, #12
 8006cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cce:	4b99      	ldr	r3, [pc, #612]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd2:	08db      	lsrs	r3, r3, #3
 8006cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	fb02 f303 	mul.w	r3, r2, r3
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8111 	beq.w	8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	f000 8083 	beq.w	8006e00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	f200 80a1 	bhi.w	8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d056      	beq.n	8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d0e:	e099      	b.n	8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d10:	4b88      	ldr	r3, [pc, #544]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d02d      	beq.n	8006d78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d1c:	4b85      	ldr	r3, [pc, #532]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	08db      	lsrs	r3, r3, #3
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	4a84      	ldr	r2, [pc, #528]	@ (8006f38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d28:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d46:	4b7b      	ldr	r3, [pc, #492]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d76:	e087      	b.n	8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dba:	e065      	b.n	8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dce:	4b59      	ldr	r3, [pc, #356]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dfe:	e043      	b.n	8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e12:	4b48      	ldr	r3, [pc, #288]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e42:	e021      	b.n	8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e56:	4b37      	ldr	r3, [pc, #220]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e88:	4b2a      	ldr	r3, [pc, #168]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8c:	0a5b      	lsrs	r3, r3, #9
 8006e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eae:	ee17 2a90 	vmov	r2, s15
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006edc:	ee17 2a90 	vmov	r2, s15
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ee4:	4b13      	ldr	r3, [pc, #76]	@ (8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	0e1b      	lsrs	r3, r3, #24
 8006eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0a:	ee17 2a90 	vmov	r2, s15
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f12:	e008      	b.n	8006f26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	609a      	str	r2, [r3, #8]
}
 8006f26:	bf00      	nop
 8006f28:	3724      	adds	r7, #36	@ 0x24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	58024400 	.word	0x58024400
 8006f38:	03d09000 	.word	0x03d09000
 8006f3c:	46000000 	.word	0x46000000
 8006f40:	4c742400 	.word	0x4c742400
 8006f44:	4a742400 	.word	0x4a742400
 8006f48:	4af42400 	.word	0x4af42400

08006f4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b089      	sub	sp, #36	@ 0x24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f54:	4ba1      	ldr	r3, [pc, #644]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f5e:	4b9f      	ldr	r3, [pc, #636]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	0d1b      	lsrs	r3, r3, #20
 8006f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f76:	4b99      	ldr	r3, [pc, #612]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8111 	beq.w	80071bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f000 8083 	beq.w	80070a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	f200 80a1 	bhi.w	80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d056      	beq.n	8007064 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fb6:	e099      	b.n	80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb8:	4b88      	ldr	r3, [pc, #544]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02d      	beq.n	8007020 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fc4:	4b85      	ldr	r3, [pc, #532]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	08db      	lsrs	r3, r3, #3
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	4a84      	ldr	r2, [pc, #528]	@ (80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b7b      	ldr	r3, [pc, #492]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007002:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800701e:	e087      	b.n	8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b6a      	ldr	r3, [pc, #424]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a03 	vldr	s12, [r7, #12]
 8007046:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007062:	e065      	b.n	8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007076:	4b59      	ldr	r3, [pc, #356]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007086:	ed97 6a03 	vldr	s12, [r7, #12]
 800708a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800708e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070a6:	e043      	b.n	8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ba:	4b48      	ldr	r3, [pc, #288]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ea:	e021      	b.n	8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fe:	4b37      	ldr	r3, [pc, #220]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007112:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800712e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007130:	4b2a      	ldr	r3, [pc, #168]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	0a5b      	lsrs	r3, r3, #9
 8007136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800714a:	edd7 6a07 	vldr	s13, [r7, #28]
 800714e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007156:	ee17 2a90 	vmov	r2, s15
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800715e:	4b1f      	ldr	r3, [pc, #124]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	0c1b      	lsrs	r3, r3, #16
 8007164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007178:	edd7 6a07 	vldr	s13, [r7, #28]
 800717c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007184:	ee17 2a90 	vmov	r2, s15
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800718c:	4b13      	ldr	r3, [pc, #76]	@ (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007190:	0e1b      	lsrs	r3, r3, #24
 8007192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b2:	ee17 2a90 	vmov	r2, s15
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071ba:	e008      	b.n	80071ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
}
 80071ce:	bf00      	nop
 80071d0:	3724      	adds	r7, #36	@ 0x24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	58024400 	.word	0x58024400
 80071e0:	03d09000 	.word	0x03d09000
 80071e4:	46000000 	.word	0x46000000
 80071e8:	4c742400 	.word	0x4c742400
 80071ec:	4a742400 	.word	0x4a742400
 80071f0:	4af42400 	.word	0x4af42400

080071f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b089      	sub	sp, #36	@ 0x24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071fc:	4ba0      	ldr	r3, [pc, #640]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007200:	f003 0303 	and.w	r3, r3, #3
 8007204:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007206:	4b9e      	ldr	r3, [pc, #632]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	091b      	lsrs	r3, r3, #4
 800720c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007210:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007212:	4b9b      	ldr	r3, [pc, #620]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800721c:	4b98      	ldr	r3, [pc, #608]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800721e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007220:	08db      	lsrs	r3, r3, #3
 8007222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	fb02 f303 	mul.w	r3, r2, r3
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007234:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8111 	beq.w	8007462 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b02      	cmp	r3, #2
 8007244:	f000 8083 	beq.w	800734e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b02      	cmp	r3, #2
 800724c:	f200 80a1 	bhi.w	8007392 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d056      	beq.n	800730a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800725c:	e099      	b.n	8007392 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800725e:	4b88      	ldr	r3, [pc, #544]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d02d      	beq.n	80072c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800726a:	4b85      	ldr	r3, [pc, #532]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	08db      	lsrs	r3, r3, #3
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	4a83      	ldr	r2, [pc, #524]	@ (8007484 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007276:	fa22 f303 	lsr.w	r3, r2, r3
 800727a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007294:	4b7a      	ldr	r3, [pc, #488]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072c4:	e087      	b.n	80073d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800748c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d8:	4b69      	ldr	r3, [pc, #420]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007304:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007308:	e065      	b.n	80073d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007314:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731c:	4b58      	ldr	r3, [pc, #352]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800731e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007330:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800734c:	e043      	b.n	80073d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007358:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007494 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800735c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007360:	4b47      	ldr	r3, [pc, #284]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007370:	ed97 6a03 	vldr	s12, [r7, #12]
 8007374:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007390:	e021      	b.n	80073d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800748c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80073a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a4:	4b36      	ldr	r3, [pc, #216]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80073d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073da:	0a5b      	lsrs	r3, r3, #9
 80073dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073fc:	ee17 2a90 	vmov	r2, s15
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007404:	4b1e      	ldr	r3, [pc, #120]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800741a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800741e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800742a:	ee17 2a90 	vmov	r2, s15
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007432:	4b13      	ldr	r3, [pc, #76]	@ (8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	0e1b      	lsrs	r3, r3, #24
 8007438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007444:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800744c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007458:	ee17 2a90 	vmov	r2, s15
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007460:	e008      	b.n	8007474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	609a      	str	r2, [r3, #8]
}
 8007474:	bf00      	nop
 8007476:	3724      	adds	r7, #36	@ 0x24
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	58024400 	.word	0x58024400
 8007484:	03d09000 	.word	0x03d09000
 8007488:	46000000 	.word	0x46000000
 800748c:	4c742400 	.word	0x4c742400
 8007490:	4a742400 	.word	0x4a742400
 8007494:	4af42400 	.word	0x4af42400

08007498 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074a6:	4b53      	ldr	r3, [pc, #332]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d101      	bne.n	80074b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e099      	b.n	80075ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074b6:	4b4f      	ldr	r3, [pc, #316]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4e      	ldr	r2, [pc, #312]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7f9 fe41 	bl	8001148 <HAL_GetTick>
 80074c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074c8:	e008      	b.n	80074dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074ca:	f7f9 fe3d 	bl	8001148 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e086      	b.n	80075ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074dc:	4b45      	ldr	r3, [pc, #276]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f0      	bne.n	80074ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074e8:	4b42      	ldr	r3, [pc, #264]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80074ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	031b      	lsls	r3, r3, #12
 80074f6:	493f      	ldr	r1, [pc, #252]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	3b01      	subs	r3, #1
 8007502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	025b      	lsls	r3, r3, #9
 800750e:	b29b      	uxth	r3, r3
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	3b01      	subs	r3, #1
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800752c:	4931      	ldr	r1, [pc, #196]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007532:	4b30      	ldr	r3, [pc, #192]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	492d      	ldr	r1, [pc, #180]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007544:	4b2b      	ldr	r3, [pc, #172]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	f023 0220 	bic.w	r2, r3, #32
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	4928      	ldr	r1, [pc, #160]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007556:	4b27      	ldr	r3, [pc, #156]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755a:	4a26      	ldr	r2, [pc, #152]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 800755c:	f023 0310 	bic.w	r3, r3, #16
 8007560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007562:	4b24      	ldr	r3, [pc, #144]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007566:	4b24      	ldr	r3, [pc, #144]	@ (80075f8 <RCCEx_PLL2_Config+0x160>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	69d2      	ldr	r2, [r2, #28]
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	4920      	ldr	r1, [pc, #128]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007576:	4b1f      	ldr	r3, [pc, #124]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	4a1e      	ldr	r2, [pc, #120]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 800757c:	f043 0310 	orr.w	r3, r3, #16
 8007580:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007588:	4b1a      	ldr	r3, [pc, #104]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4a19      	ldr	r2, [pc, #100]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 800758e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007594:	e00f      	b.n	80075b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d106      	bne.n	80075aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800759c:	4b15      	ldr	r3, [pc, #84]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	4a14      	ldr	r2, [pc, #80]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80075a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075a8:	e005      	b.n	80075b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075aa:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ae:	4a11      	ldr	r2, [pc, #68]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80075b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075b6:	4b0f      	ldr	r3, [pc, #60]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a0e      	ldr	r2, [pc, #56]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80075bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c2:	f7f9 fdc1 	bl	8001148 <HAL_GetTick>
 80075c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075c8:	e008      	b.n	80075dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075ca:	f7f9 fdbd 	bl	8001148 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e006      	b.n	80075ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <RCCEx_PLL2_Config+0x15c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	58024400 	.word	0x58024400
 80075f8:	ffff0007 	.word	0xffff0007

080075fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800760a:	4b53      	ldr	r3, [pc, #332]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 800760c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	2b03      	cmp	r3, #3
 8007614:	d101      	bne.n	800761a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e099      	b.n	800774e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800761a:	4b4f      	ldr	r3, [pc, #316]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a4e      	ldr	r2, [pc, #312]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007626:	f7f9 fd8f 	bl	8001148 <HAL_GetTick>
 800762a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800762c:	e008      	b.n	8007640 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800762e:	f7f9 fd8b 	bl	8001148 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e086      	b.n	800774e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007640:	4b45      	ldr	r3, [pc, #276]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f0      	bne.n	800762e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800764c:	4b42      	ldr	r3, [pc, #264]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	051b      	lsls	r3, r3, #20
 800765a:	493f      	ldr	r1, [pc, #252]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 800765c:	4313      	orrs	r3, r2
 800765e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	3b01      	subs	r3, #1
 8007666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	3b01      	subs	r3, #1
 8007670:	025b      	lsls	r3, r3, #9
 8007672:	b29b      	uxth	r3, r3
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	3b01      	subs	r3, #1
 800767c:	041b      	lsls	r3, r3, #16
 800767e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	3b01      	subs	r3, #1
 800768a:	061b      	lsls	r3, r3, #24
 800768c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007690:	4931      	ldr	r1, [pc, #196]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007692:	4313      	orrs	r3, r2
 8007694:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007696:	4b30      	ldr	r3, [pc, #192]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	492d      	ldr	r1, [pc, #180]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	4928      	ldr	r1, [pc, #160]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076ba:	4b27      	ldr	r3, [pc, #156]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	4a26      	ldr	r2, [pc, #152]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076c6:	4b24      	ldr	r3, [pc, #144]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ca:	4b24      	ldr	r3, [pc, #144]	@ (800775c <RCCEx_PLL3_Config+0x160>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	69d2      	ldr	r2, [r2, #28]
 80076d2:	00d2      	lsls	r2, r2, #3
 80076d4:	4920      	ldr	r1, [pc, #128]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076da:	4b1f      	ldr	r3, [pc, #124]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	4a1e      	ldr	r2, [pc, #120]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f0:	4a19      	ldr	r2, [pc, #100]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 80076f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80076f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076f8:	e00f      	b.n	800771a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d106      	bne.n	800770e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007700:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	4a14      	ldr	r2, [pc, #80]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007706:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800770a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800770c:	e005      	b.n	800771a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800770e:	4b12      	ldr	r3, [pc, #72]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007712:	4a11      	ldr	r2, [pc, #68]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007714:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007718:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800771a:	4b0f      	ldr	r3, [pc, #60]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a0e      	ldr	r2, [pc, #56]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007726:	f7f9 fd0f 	bl	8001148 <HAL_GetTick>
 800772a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800772c:	e008      	b.n	8007740 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800772e:	f7f9 fd0b 	bl	8001148 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e006      	b.n	800774e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <RCCEx_PLL3_Config+0x15c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0f0      	beq.n	800772e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	58024400 	.word	0x58024400
 800775c:	ffff0007 	.word	0xffff0007

08007760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e042      	b.n	80077f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f83b 	bl	8007800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2224      	movs	r2, #36	@ 0x24
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0201 	bic.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fd9a 	bl	80082e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f82f 	bl	8007814 <UART_SetConfig>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e01b      	b.n	80077f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fe19 	bl	8008428 <UART_CheckIdleState>
 80077f6:	4603      	mov	r3, r0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007818:	b092      	sub	sp, #72	@ 0x48
 800781a:	af00      	add	r7, sp, #0
 800781c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	431a      	orrs	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	431a      	orrs	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	4313      	orrs	r3, r2
 800783a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4bbe      	ldr	r3, [pc, #760]	@ (8007b3c <UART_SetConfig+0x328>)
 8007844:	4013      	ands	r3, r2
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800784c:	430b      	orrs	r3, r1
 800784e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4ab3      	ldr	r2, [pc, #716]	@ (8007b40 <UART_SetConfig+0x32c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d004      	beq.n	8007880 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800787c:	4313      	orrs	r3, r2
 800787e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	4baf      	ldr	r3, [pc, #700]	@ (8007b44 <UART_SetConfig+0x330>)
 8007888:	4013      	ands	r3, r2
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007890:	430b      	orrs	r3, r1
 8007892:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789a:	f023 010f 	bic.w	r1, r3, #15
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4aa6      	ldr	r2, [pc, #664]	@ (8007b48 <UART_SetConfig+0x334>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d177      	bne.n	80079a4 <UART_SetConfig+0x190>
 80078b4:	4ba5      	ldr	r3, [pc, #660]	@ (8007b4c <UART_SetConfig+0x338>)
 80078b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078bc:	2b28      	cmp	r3, #40	@ 0x28
 80078be:	d86d      	bhi.n	800799c <UART_SetConfig+0x188>
 80078c0:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <UART_SetConfig+0xb4>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	0800796d 	.word	0x0800796d
 80078cc:	0800799d 	.word	0x0800799d
 80078d0:	0800799d 	.word	0x0800799d
 80078d4:	0800799d 	.word	0x0800799d
 80078d8:	0800799d 	.word	0x0800799d
 80078dc:	0800799d 	.word	0x0800799d
 80078e0:	0800799d 	.word	0x0800799d
 80078e4:	0800799d 	.word	0x0800799d
 80078e8:	08007975 	.word	0x08007975
 80078ec:	0800799d 	.word	0x0800799d
 80078f0:	0800799d 	.word	0x0800799d
 80078f4:	0800799d 	.word	0x0800799d
 80078f8:	0800799d 	.word	0x0800799d
 80078fc:	0800799d 	.word	0x0800799d
 8007900:	0800799d 	.word	0x0800799d
 8007904:	0800799d 	.word	0x0800799d
 8007908:	0800797d 	.word	0x0800797d
 800790c:	0800799d 	.word	0x0800799d
 8007910:	0800799d 	.word	0x0800799d
 8007914:	0800799d 	.word	0x0800799d
 8007918:	0800799d 	.word	0x0800799d
 800791c:	0800799d 	.word	0x0800799d
 8007920:	0800799d 	.word	0x0800799d
 8007924:	0800799d 	.word	0x0800799d
 8007928:	08007985 	.word	0x08007985
 800792c:	0800799d 	.word	0x0800799d
 8007930:	0800799d 	.word	0x0800799d
 8007934:	0800799d 	.word	0x0800799d
 8007938:	0800799d 	.word	0x0800799d
 800793c:	0800799d 	.word	0x0800799d
 8007940:	0800799d 	.word	0x0800799d
 8007944:	0800799d 	.word	0x0800799d
 8007948:	0800798d 	.word	0x0800798d
 800794c:	0800799d 	.word	0x0800799d
 8007950:	0800799d 	.word	0x0800799d
 8007954:	0800799d 	.word	0x0800799d
 8007958:	0800799d 	.word	0x0800799d
 800795c:	0800799d 	.word	0x0800799d
 8007960:	0800799d 	.word	0x0800799d
 8007964:	0800799d 	.word	0x0800799d
 8007968:	08007995 	.word	0x08007995
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e222      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007974:	2304      	movs	r3, #4
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e21e      	b.n	8007dba <UART_SetConfig+0x5a6>
 800797c:	2308      	movs	r3, #8
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e21a      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007984:	2310      	movs	r3, #16
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e216      	b.n	8007dba <UART_SetConfig+0x5a6>
 800798c:	2320      	movs	r3, #32
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e212      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007994:	2340      	movs	r3, #64	@ 0x40
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e20e      	b.n	8007dba <UART_SetConfig+0x5a6>
 800799c:	2380      	movs	r3, #128	@ 0x80
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e20a      	b.n	8007dba <UART_SetConfig+0x5a6>
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a69      	ldr	r2, [pc, #420]	@ (8007b50 <UART_SetConfig+0x33c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d130      	bne.n	8007a10 <UART_SetConfig+0x1fc>
 80079ae:	4b67      	ldr	r3, [pc, #412]	@ (8007b4c <UART_SetConfig+0x338>)
 80079b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d826      	bhi.n	8007a08 <UART_SetConfig+0x1f4>
 80079ba:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <UART_SetConfig+0x1ac>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079d9 	.word	0x080079d9
 80079c4:	080079e1 	.word	0x080079e1
 80079c8:	080079e9 	.word	0x080079e9
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079f9 	.word	0x080079f9
 80079d4:	08007a01 	.word	0x08007a01
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e1ec      	b.n	8007dba <UART_SetConfig+0x5a6>
 80079e0:	2304      	movs	r3, #4
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e1e8      	b.n	8007dba <UART_SetConfig+0x5a6>
 80079e8:	2308      	movs	r3, #8
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e1e4      	b.n	8007dba <UART_SetConfig+0x5a6>
 80079f0:	2310      	movs	r3, #16
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e1e0      	b.n	8007dba <UART_SetConfig+0x5a6>
 80079f8:	2320      	movs	r3, #32
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e1dc      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a00:	2340      	movs	r3, #64	@ 0x40
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e1d8      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a08:	2380      	movs	r3, #128	@ 0x80
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e1d4      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a4f      	ldr	r2, [pc, #316]	@ (8007b54 <UART_SetConfig+0x340>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d130      	bne.n	8007a7c <UART_SetConfig+0x268>
 8007a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b4c <UART_SetConfig+0x338>)
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	2b05      	cmp	r3, #5
 8007a24:	d826      	bhi.n	8007a74 <UART_SetConfig+0x260>
 8007a26:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <UART_SetConfig+0x218>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a45 	.word	0x08007a45
 8007a30:	08007a4d 	.word	0x08007a4d
 8007a34:	08007a55 	.word	0x08007a55
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007a65 	.word	0x08007a65
 8007a40:	08007a6d 	.word	0x08007a6d
 8007a44:	2300      	movs	r3, #0
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e1b6      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a52:	e1b2      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a54:	2308      	movs	r3, #8
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e1ae      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e1aa      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a64:	2320      	movs	r3, #32
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e1a6      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a6c:	2340      	movs	r3, #64	@ 0x40
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e1a2      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a74:	2380      	movs	r3, #128	@ 0x80
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e19e      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a35      	ldr	r2, [pc, #212]	@ (8007b58 <UART_SetConfig+0x344>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d130      	bne.n	8007ae8 <UART_SetConfig+0x2d4>
 8007a86:	4b31      	ldr	r3, [pc, #196]	@ (8007b4c <UART_SetConfig+0x338>)
 8007a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	2b05      	cmp	r3, #5
 8007a90:	d826      	bhi.n	8007ae0 <UART_SetConfig+0x2cc>
 8007a92:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <UART_SetConfig+0x284>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007ab1 	.word	0x08007ab1
 8007a9c:	08007ab9 	.word	0x08007ab9
 8007aa0:	08007ac1 	.word	0x08007ac1
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ad1 	.word	0x08007ad1
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e180      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ab8:	2304      	movs	r3, #4
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e17c      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ac0:	2308      	movs	r3, #8
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e178      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e174      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ad0:	2320      	movs	r3, #32
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e170      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ad8:	2340      	movs	r3, #64	@ 0x40
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e16c      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ae0:	2380      	movs	r3, #128	@ 0x80
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e168      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1b      	ldr	r2, [pc, #108]	@ (8007b5c <UART_SetConfig+0x348>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d142      	bne.n	8007b78 <UART_SetConfig+0x364>
 8007af2:	4b16      	ldr	r3, [pc, #88]	@ (8007b4c <UART_SetConfig+0x338>)
 8007af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b05      	cmp	r3, #5
 8007afc:	d838      	bhi.n	8007b70 <UART_SetConfig+0x35c>
 8007afe:	a201      	add	r2, pc, #4	@ (adr r2, 8007b04 <UART_SetConfig+0x2f0>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b1d 	.word	0x08007b1d
 8007b08:	08007b25 	.word	0x08007b25
 8007b0c:	08007b2d 	.word	0x08007b2d
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b61 	.word	0x08007b61
 8007b18:	08007b69 	.word	0x08007b69
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e14a      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007b24:	2304      	movs	r3, #4
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e146      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007b2c:	2308      	movs	r3, #8
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e142      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007b34:	2310      	movs	r3, #16
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e13e      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007b3c:	cfff69f3 	.word	0xcfff69f3
 8007b40:	58000c00 	.word	0x58000c00
 8007b44:	11fff4ff 	.word	0x11fff4ff
 8007b48:	40011000 	.word	0x40011000
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	40004400 	.word	0x40004400
 8007b54:	40004800 	.word	0x40004800
 8007b58:	40004c00 	.word	0x40004c00
 8007b5c:	40005000 	.word	0x40005000
 8007b60:	2320      	movs	r3, #32
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e128      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007b68:	2340      	movs	r3, #64	@ 0x40
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e124      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007b70:	2380      	movs	r3, #128	@ 0x80
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e120      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4acb      	ldr	r2, [pc, #812]	@ (8007eac <UART_SetConfig+0x698>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d176      	bne.n	8007c70 <UART_SetConfig+0x45c>
 8007b82:	4bcb      	ldr	r3, [pc, #812]	@ (8007eb0 <UART_SetConfig+0x69c>)
 8007b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b8a:	2b28      	cmp	r3, #40	@ 0x28
 8007b8c:	d86c      	bhi.n	8007c68 <UART_SetConfig+0x454>
 8007b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <UART_SetConfig+0x380>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007c39 	.word	0x08007c39
 8007b98:	08007c69 	.word	0x08007c69
 8007b9c:	08007c69 	.word	0x08007c69
 8007ba0:	08007c69 	.word	0x08007c69
 8007ba4:	08007c69 	.word	0x08007c69
 8007ba8:	08007c69 	.word	0x08007c69
 8007bac:	08007c69 	.word	0x08007c69
 8007bb0:	08007c69 	.word	0x08007c69
 8007bb4:	08007c41 	.word	0x08007c41
 8007bb8:	08007c69 	.word	0x08007c69
 8007bbc:	08007c69 	.word	0x08007c69
 8007bc0:	08007c69 	.word	0x08007c69
 8007bc4:	08007c69 	.word	0x08007c69
 8007bc8:	08007c69 	.word	0x08007c69
 8007bcc:	08007c69 	.word	0x08007c69
 8007bd0:	08007c69 	.word	0x08007c69
 8007bd4:	08007c49 	.word	0x08007c49
 8007bd8:	08007c69 	.word	0x08007c69
 8007bdc:	08007c69 	.word	0x08007c69
 8007be0:	08007c69 	.word	0x08007c69
 8007be4:	08007c69 	.word	0x08007c69
 8007be8:	08007c69 	.word	0x08007c69
 8007bec:	08007c69 	.word	0x08007c69
 8007bf0:	08007c69 	.word	0x08007c69
 8007bf4:	08007c51 	.word	0x08007c51
 8007bf8:	08007c69 	.word	0x08007c69
 8007bfc:	08007c69 	.word	0x08007c69
 8007c00:	08007c69 	.word	0x08007c69
 8007c04:	08007c69 	.word	0x08007c69
 8007c08:	08007c69 	.word	0x08007c69
 8007c0c:	08007c69 	.word	0x08007c69
 8007c10:	08007c69 	.word	0x08007c69
 8007c14:	08007c59 	.word	0x08007c59
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007c69 	.word	0x08007c69
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c69 	.word	0x08007c69
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c61 	.word	0x08007c61
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e0bc      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007c40:	2304      	movs	r3, #4
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e0b8      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007c48:	2308      	movs	r3, #8
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e0b4      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007c50:	2310      	movs	r3, #16
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e0b0      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007c58:	2320      	movs	r3, #32
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e0ac      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007c60:	2340      	movs	r3, #64	@ 0x40
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e0a8      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007c68:	2380      	movs	r3, #128	@ 0x80
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e0a4      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a8f      	ldr	r2, [pc, #572]	@ (8007eb4 <UART_SetConfig+0x6a0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d130      	bne.n	8007cdc <UART_SetConfig+0x4c8>
 8007c7a:	4b8d      	ldr	r3, [pc, #564]	@ (8007eb0 <UART_SetConfig+0x69c>)
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	d826      	bhi.n	8007cd4 <UART_SetConfig+0x4c0>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <UART_SetConfig+0x478>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007ca5 	.word	0x08007ca5
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007cb5 	.word	0x08007cb5
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007ccd 	.word	0x08007ccd
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e086      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007cac:	2304      	movs	r3, #4
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e082      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e07e      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e07a      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007cc4:	2320      	movs	r3, #32
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e076      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007ccc:	2340      	movs	r3, #64	@ 0x40
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e072      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007cd4:	2380      	movs	r3, #128	@ 0x80
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e06e      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a75      	ldr	r2, [pc, #468]	@ (8007eb8 <UART_SetConfig+0x6a4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d130      	bne.n	8007d48 <UART_SetConfig+0x534>
 8007ce6:	4b72      	ldr	r3, [pc, #456]	@ (8007eb0 <UART_SetConfig+0x69c>)
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d826      	bhi.n	8007d40 <UART_SetConfig+0x52c>
 8007cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <UART_SetConfig+0x4e4>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d11 	.word	0x08007d11
 8007cfc:	08007d19 	.word	0x08007d19
 8007d00:	08007d21 	.word	0x08007d21
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d31 	.word	0x08007d31
 8007d0c:	08007d39 	.word	0x08007d39
 8007d10:	2300      	movs	r3, #0
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d16:	e050      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1e:	e04c      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d20:	2308      	movs	r3, #8
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e048      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e044      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d30:	2320      	movs	r3, #32
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e040      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d38:	2340      	movs	r3, #64	@ 0x40
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e03c      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d40:	2380      	movs	r3, #128	@ 0x80
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e038      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a5b      	ldr	r2, [pc, #364]	@ (8007ebc <UART_SetConfig+0x6a8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d130      	bne.n	8007db4 <UART_SetConfig+0x5a0>
 8007d52:	4b57      	ldr	r3, [pc, #348]	@ (8007eb0 <UART_SetConfig+0x69c>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d826      	bhi.n	8007dac <UART_SetConfig+0x598>
 8007d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d64 <UART_SetConfig+0x550>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d7d 	.word	0x08007d7d
 8007d68:	08007d85 	.word	0x08007d85
 8007d6c:	08007d8d 	.word	0x08007d8d
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007da5 	.word	0x08007da5
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d82:	e01a      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d84:	2304      	movs	r3, #4
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8a:	e016      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e012      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d94:	2310      	movs	r3, #16
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e00e      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007d9c:	2320      	movs	r3, #32
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e00a      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007da4:	2340      	movs	r3, #64	@ 0x40
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e006      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007dac:	2380      	movs	r3, #128	@ 0x80
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e002      	b.n	8007dba <UART_SetConfig+0x5a6>
 8007db4:	2380      	movs	r3, #128	@ 0x80
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8007ebc <UART_SetConfig+0x6a8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	f040 80f8 	bne.w	8007fb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	dc46      	bgt.n	8007e5c <UART_SetConfig+0x648>
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	f2c0 8082 	blt.w	8007ed8 <UART_SetConfig+0x6c4>
 8007dd4:	3b02      	subs	r3, #2
 8007dd6:	2b1e      	cmp	r3, #30
 8007dd8:	d87e      	bhi.n	8007ed8 <UART_SetConfig+0x6c4>
 8007dda:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <UART_SetConfig+0x5cc>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007e63 	.word	0x08007e63
 8007de4:	08007ed9 	.word	0x08007ed9
 8007de8:	08007e6b 	.word	0x08007e6b
 8007dec:	08007ed9 	.word	0x08007ed9
 8007df0:	08007ed9 	.word	0x08007ed9
 8007df4:	08007ed9 	.word	0x08007ed9
 8007df8:	08007e7b 	.word	0x08007e7b
 8007dfc:	08007ed9 	.word	0x08007ed9
 8007e00:	08007ed9 	.word	0x08007ed9
 8007e04:	08007ed9 	.word	0x08007ed9
 8007e08:	08007ed9 	.word	0x08007ed9
 8007e0c:	08007ed9 	.word	0x08007ed9
 8007e10:	08007ed9 	.word	0x08007ed9
 8007e14:	08007ed9 	.word	0x08007ed9
 8007e18:	08007e8b 	.word	0x08007e8b
 8007e1c:	08007ed9 	.word	0x08007ed9
 8007e20:	08007ed9 	.word	0x08007ed9
 8007e24:	08007ed9 	.word	0x08007ed9
 8007e28:	08007ed9 	.word	0x08007ed9
 8007e2c:	08007ed9 	.word	0x08007ed9
 8007e30:	08007ed9 	.word	0x08007ed9
 8007e34:	08007ed9 	.word	0x08007ed9
 8007e38:	08007ed9 	.word	0x08007ed9
 8007e3c:	08007ed9 	.word	0x08007ed9
 8007e40:	08007ed9 	.word	0x08007ed9
 8007e44:	08007ed9 	.word	0x08007ed9
 8007e48:	08007ed9 	.word	0x08007ed9
 8007e4c:	08007ed9 	.word	0x08007ed9
 8007e50:	08007ed9 	.word	0x08007ed9
 8007e54:	08007ed9 	.word	0x08007ed9
 8007e58:	08007ecb 	.word	0x08007ecb
 8007e5c:	2b40      	cmp	r3, #64	@ 0x40
 8007e5e:	d037      	beq.n	8007ed0 <UART_SetConfig+0x6bc>
 8007e60:	e03a      	b.n	8007ed8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e62:	f7fe ff09 	bl	8006c78 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e68:	e03c      	b.n	8007ee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe ff18 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e78:	e034      	b.n	8007ee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e7a:	f107 0318 	add.w	r3, r7, #24
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff f864 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e02c      	b.n	8007ee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e8a:	4b09      	ldr	r3, [pc, #36]	@ (8007eb0 <UART_SetConfig+0x69c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d016      	beq.n	8007ec4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e96:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <UART_SetConfig+0x69c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	08db      	lsrs	r3, r3, #3
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	4a07      	ldr	r2, [pc, #28]	@ (8007ec0 <UART_SetConfig+0x6ac>)
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ea8:	e01c      	b.n	8007ee4 <UART_SetConfig+0x6d0>
 8007eaa:	bf00      	nop
 8007eac:	40011400 	.word	0x40011400
 8007eb0:	58024400 	.word	0x58024400
 8007eb4:	40007800 	.word	0x40007800
 8007eb8:	40007c00 	.word	0x40007c00
 8007ebc:	58000c00 	.word	0x58000c00
 8007ec0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ec4:	4b9d      	ldr	r3, [pc, #628]	@ (800813c <UART_SetConfig+0x928>)
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e00c      	b.n	8007ee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eca:	4b9d      	ldr	r3, [pc, #628]	@ (8008140 <UART_SetConfig+0x92c>)
 8007ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ece:	e009      	b.n	8007ee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ed0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed6:	e005      	b.n	8007ee4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ee2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 81de 	beq.w	80082a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	4a94      	ldr	r2, [pc, #592]	@ (8008144 <UART_SetConfig+0x930>)
 8007ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007efe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	4613      	mov	r3, r2
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	4413      	add	r3, r2
 8007f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d305      	bcc.n	8007f1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d903      	bls.n	8007f24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f22:	e1c1      	b.n	80082a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f26:	2200      	movs	r2, #0
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	60fa      	str	r2, [r7, #12]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	4a84      	ldr	r2, [pc, #528]	@ (8008144 <UART_SetConfig+0x930>)
 8007f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2200      	movs	r2, #0
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f46:	f7f8 f9c7 	bl	80002d8 <__aeabi_uldivmod>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4610      	mov	r0, r2
 8007f50:	4619      	mov	r1, r3
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	020b      	lsls	r3, r1, #8
 8007f5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f60:	0202      	lsls	r2, r0, #8
 8007f62:	6979      	ldr	r1, [r7, #20]
 8007f64:	6849      	ldr	r1, [r1, #4]
 8007f66:	0849      	lsrs	r1, r1, #1
 8007f68:	2000      	movs	r0, #0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	eb12 0804 	adds.w	r8, r2, r4
 8007f72:	eb43 0905 	adc.w	r9, r3, r5
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	4693      	mov	fp, r2
 8007f80:	4652      	mov	r2, sl
 8007f82:	465b      	mov	r3, fp
 8007f84:	4640      	mov	r0, r8
 8007f86:	4649      	mov	r1, r9
 8007f88:	f7f8 f9a6 	bl	80002d8 <__aeabi_uldivmod>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4613      	mov	r3, r2
 8007f92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f9a:	d308      	bcc.n	8007fae <UART_SetConfig+0x79a>
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fa2:	d204      	bcs.n	8007fae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007faa:	60da      	str	r2, [r3, #12]
 8007fac:	e17c      	b.n	80082a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fb4:	e178      	b.n	80082a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fbe:	f040 80c5 	bne.w	800814c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007fc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	dc48      	bgt.n	800805c <UART_SetConfig+0x848>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	db7b      	blt.n	80080c6 <UART_SetConfig+0x8b2>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d879      	bhi.n	80080c6 <UART_SetConfig+0x8b2>
 8007fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd8 <UART_SetConfig+0x7c4>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08008063 	.word	0x08008063
 8007fdc:	0800806b 	.word	0x0800806b
 8007fe0:	080080c7 	.word	0x080080c7
 8007fe4:	080080c7 	.word	0x080080c7
 8007fe8:	08008073 	.word	0x08008073
 8007fec:	080080c7 	.word	0x080080c7
 8007ff0:	080080c7 	.word	0x080080c7
 8007ff4:	080080c7 	.word	0x080080c7
 8007ff8:	08008083 	.word	0x08008083
 8007ffc:	080080c7 	.word	0x080080c7
 8008000:	080080c7 	.word	0x080080c7
 8008004:	080080c7 	.word	0x080080c7
 8008008:	080080c7 	.word	0x080080c7
 800800c:	080080c7 	.word	0x080080c7
 8008010:	080080c7 	.word	0x080080c7
 8008014:	080080c7 	.word	0x080080c7
 8008018:	08008093 	.word	0x08008093
 800801c:	080080c7 	.word	0x080080c7
 8008020:	080080c7 	.word	0x080080c7
 8008024:	080080c7 	.word	0x080080c7
 8008028:	080080c7 	.word	0x080080c7
 800802c:	080080c7 	.word	0x080080c7
 8008030:	080080c7 	.word	0x080080c7
 8008034:	080080c7 	.word	0x080080c7
 8008038:	080080c7 	.word	0x080080c7
 800803c:	080080c7 	.word	0x080080c7
 8008040:	080080c7 	.word	0x080080c7
 8008044:	080080c7 	.word	0x080080c7
 8008048:	080080c7 	.word	0x080080c7
 800804c:	080080c7 	.word	0x080080c7
 8008050:	080080c7 	.word	0x080080c7
 8008054:	080080c7 	.word	0x080080c7
 8008058:	080080b9 	.word	0x080080b9
 800805c:	2b40      	cmp	r3, #64	@ 0x40
 800805e:	d02e      	beq.n	80080be <UART_SetConfig+0x8aa>
 8008060:	e031      	b.n	80080c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008062:	f7fc fe53 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8008066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008068:	e033      	b.n	80080d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800806a:	f7fc fe65 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 800806e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008070:	e02f      	b.n	80080d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fe14 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800807c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008080:	e027      	b.n	80080d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008082:	f107 0318 	add.w	r3, r7, #24
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe ff60 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008090:	e01f      	b.n	80080d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008092:	4b2d      	ldr	r3, [pc, #180]	@ (8008148 <UART_SetConfig+0x934>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800809e:	4b2a      	ldr	r3, [pc, #168]	@ (8008148 <UART_SetConfig+0x934>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	08db      	lsrs	r3, r3, #3
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	4a24      	ldr	r2, [pc, #144]	@ (800813c <UART_SetConfig+0x928>)
 80080aa:	fa22 f303 	lsr.w	r3, r2, r3
 80080ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080b0:	e00f      	b.n	80080d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80080b2:	4b22      	ldr	r3, [pc, #136]	@ (800813c <UART_SetConfig+0x928>)
 80080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b6:	e00c      	b.n	80080d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080b8:	4b21      	ldr	r3, [pc, #132]	@ (8008140 <UART_SetConfig+0x92c>)
 80080ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080bc:	e009      	b.n	80080d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c4:	e005      	b.n	80080d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80080d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80e7 	beq.w	80082a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080de:	4a19      	ldr	r2, [pc, #100]	@ (8008144 <UART_SetConfig+0x930>)
 80080e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ec:	005a      	lsls	r2, r3, #1
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	085b      	lsrs	r3, r3, #1
 80080f4:	441a      	add	r2, r3
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	2b0f      	cmp	r3, #15
 8008104:	d916      	bls.n	8008134 <UART_SetConfig+0x920>
 8008106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800810c:	d212      	bcs.n	8008134 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800810e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008110:	b29b      	uxth	r3, r3
 8008112:	f023 030f 	bic.w	r3, r3, #15
 8008116:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	b29b      	uxth	r3, r3
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	b29a      	uxth	r2, r3
 8008124:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008126:	4313      	orrs	r3, r2
 8008128:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008130:	60da      	str	r2, [r3, #12]
 8008132:	e0b9      	b.n	80082a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800813a:	e0b5      	b.n	80082a8 <UART_SetConfig+0xa94>
 800813c:	03d09000 	.word	0x03d09000
 8008140:	003d0900 	.word	0x003d0900
 8008144:	080087b4 	.word	0x080087b4
 8008148:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800814c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008150:	2b20      	cmp	r3, #32
 8008152:	dc49      	bgt.n	80081e8 <UART_SetConfig+0x9d4>
 8008154:	2b00      	cmp	r3, #0
 8008156:	db7c      	blt.n	8008252 <UART_SetConfig+0xa3e>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d87a      	bhi.n	8008252 <UART_SetConfig+0xa3e>
 800815c:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <UART_SetConfig+0x950>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	080081ef 	.word	0x080081ef
 8008168:	080081f7 	.word	0x080081f7
 800816c:	08008253 	.word	0x08008253
 8008170:	08008253 	.word	0x08008253
 8008174:	080081ff 	.word	0x080081ff
 8008178:	08008253 	.word	0x08008253
 800817c:	08008253 	.word	0x08008253
 8008180:	08008253 	.word	0x08008253
 8008184:	0800820f 	.word	0x0800820f
 8008188:	08008253 	.word	0x08008253
 800818c:	08008253 	.word	0x08008253
 8008190:	08008253 	.word	0x08008253
 8008194:	08008253 	.word	0x08008253
 8008198:	08008253 	.word	0x08008253
 800819c:	08008253 	.word	0x08008253
 80081a0:	08008253 	.word	0x08008253
 80081a4:	0800821f 	.word	0x0800821f
 80081a8:	08008253 	.word	0x08008253
 80081ac:	08008253 	.word	0x08008253
 80081b0:	08008253 	.word	0x08008253
 80081b4:	08008253 	.word	0x08008253
 80081b8:	08008253 	.word	0x08008253
 80081bc:	08008253 	.word	0x08008253
 80081c0:	08008253 	.word	0x08008253
 80081c4:	08008253 	.word	0x08008253
 80081c8:	08008253 	.word	0x08008253
 80081cc:	08008253 	.word	0x08008253
 80081d0:	08008253 	.word	0x08008253
 80081d4:	08008253 	.word	0x08008253
 80081d8:	08008253 	.word	0x08008253
 80081dc:	08008253 	.word	0x08008253
 80081e0:	08008253 	.word	0x08008253
 80081e4:	08008245 	.word	0x08008245
 80081e8:	2b40      	cmp	r3, #64	@ 0x40
 80081ea:	d02e      	beq.n	800824a <UART_SetConfig+0xa36>
 80081ec:	e031      	b.n	8008252 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081ee:	f7fc fd8d 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 80081f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081f4:	e033      	b.n	800825e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081f6:	f7fc fd9f 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 80081fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081fc:	e02f      	b.n	800825e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe fd4e 	bl	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800820c:	e027      	b.n	800825e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800820e:	f107 0318 	add.w	r3, r7, #24
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fe9a 	bl	8006f4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821c:	e01f      	b.n	800825e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800821e:	4b2d      	ldr	r3, [pc, #180]	@ (80082d4 <UART_SetConfig+0xac0>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800822a:	4b2a      	ldr	r3, [pc, #168]	@ (80082d4 <UART_SetConfig+0xac0>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	08db      	lsrs	r3, r3, #3
 8008230:	f003 0303 	and.w	r3, r3, #3
 8008234:	4a28      	ldr	r2, [pc, #160]	@ (80082d8 <UART_SetConfig+0xac4>)
 8008236:	fa22 f303 	lsr.w	r3, r2, r3
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800823c:	e00f      	b.n	800825e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800823e:	4b26      	ldr	r3, [pc, #152]	@ (80082d8 <UART_SetConfig+0xac4>)
 8008240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008242:	e00c      	b.n	800825e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008244:	4b25      	ldr	r3, [pc, #148]	@ (80082dc <UART_SetConfig+0xac8>)
 8008246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008248:	e009      	b.n	800825e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800824a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008250:	e005      	b.n	800825e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800825c:	bf00      	nop
    }

    if (pclk != 0U)
 800825e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d021      	beq.n	80082a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008268:	4a1d      	ldr	r2, [pc, #116]	@ (80082e0 <UART_SetConfig+0xacc>)
 800826a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800826e:	461a      	mov	r2, r3
 8008270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008272:	fbb3 f2f2 	udiv	r2, r3, r2
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	085b      	lsrs	r3, r3, #1
 800827c:	441a      	add	r2, r3
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	fbb2 f3f3 	udiv	r3, r2, r3
 8008286:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	2b0f      	cmp	r3, #15
 800828c:	d909      	bls.n	80082a2 <UART_SetConfig+0xa8e>
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008294:	d205      	bcs.n	80082a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	b29a      	uxth	r2, r3
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60da      	str	r2, [r3, #12]
 80082a0:	e002      	b.n	80082a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2200      	movs	r2, #0
 80082bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2200      	movs	r2, #0
 80082c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3748      	adds	r7, #72	@ 0x48
 80082cc:	46bd      	mov	sp, r7
 80082ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082d2:	bf00      	nop
 80082d4:	58024400 	.word	0x58024400
 80082d8:	03d09000 	.word	0x03d09000
 80082dc:	003d0900 	.word	0x003d0900
 80082e0:	080087b4 	.word	0x080087b4

080082e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008356:	f003 0304 	and.w	r3, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01a      	beq.n	80083fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083e2:	d10a      	bne.n	80083fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	605a      	str	r2, [r3, #4]
  }
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b098      	sub	sp, #96	@ 0x60
 800842c:	af02      	add	r7, sp, #8
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008438:	f7f8 fe86 	bl	8001148 <HAL_GetTick>
 800843c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b08      	cmp	r3, #8
 800844a:	d12f      	bne.n	80084ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800844c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008454:	2200      	movs	r2, #0
 8008456:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f88e 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d022      	beq.n	80084ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800847a:	653b      	str	r3, [r7, #80]	@ 0x50
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008484:	647b      	str	r3, [r7, #68]	@ 0x44
 8008486:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800848a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e6      	bne.n	8008466 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e063      	b.n	8008574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d149      	bne.n	800854e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084c2:	2200      	movs	r2, #0
 80084c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f857 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d03c      	beq.n	800854e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	623b      	str	r3, [r7, #32]
   return(result);
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80084f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e6      	bne.n	80084d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	60fb      	str	r3, [r7, #12]
   return(result);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f023 0301 	bic.w	r3, r3, #1
 800851c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008526:	61fa      	str	r2, [r7, #28]
 8008528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	69b9      	ldr	r1, [r7, #24]
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	617b      	str	r3, [r7, #20]
   return(result);
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e5      	bne.n	8008506 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e012      	b.n	8008574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3758      	adds	r7, #88	@ 0x58
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858c:	e04f      	b.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d04b      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008596:	f7f8 fdd7 	bl	8001148 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d302      	bcc.n	80085ac <UART_WaitOnFlagUntilTimeout+0x30>
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e04e      	b.n	800864e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d037      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b80      	cmp	r3, #128	@ 0x80
 80085c2:	d034      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b40      	cmp	r3, #64	@ 0x40
 80085c8:	d031      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d110      	bne.n	80085fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2208      	movs	r2, #8
 80085de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f839 	bl	8008658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2208      	movs	r2, #8
 80085ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e029      	b.n	800864e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008608:	d111      	bne.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f81f 	bl	8008658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e00f      	b.n	800864e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69da      	ldr	r2, [r3, #28]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4013      	ands	r3, r2
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	bf0c      	ite	eq
 800863e:	2301      	moveq	r3, #1
 8008640:	2300      	movne	r3, #0
 8008642:	b2db      	uxtb	r3, r3
 8008644:	461a      	mov	r2, r3
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	429a      	cmp	r2, r3
 800864a:	d0a0      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b095      	sub	sp, #84	@ 0x54
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800867e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008680:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e6      	bne.n	8008660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	4b1e      	ldr	r3, [pc, #120]	@ (8008720 <UART_EndRxTransfer+0xc8>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e5      	bne.n	8008692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d118      	bne.n	8008700 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	60bb      	str	r3, [r7, #8]
   return(result);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f023 0310 	bic.w	r3, r3, #16
 80086e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6979      	ldr	r1, [r7, #20]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	613b      	str	r3, [r7, #16]
   return(result);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e6      	bne.n	80086ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008714:	bf00      	nop
 8008716:	3754      	adds	r7, #84	@ 0x54
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	effffffe 	.word	0xeffffffe

08008724 <memset>:
 8008724:	4402      	add	r2, r0
 8008726:	4603      	mov	r3, r0
 8008728:	4293      	cmp	r3, r2
 800872a:	d100      	bne.n	800872e <memset+0xa>
 800872c:	4770      	bx	lr
 800872e:	f803 1b01 	strb.w	r1, [r3], #1
 8008732:	e7f9      	b.n	8008728 <memset+0x4>

08008734 <__libc_init_array>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	4d0d      	ldr	r5, [pc, #52]	@ (800876c <__libc_init_array+0x38>)
 8008738:	4c0d      	ldr	r4, [pc, #52]	@ (8008770 <__libc_init_array+0x3c>)
 800873a:	1b64      	subs	r4, r4, r5
 800873c:	10a4      	asrs	r4, r4, #2
 800873e:	2600      	movs	r6, #0
 8008740:	42a6      	cmp	r6, r4
 8008742:	d109      	bne.n	8008758 <__libc_init_array+0x24>
 8008744:	4d0b      	ldr	r5, [pc, #44]	@ (8008774 <__libc_init_array+0x40>)
 8008746:	4c0c      	ldr	r4, [pc, #48]	@ (8008778 <__libc_init_array+0x44>)
 8008748:	f000 f818 	bl	800877c <_init>
 800874c:	1b64      	subs	r4, r4, r5
 800874e:	10a4      	asrs	r4, r4, #2
 8008750:	2600      	movs	r6, #0
 8008752:	42a6      	cmp	r6, r4
 8008754:	d105      	bne.n	8008762 <__libc_init_array+0x2e>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	f855 3b04 	ldr.w	r3, [r5], #4
 800875c:	4798      	blx	r3
 800875e:	3601      	adds	r6, #1
 8008760:	e7ee      	b.n	8008740 <__libc_init_array+0xc>
 8008762:	f855 3b04 	ldr.w	r3, [r5], #4
 8008766:	4798      	blx	r3
 8008768:	3601      	adds	r6, #1
 800876a:	e7f2      	b.n	8008752 <__libc_init_array+0x1e>
 800876c:	080087d4 	.word	0x080087d4
 8008770:	080087d4 	.word	0x080087d4
 8008774:	080087d4 	.word	0x080087d4
 8008778:	080087d8 	.word	0x080087d8

0800877c <_init>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	bf00      	nop
 8008780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008782:	bc08      	pop	{r3}
 8008784:	469e      	mov	lr, r3
 8008786:	4770      	bx	lr

08008788 <_fini>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr

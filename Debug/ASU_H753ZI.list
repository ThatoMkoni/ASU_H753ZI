
ASU_H753ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000850c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080087a4  080087a4  000097a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087e4  080087e4  000097e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000024  24000000  080087ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000049c  24000024  08008810  0000a024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004c0  08008810  0000a4c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001226a  00000000  00000000  0000a052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022cf  00000000  00000000  0001c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c48  00000000  00000000  0001e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000097b  00000000  00000000  0001f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036b7c  00000000  00000000  0001fb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011d52  00000000  00000000  000566cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015be85  00000000  00000000  00068421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c42a6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032cc  00000000  00000000  001c42ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001c75b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800878c 	.word	0x0800878c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	0800878c 	.word	0x0800878c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ProcessAudio>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void ProcessAudio(int16_t *INPUT_BUFFER, int16_t *OUTPUT_BUFFER, uint16_t OUTPUT_SIZE){
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < OUTPUT_SIZE; i++) {
 8000612:	2300      	movs	r3, #0
 8000614:	82fb      	strh	r3, [r7, #22]
 8000616:	e00d      	b.n	8000634 <ProcessAudio+0x30>
        OUTPUT_BUFFER[i] = INPUT_BUFFER[2 * i];   // pick left channel only
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	441a      	add	r2, r3
 8000620:	8afb      	ldrh	r3, [r7, #22]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	440b      	add	r3, r1
 8000628:	f9b2 2000 	ldrsh.w	r2, [r2]
 800062c:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < OUTPUT_SIZE; i++) {
 800062e:	8afb      	ldrh	r3, [r7, #22]
 8000630:	3301      	adds	r3, #1
 8000632:	82fb      	strh	r3, [r7, #22]
 8000634:	8afa      	ldrh	r2, [r7, #22]
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3ed      	bcc.n	8000618 <ProcessAudio+0x14>
    }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	371c      	adds	r7, #28
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fcfc 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f858 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f91a 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 800065c:	f000 f8f8 	bl	8000850 <MX_DMA_Init>
  MX_I2S1_Init();
 8000660:	f000 f8c4 	bl	80007ec <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)I2S_DMA_BUFFER, I2S_DMA_BUFFER_SIZE);
 8000664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000668:	4920      	ldr	r1, [pc, #128]	@ (80006ec <main+0xa0>)
 800066a:	4821      	ldr	r0, [pc, #132]	@ (80006f0 <main+0xa4>)
 800066c:	f003 fa60 	bl	8003b30 <HAL_I2S_Receive_DMA>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fbbb 	bl	8000dec <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <main+0xa8>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <main+0xa8>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <main+0xa8>)
 8000686:	2200      	movs	r2, #0
 8000688:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <main+0xa8>)
 800068c:	2200      	movs	r2, #0
 800068e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <main+0xa8>)
 8000692:	2200      	movs	r2, #0
 8000694:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000696:	4917      	ldr	r1, [pc, #92]	@ (80006f4 <main+0xa8>)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fc1d 	bl	8000ed8 <BSP_COM_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f9b6 	bl	8000a14 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(Full_Cplt_Flag == 1){
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <main+0xac>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d10d      	bne.n	80006ce <main+0x82>
	 		  ProcessAudio((int16_t *)inpBuffPtr, (int16_t *)audioBuffPtr, AUDIO_BUFFER_SIZE / 2);
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <main+0xb0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a12      	ldr	r2, [pc, #72]	@ (8000700 <main+0xb4>)
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	2240      	movs	r2, #64	@ 0x40
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa1 	bl	8000604 <ProcessAudio>
	 		  Full_Cplt_Flag = 0;
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <main+0xac>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
	 		  Half_Cplt_Flag = 0;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <main+0xb8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	  }

	  if(Half_Cplt_Flag == 1){
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <main+0xb8>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d1e7      	bne.n	80006a8 <main+0x5c>
		  ProcessAudio((int16_t *)inpBuffPtr, (int16_t *)audioBuffPtr, AUDIO_BUFFER_SIZE / 2);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <main+0xb0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <main+0xb4>)
 80006de:	6811      	ldr	r1, [r2, #0]
 80006e0:	2240      	movs	r2, #64	@ 0x40
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff8e 	bl	8000604 <ProcessAudio>
	  if(Full_Cplt_Flag == 1){
 80006e8:	e7de      	b.n	80006a8 <main+0x5c>
 80006ea:	bf00      	nop
 80006ec:	2400011c 	.word	0x2400011c
 80006f0:	24000050 	.word	0x24000050
 80006f4:	24000040 	.word	0x24000040
 80006f8:	24000421 	.word	0x24000421
 80006fc:	24000424 	.word	0x24000424
 8000700:	24000000 	.word	0x24000000
 8000704:	24000420 	.word	0x24000420

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	@ 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000712:	224c      	movs	r2, #76	@ 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f008 f80c 	bl	8008734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f008 f806 	bl	8008734 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000728:	2002      	movs	r0, #2
 800072a:	f003 fb03 	bl	8003d34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <SystemClock_Config+0xd8>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	4a2a      	ldr	r2, [pc, #168]	@ (80007e0 <SystemClock_Config+0xd8>)
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <SystemClock_Config+0xd8>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <SystemClock_Config+0xdc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a24      	ldr	r2, [pc, #144]	@ (80007e4 <SystemClock_Config+0xdc>)
 8000752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <SystemClock_Config+0xdc>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000764:	bf00      	nop
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <SystemClock_Config+0xdc>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000772:	d1f8      	bne.n	8000766 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <SystemClock_Config+0xe0>)
 8000776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000778:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <SystemClock_Config+0xe0>)
 800077a:	f023 0303 	bic.w	r3, r3, #3
 800077e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000784:	2301      	movs	r3, #1
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078c:	2300      	movs	r3, #0
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fb07 	bl	8003da8 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a0:	f000 f938 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	233f      	movs	r3, #63	@ 0x3f
 80007a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2101      	movs	r1, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 ff47 	bl	800465c <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007d4:	f000 f91e 	bl	8000a14 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3770      	adds	r7, #112	@ 0x70
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	58000400 	.word	0x58000400
 80007e4:	58024800 	.word	0x58024800
 80007e8:	58024400 	.word	0x58024400

080007ec <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_I2S1_Init+0x5c>)
 80007f2:	4a16      	ldr	r2, [pc, #88]	@ (800084c <MX_I2S1_Init+0x60>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_I2S1_Init+0x5c>)
 80007f8:	2206      	movs	r2, #6
 80007fa:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2S1_Init+0x5c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2S1_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2S1_Init+0x5c>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2S1_Init+0x5c>)
 8000810:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000814:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_I2S1_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_I2S1_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2S1_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_I2S1_Init+0x5c>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2S1_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_I2S1_Init+0x5c>)
 8000836:	f003 f859 	bl	80038ec <HAL_I2S_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 f8e8 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	24000050 	.word	0x24000050
 800084c:	40013000 	.word	0x40013000

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_DMA_Init+0x3c>)
 8000858:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800085c:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <MX_DMA_Init+0x3c>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_DMA_Init+0x3c>)
 8000868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	200b      	movs	r0, #11
 800087a:	f000 fd60 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800087e:	200b      	movs	r0, #11
 8000880:	f000 fd77 	bl	8001372 <HAL_NVIC_EnableIRQ>

}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024400 	.word	0x58024400

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b22      	ldr	r3, [pc, #136]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	4a20      	ldr	r2, [pc, #128]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f2:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_GPIO_Init+0xdc>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_GPIO_Init+0xdc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	4a19      	ldr	r2, [pc, #100]	@ (800096c <MX_GPIO_Init+0xdc>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_GPIO_Init+0xdc>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000924:	4812      	ldr	r0, [pc, #72]	@ (8000970 <MX_GPIO_Init+0xe0>)
 8000926:	f002 ffc7 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_GPIO_Init+0xe4>)
 8000940:	f002 fe0a 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000944:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_GPIO_Init+0xe0>)
 800095e:	f002 fdfb 	bl	8003558 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58020800 	.word	0x58020800

08000978 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	inpBuffPtr = &I2S_DMA_BUFFER[0];
 8000980:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000982:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000984:	601a      	str	r2, [r3, #0]
	audioBuffPtr = &AUDIO_BUFFER[0];
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_I2S_RxHalfCpltCallback+0x40>)
 8000988:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <HAL_I2S_RxHalfCpltCallback+0x44>)
 800098a:	601a      	str	r2, [r3, #0]
	Half_Cplt_Flag = 1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <HAL_I2S_RxHalfCpltCallback+0x48>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]


	counter ++;
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	b21b      	sxth	r3, r3
 8000998:	b29b      	uxth	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	b21a      	sxth	r2, r3
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 80009a2:	801a      	strh	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	24000424 	.word	0x24000424
 80009b4:	2400011c 	.word	0x2400011c
 80009b8:	24000000 	.word	0x24000000
 80009bc:	2400031c 	.word	0x2400031c
 80009c0:	24000420 	.word	0x24000420
 80009c4:	2400041e 	.word	0x2400041e

080009c8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	inpBuffPtr = &I2S_DMA_BUFFER[I2S_DMA_BUFFER_SIZE/2];
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_I2S_RxCpltCallback+0x30>)
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_I2S_RxCpltCallback+0x34>)
 80009d4:	601a      	str	r2, [r3, #0]
	audioBuffPtr = &AUDIO_BUFFER[AUDIO_BUFFER_SIZE/2];
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_I2S_RxCpltCallback+0x38>)
 80009d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <HAL_I2S_RxCpltCallback+0x3c>)
 80009da:	601a      	str	r2, [r3, #0]
	Full_Cplt_Flag = 1;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <HAL_I2S_RxCpltCallback+0x40>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]

	I2S_CURRENT_SAMPLE = I2S_DMA_BUFFER[0];
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_I2S_RxCpltCallback+0x44>)
 80009e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_I2S_RxCpltCallback+0x48>)
 80009ea:	801a      	strh	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	24000424 	.word	0x24000424
 80009fc:	2400021c 	.word	0x2400021c
 8000a00:	24000000 	.word	0x24000000
 8000a04:	2400039c 	.word	0x2400039c
 8000a08:	24000421 	.word	0x24000421
 8000a0c:	2400011c 	.word	0x2400011c
 8000a10:	2400041c 	.word	0x2400041c

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <Error_Handler+0x8>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_MspInit+0x30>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x30>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x30>)
 8000a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58024400 	.word	0x58024400

08000a54 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ba      	sub	sp, #232	@ 0xe8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	22c0      	movs	r2, #192	@ 0xc0
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f007 fe5d 	bl	8008734 <memset>
  if(hi2s->Instance==SPI1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a47      	ldr	r2, [pc, #284]	@ (8000b9c <HAL_I2S_MspInit+0x148>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	f040 8087 	bne.w	8000b94 <HAL_I2S_MspInit+0x140>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000a92:	2320      	movs	r3, #32
 8000a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000a96:	2381      	movs	r3, #129	@ 0x81
 8000a98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000aa6:	2340      	movs	r3, #64	@ 0x40
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 f959 	bl	8004d74 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8000ac8:	f7ff ffa4 	bl	8000a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000acc:	4b34      	ldr	r3, [pc, #208]	@ (8000ba0 <HAL_I2S_MspInit+0x14c>)
 8000ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ad2:	4a33      	ldr	r2, [pc, #204]	@ (8000ba0 <HAL_I2S_MspInit+0x14c>)
 8000ad4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000adc:	4b30      	ldr	r3, [pc, #192]	@ (8000ba0 <HAL_I2S_MspInit+0x14c>)
 8000ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba0 <HAL_I2S_MspInit+0x14c>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <HAL_I2S_MspInit+0x14c>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <HAL_I2S_MspInit+0x14c>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b08:	2370      	movs	r3, #112	@ 0x70
 8000b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b20:	2305      	movs	r3, #5
 8000b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481d      	ldr	r0, [pc, #116]	@ (8000ba4 <HAL_I2S_MspInit+0x150>)
 8000b2e:	f002 fd13 	bl	8003558 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b34:	4a1d      	ldr	r2, [pc, #116]	@ (8000bac <HAL_I2S_MspInit+0x158>)
 8000b36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b3a:	2225      	movs	r2, #37	@ 0x25
 8000b3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b50:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b58:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b60:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b68:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b70:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b78:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b7a:	f000 fc15 	bl	80013a8 <HAL_DMA_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_I2S_MspInit+0x134>
    {
      Error_Handler();
 8000b84:	f7ff ff46 	bl	8000a14 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b8c:	649a      	str	r2, [r3, #72]	@ 0x48
 8000b8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_I2S_MspInit+0x154>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b94:	bf00      	nop
 8000b96:	37e8      	adds	r7, #232	@ 0xe8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	58020000 	.word	0x58020000
 8000ba8:	240000a4 	.word	0x240000a4
 8000bac:	40020010 	.word	0x40020010

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c06:	f000 fa93 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <DMA1_Stream0_IRQHandler+0x10>)
 8000c16:	f001 f98d 	bl	8001f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	240000a4 	.word	0x240000a4

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c28:	4b43      	ldr	r3, [pc, #268]	@ (8000d38 <SystemInit+0x114>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2e:	4a42      	ldr	r2, [pc, #264]	@ (8000d38 <SystemInit+0x114>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c38:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <SystemInit+0x118>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 030f 	and.w	r3, r3, #15
 8000c40:	2b06      	cmp	r3, #6
 8000c42:	d807      	bhi.n	8000c54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c44:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <SystemInit+0x118>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f023 030f 	bic.w	r3, r3, #15
 8000c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d3c <SystemInit+0x118>)
 8000c4e:	f043 0307 	orr.w	r3, r3, #7
 8000c52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c54:	4b3a      	ldr	r3, [pc, #232]	@ (8000d40 <SystemInit+0x11c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a39      	ldr	r2, [pc, #228]	@ (8000d40 <SystemInit+0x11c>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c60:	4b37      	ldr	r3, [pc, #220]	@ (8000d40 <SystemInit+0x11c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c66:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <SystemInit+0x11c>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4935      	ldr	r1, [pc, #212]	@ (8000d40 <SystemInit+0x11c>)
 8000c6c:	4b35      	ldr	r3, [pc, #212]	@ (8000d44 <SystemInit+0x120>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c72:	4b32      	ldr	r3, [pc, #200]	@ (8000d3c <SystemInit+0x118>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <SystemInit+0x118>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f023 030f 	bic.w	r3, r3, #15
 8000c86:	4a2d      	ldr	r2, [pc, #180]	@ (8000d3c <SystemInit+0x118>)
 8000c88:	f043 0307 	orr.w	r3, r3, #7
 8000c8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <SystemInit+0x11c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	@ (8000d40 <SystemInit+0x11c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <SystemInit+0x11c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <SystemInit+0x11c>)
 8000ca2:	4a29      	ldr	r2, [pc, #164]	@ (8000d48 <SystemInit+0x124>)
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <SystemInit+0x11c>)
 8000ca8:	4a28      	ldr	r2, [pc, #160]	@ (8000d4c <SystemInit+0x128>)
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cac:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <SystemInit+0x11c>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	@ (8000d50 <SystemInit+0x12c>)
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <SystemInit+0x11c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cb8:	4b21      	ldr	r3, [pc, #132]	@ (8000d40 <SystemInit+0x11c>)
 8000cba:	4a25      	ldr	r2, [pc, #148]	@ (8000d50 <SystemInit+0x12c>)
 8000cbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <SystemInit+0x11c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d40 <SystemInit+0x11c>)
 8000cc6:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <SystemInit+0x12c>)
 8000cc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <SystemInit+0x11c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <SystemInit+0x11c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d40 <SystemInit+0x11c>)
 8000cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <SystemInit+0x11c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <SystemInit+0x130>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <SystemInit+0x134>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cee:	d202      	bcs.n	8000cf6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <SystemInit+0x138>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <SystemInit+0x11c>)
 8000cf8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d113      	bne.n	8000d2c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d04:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <SystemInit+0x11c>)
 8000d06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <SystemInit+0x11c>)
 8000d0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d10:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <SystemInit+0x13c>)
 8000d16:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d1a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <SystemInit+0x11c>)
 8000d1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d22:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <SystemInit+0x11c>)
 8000d24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	52002000 	.word	0x52002000
 8000d40:	58024400 	.word	0x58024400
 8000d44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d48:	02020200 	.word	0x02020200
 8000d4c:	01ff0000 	.word	0x01ff0000
 8000d50:	01010280 	.word	0x01010280
 8000d54:	5c001000 	.word	0x5c001000
 8000d58:	ffff0000 	.word	0xffff0000
 8000d5c:	51008108 	.word	0x51008108
 8000d60:	52004000 	.word	0x52004000

08000d64 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <ExitRun0Mode+0x2c>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <ExitRun0Mode+0x2c>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d74:	bf00      	nop
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <ExitRun0Mode+0x2c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f9      	beq.n	8000d76 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	58024800 	.word	0x58024800

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000dd0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d98:	f7ff ffe4 	bl	8000d64 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d9c:	f7ff ff42 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	@ (8000de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f007 fcbd 	bl	8008744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fc3f 	bl	800064c <main>
  bx  lr
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd8:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8000ddc:	080087ec 	.word	0x080087ec
  ldr r2, =_sbss
 8000de0:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8000de4:	240004c0 	.word	0x240004c0

08000de8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC3_IRQHandler>
	...

08000dec <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	@ 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d009      	beq.n	8000e14 <BSP_LED_Init+0x28>
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d006      	beq.n	8000e14 <BSP_LED_Init+0x28>
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d003      	beq.n	8000e14 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e0c:	f06f 0301 	mvn.w	r3, #1
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e12:	e055      	b.n	8000ec0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10f      	bne.n	8000e3a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	4a2a      	ldr	r2, [pc, #168]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	e021      	b.n	8000e7e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d10f      	bne.n	8000e60 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e40:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	e00e      	b.n	8000e7e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <BSP_LED_Init+0xe0>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4a13      	ldr	r2, [pc, #76]	@ (8000ed0 <BSP_LED_Init+0xe4>)
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed4 <BSP_LED_Init+0xe8>)
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	f107 0218 	add.w	r2, r7, #24
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fb58 	bl	8003558 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <BSP_LED_Init+0xe8>)
 8000eac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <BSP_LED_Init+0xe4>)
 8000eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f002 fcfc 	bl	80038b8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3730      	adds	r7, #48	@ 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	080087b4 	.word	0x080087b4
 8000ed4:	24000010 	.word	0x24000010

08000ed8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000eee:	f06f 0301 	mvn.w	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e018      	b.n	8000f28 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2294      	movs	r2, #148	@ 0x94
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <BSP_COM_Init+0x5c>)
 8000f00:	4413      	add	r3, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f84a 	bl	8000f9c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2294      	movs	r2, #148	@ 0x94
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <BSP_COM_Init+0x5c>)
 8000f12:	4413      	add	r3, r2
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f80e 	bl	8000f38 <MX_USART3_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f22:	f06f 0303 	mvn.w	r3, #3
 8000f26:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	24000428 	.word	0x24000428

08000f38 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_USART3_Init+0x60>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	220c      	movs	r2, #12
 8000f56:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	895b      	ldrh	r3, [r3, #10]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	891b      	ldrh	r3, [r3, #8]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	899b      	ldrh	r3, [r3, #12]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f84:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f006 fbf2 	bl	8007770 <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2400000c 	.word	0x2400000c

08000f9c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fa4:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000faa:	4a26      	ldr	r2, [pc, #152]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb4:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000fe0:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <COM1_MspInit+0xa8>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <COM1_MspInit+0xa8>)
 8000ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001002:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001010:	2307      	movs	r3, #7
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <COM1_MspInit+0xac>)
 800101c:	f002 fa9c 	bl	8003558 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001024:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800102a:	2307      	movs	r3, #7
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <COM1_MspInit+0xac>)
 8001036:	f002 fa8f 	bl	8003558 <HAL_GPIO_Init>
}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	@ 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	58024400 	.word	0x58024400
 8001048:	58020c00 	.word	0x58020c00

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f968 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001058:	f003 fcb6 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 800105c:	4602      	mov	r2, r0
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_Init+0x68>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	4913      	ldr	r1, [pc, #76]	@ (80010b8 <HAL_Init+0x6c>)
 800106a:	5ccb      	ldrb	r3, [r1, r3]
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_Init+0x6c>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <HAL_Init+0x70>)
 800108e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_Init+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f814 	bl	80010c4 <HAL_InitTick>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e002      	b.n	80010ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fcbb 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58024400 	.word	0x58024400
 80010b8:	080087a4 	.word	0x080087a4
 80010bc:	24000008 	.word	0x24000008
 80010c0:	24000004 	.word	0x24000004

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e021      	b.n	800111c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <HAL_InitTick+0x64>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f94d 	bl	800138e <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f917 	bl	800133e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	@ (800112c <HAL_InitTick+0x68>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000020 	.word	0x24000020
 8001128:	24000004 	.word	0x24000004
 800112c:	2400001c 	.word	0x2400001c

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	24000020 	.word	0x24000020
 8001154:	240004bc 	.word	0x240004bc

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	240004bc 	.word	0x240004bc

08001170 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetREVID+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0c1b      	lsrs	r3, r3, #16
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	5c001000 	.word	0x5c001000

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0000 	.word	0x05fa0000

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	@ (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff29 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff40 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff90 	bl	800127c <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5f 	bl	8001228 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff33 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa4 	bl	80012e4 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fed2 	bl	8001158 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e316      	b.n	80019ee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a66      	ldr	r2, [pc, #408]	@ (8001560 <HAL_DMA_Init+0x1b8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d04a      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a65      	ldr	r2, [pc, #404]	@ (8001564 <HAL_DMA_Init+0x1bc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d045      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a63      	ldr	r2, [pc, #396]	@ (8001568 <HAL_DMA_Init+0x1c0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d040      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a62      	ldr	r2, [pc, #392]	@ (800156c <HAL_DMA_Init+0x1c4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d03b      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a60      	ldr	r2, [pc, #384]	@ (8001570 <HAL_DMA_Init+0x1c8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d036      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001574 <HAL_DMA_Init+0x1cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d031      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a5d      	ldr	r2, [pc, #372]	@ (8001578 <HAL_DMA_Init+0x1d0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d02c      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a5c      	ldr	r2, [pc, #368]	@ (800157c <HAL_DMA_Init+0x1d4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d027      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a5a      	ldr	r2, [pc, #360]	@ (8001580 <HAL_DMA_Init+0x1d8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d022      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a59      	ldr	r2, [pc, #356]	@ (8001584 <HAL_DMA_Init+0x1dc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d01d      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a57      	ldr	r2, [pc, #348]	@ (8001588 <HAL_DMA_Init+0x1e0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d018      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a56      	ldr	r2, [pc, #344]	@ (800158c <HAL_DMA_Init+0x1e4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d013      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a54      	ldr	r2, [pc, #336]	@ (8001590 <HAL_DMA_Init+0x1e8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00e      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a53      	ldr	r2, [pc, #332]	@ (8001594 <HAL_DMA_Init+0x1ec>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d009      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a51      	ldr	r2, [pc, #324]	@ (8001598 <HAL_DMA_Init+0x1f0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d004      	beq.n	8001460 <HAL_DMA_Init+0xb8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a50      	ldr	r2, [pc, #320]	@ (800159c <HAL_DMA_Init+0x1f4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_DMA_Init+0xbc>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_DMA_Init+0xbe>
 8001464:	2300      	movs	r3, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 813b 	beq.w	80016e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a37      	ldr	r2, [pc, #220]	@ (8001560 <HAL_DMA_Init+0x1b8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d04a      	beq.n	800151c <HAL_DMA_Init+0x174>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a36      	ldr	r2, [pc, #216]	@ (8001564 <HAL_DMA_Init+0x1bc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d045      	beq.n	800151c <HAL_DMA_Init+0x174>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a34      	ldr	r2, [pc, #208]	@ (8001568 <HAL_DMA_Init+0x1c0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d040      	beq.n	800151c <HAL_DMA_Init+0x174>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a33      	ldr	r2, [pc, #204]	@ (800156c <HAL_DMA_Init+0x1c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d03b      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a31      	ldr	r2, [pc, #196]	@ (8001570 <HAL_DMA_Init+0x1c8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d036      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a30      	ldr	r2, [pc, #192]	@ (8001574 <HAL_DMA_Init+0x1cc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d031      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001578 <HAL_DMA_Init+0x1d0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d02c      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2d      	ldr	r2, [pc, #180]	@ (800157c <HAL_DMA_Init+0x1d4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d027      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001580 <HAL_DMA_Init+0x1d8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d022      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <HAL_DMA_Init+0x1dc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d01d      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a28      	ldr	r2, [pc, #160]	@ (8001588 <HAL_DMA_Init+0x1e0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d018      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a27      	ldr	r2, [pc, #156]	@ (800158c <HAL_DMA_Init+0x1e4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <HAL_DMA_Init+0x1e8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00e      	beq.n	800151c <HAL_DMA_Init+0x174>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a24      	ldr	r2, [pc, #144]	@ (8001594 <HAL_DMA_Init+0x1ec>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d009      	beq.n	800151c <HAL_DMA_Init+0x174>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a22      	ldr	r2, [pc, #136]	@ (8001598 <HAL_DMA_Init+0x1f0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d004      	beq.n	800151c <HAL_DMA_Init+0x174>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a21      	ldr	r2, [pc, #132]	@ (800159c <HAL_DMA_Init+0x1f4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d108      	bne.n	800152e <HAL_DMA_Init+0x186>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e007      	b.n	800153e <HAL_DMA_Init+0x196>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0201 	bic.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800153e:	e02f      	b.n	80015a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001540:	f7ff fe0a 	bl	8001158 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b05      	cmp	r3, #5
 800154c:	d928      	bls.n	80015a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2220      	movs	r2, #32
 8001552:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e246      	b.n	80019ee <HAL_DMA_Init+0x646>
 8001560:	40020010 	.word	0x40020010
 8001564:	40020028 	.word	0x40020028
 8001568:	40020040 	.word	0x40020040
 800156c:	40020058 	.word	0x40020058
 8001570:	40020070 	.word	0x40020070
 8001574:	40020088 	.word	0x40020088
 8001578:	400200a0 	.word	0x400200a0
 800157c:	400200b8 	.word	0x400200b8
 8001580:	40020410 	.word	0x40020410
 8001584:	40020428 	.word	0x40020428
 8001588:	40020440 	.word	0x40020440
 800158c:	40020458 	.word	0x40020458
 8001590:	40020470 	.word	0x40020470
 8001594:	40020488 	.word	0x40020488
 8001598:	400204a0 	.word	0x400204a0
 800159c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1c8      	bne.n	8001540 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4b83      	ldr	r3, [pc, #524]	@ (80017c8 <HAL_DMA_Init+0x420>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	4313      	orrs	r3, r2
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001604:	4b71      	ldr	r3, [pc, #452]	@ (80017cc <HAL_DMA_Init+0x424>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b71      	ldr	r3, [pc, #452]	@ (80017d0 <HAL_DMA_Init+0x428>)
 800160a:	4013      	ands	r3, r2
 800160c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001610:	d328      	bcc.n	8001664 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b28      	cmp	r3, #40	@ 0x28
 8001618:	d903      	bls.n	8001622 <HAL_DMA_Init+0x27a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001620:	d917      	bls.n	8001652 <HAL_DMA_Init+0x2aa>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b3e      	cmp	r3, #62	@ 0x3e
 8001628:	d903      	bls.n	8001632 <HAL_DMA_Init+0x28a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b42      	cmp	r3, #66	@ 0x42
 8001630:	d90f      	bls.n	8001652 <HAL_DMA_Init+0x2aa>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b46      	cmp	r3, #70	@ 0x46
 8001638:	d903      	bls.n	8001642 <HAL_DMA_Init+0x29a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b48      	cmp	r3, #72	@ 0x48
 8001640:	d907      	bls.n	8001652 <HAL_DMA_Init+0x2aa>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b4e      	cmp	r3, #78	@ 0x4e
 8001648:	d905      	bls.n	8001656 <HAL_DMA_Init+0x2ae>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b52      	cmp	r3, #82	@ 0x52
 8001650:	d801      	bhi.n	8001656 <HAL_DMA_Init+0x2ae>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_DMA_Init+0x2b0>
 8001656:	2300      	movs	r3, #0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001662:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f023 0307 	bic.w	r3, r3, #7
 800167a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4313      	orrs	r3, r2
 8001684:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	2b04      	cmp	r3, #4
 800168c:	d117      	bne.n	80016be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4313      	orrs	r3, r2
 8001696:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00e      	beq.n	80016be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 fdcf 	bl	8003244 <DMA_CheckFifoParam>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2240      	movs	r2, #64	@ 0x40
 80016b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e197      	b.n	80019ee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f001 fd0a 	bl	80030e0 <DMA_CalcBaseAndBitshift>
 80016cc:	4603      	mov	r3, r0
 80016ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	223f      	movs	r2, #63	@ 0x3f
 80016da:	409a      	lsls	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e0cd      	b.n	800187e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a3b      	ldr	r2, [pc, #236]	@ (80017d4 <HAL_DMA_Init+0x42c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <HAL_DMA_Init+0x38a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a39      	ldr	r2, [pc, #228]	@ (80017d8 <HAL_DMA_Init+0x430>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01d      	beq.n	8001732 <HAL_DMA_Init+0x38a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a38      	ldr	r2, [pc, #224]	@ (80017dc <HAL_DMA_Init+0x434>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d018      	beq.n	8001732 <HAL_DMA_Init+0x38a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a36      	ldr	r2, [pc, #216]	@ (80017e0 <HAL_DMA_Init+0x438>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_DMA_Init+0x38a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a35      	ldr	r2, [pc, #212]	@ (80017e4 <HAL_DMA_Init+0x43c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00e      	beq.n	8001732 <HAL_DMA_Init+0x38a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a33      	ldr	r2, [pc, #204]	@ (80017e8 <HAL_DMA_Init+0x440>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d009      	beq.n	8001732 <HAL_DMA_Init+0x38a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a32      	ldr	r2, [pc, #200]	@ (80017ec <HAL_DMA_Init+0x444>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d004      	beq.n	8001732 <HAL_DMA_Init+0x38a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a30      	ldr	r2, [pc, #192]	@ (80017f0 <HAL_DMA_Init+0x448>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_DMA_Init+0x38e>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_DMA_Init+0x390>
 8001736:	2300      	movs	r3, #0
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8097 	beq.w	800186c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a24      	ldr	r2, [pc, #144]	@ (80017d4 <HAL_DMA_Init+0x42c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d021      	beq.n	800178c <HAL_DMA_Init+0x3e4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a22      	ldr	r2, [pc, #136]	@ (80017d8 <HAL_DMA_Init+0x430>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01c      	beq.n	800178c <HAL_DMA_Init+0x3e4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <HAL_DMA_Init+0x434>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d017      	beq.n	800178c <HAL_DMA_Init+0x3e4>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <HAL_DMA_Init+0x438>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d012      	beq.n	800178c <HAL_DMA_Init+0x3e4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1e      	ldr	r2, [pc, #120]	@ (80017e4 <HAL_DMA_Init+0x43c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_DMA_Init+0x3e4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <HAL_DMA_Init+0x440>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d008      	beq.n	800178c <HAL_DMA_Init+0x3e4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <HAL_DMA_Init+0x444>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d003      	beq.n	800178c <HAL_DMA_Init+0x3e4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_DMA_Init+0x448>)
 800178a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <HAL_DMA_Init+0x44c>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b40      	cmp	r3, #64	@ 0x40
 80017b2:	d021      	beq.n	80017f8 <HAL_DMA_Init+0x450>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b80      	cmp	r3, #128	@ 0x80
 80017ba:	d102      	bne.n	80017c2 <HAL_DMA_Init+0x41a>
 80017bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017c0:	e01b      	b.n	80017fa <HAL_DMA_Init+0x452>
 80017c2:	2300      	movs	r3, #0
 80017c4:	e019      	b.n	80017fa <HAL_DMA_Init+0x452>
 80017c6:	bf00      	nop
 80017c8:	fe10803f 	.word	0xfe10803f
 80017cc:	5c001000 	.word	0x5c001000
 80017d0:	ffff0000 	.word	0xffff0000
 80017d4:	58025408 	.word	0x58025408
 80017d8:	5802541c 	.word	0x5802541c
 80017dc:	58025430 	.word	0x58025430
 80017e0:	58025444 	.word	0x58025444
 80017e4:	58025458 	.word	0x58025458
 80017e8:	5802546c 	.word	0x5802546c
 80017ec:	58025480 	.word	0x58025480
 80017f0:	58025494 	.word	0x58025494
 80017f4:	fffe000f 	.word	0xfffe000f
 80017f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68d2      	ldr	r2, [r2, #12]
 80017fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001800:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001808:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001818:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001828:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b6e      	ldr	r3, [pc, #440]	@ (80019f8 <HAL_DMA_Init+0x650>)
 8001840:	4413      	add	r3, r2
 8001842:	4a6e      	ldr	r2, [pc, #440]	@ (80019fc <HAL_DMA_Init+0x654>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	009a      	lsls	r2, r3, #2
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f001 fc45 	bl	80030e0 <DMA_CalcBaseAndBitshift>
 8001856:	4603      	mov	r3, r0
 8001858:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2201      	movs	r2, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	e008      	b.n	800187e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2240      	movs	r2, #64	@ 0x40
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0b7      	b.n	80019ee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a5f      	ldr	r2, [pc, #380]	@ (8001a00 <HAL_DMA_Init+0x658>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d072      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5d      	ldr	r2, [pc, #372]	@ (8001a04 <HAL_DMA_Init+0x65c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d06d      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a5c      	ldr	r2, [pc, #368]	@ (8001a08 <HAL_DMA_Init+0x660>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d068      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a5a      	ldr	r2, [pc, #360]	@ (8001a0c <HAL_DMA_Init+0x664>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d063      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a59      	ldr	r2, [pc, #356]	@ (8001a10 <HAL_DMA_Init+0x668>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a57      	ldr	r2, [pc, #348]	@ (8001a14 <HAL_DMA_Init+0x66c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d059      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a56      	ldr	r2, [pc, #344]	@ (8001a18 <HAL_DMA_Init+0x670>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d054      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a54      	ldr	r2, [pc, #336]	@ (8001a1c <HAL_DMA_Init+0x674>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d04f      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a53      	ldr	r2, [pc, #332]	@ (8001a20 <HAL_DMA_Init+0x678>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d04a      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a51      	ldr	r2, [pc, #324]	@ (8001a24 <HAL_DMA_Init+0x67c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d045      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_DMA_Init+0x680>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d040      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a4e      	ldr	r2, [pc, #312]	@ (8001a2c <HAL_DMA_Init+0x684>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d03b      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001a30 <HAL_DMA_Init+0x688>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d036      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a4b      	ldr	r2, [pc, #300]	@ (8001a34 <HAL_DMA_Init+0x68c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d031      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a38 <HAL_DMA_Init+0x690>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d02c      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a48      	ldr	r2, [pc, #288]	@ (8001a3c <HAL_DMA_Init+0x694>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d027      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a47      	ldr	r2, [pc, #284]	@ (8001a40 <HAL_DMA_Init+0x698>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a45      	ldr	r2, [pc, #276]	@ (8001a44 <HAL_DMA_Init+0x69c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01d      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a44      	ldr	r2, [pc, #272]	@ (8001a48 <HAL_DMA_Init+0x6a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d018      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a42      	ldr	r2, [pc, #264]	@ (8001a4c <HAL_DMA_Init+0x6a4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a41      	ldr	r2, [pc, #260]	@ (8001a50 <HAL_DMA_Init+0x6a8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00e      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3f      	ldr	r2, [pc, #252]	@ (8001a54 <HAL_DMA_Init+0x6ac>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a58 <HAL_DMA_Init+0x6b0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_DMA_Init+0x5c6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a3c      	ldr	r2, [pc, #240]	@ (8001a5c <HAL_DMA_Init+0x6b4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_DMA_Init+0x5ca>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_DMA_Init+0x5cc>
 8001972:	2300      	movs	r3, #0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d032      	beq.n	80019de <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f001 fcdf 	bl	800333c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b80      	cmp	r3, #128	@ 0x80
 8001984:	d102      	bne.n	800198c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d010      	beq.n	80019cc <HAL_DMA_Init+0x624>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d80c      	bhi.n	80019cc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f001 fd5c 	bl	8003470 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e008      	b.n	80019de <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	a7fdabf8 	.word	0xa7fdabf8
 80019fc:	cccccccd 	.word	0xcccccccd
 8001a00:	40020010 	.word	0x40020010
 8001a04:	40020028 	.word	0x40020028
 8001a08:	40020040 	.word	0x40020040
 8001a0c:	40020058 	.word	0x40020058
 8001a10:	40020070 	.word	0x40020070
 8001a14:	40020088 	.word	0x40020088
 8001a18:	400200a0 	.word	0x400200a0
 8001a1c:	400200b8 	.word	0x400200b8
 8001a20:	40020410 	.word	0x40020410
 8001a24:	40020428 	.word	0x40020428
 8001a28:	40020440 	.word	0x40020440
 8001a2c:	40020458 	.word	0x40020458
 8001a30:	40020470 	.word	0x40020470
 8001a34:	40020488 	.word	0x40020488
 8001a38:	400204a0 	.word	0x400204a0
 8001a3c:	400204b8 	.word	0x400204b8
 8001a40:	58025408 	.word	0x58025408
 8001a44:	5802541c 	.word	0x5802541c
 8001a48:	58025430 	.word	0x58025430
 8001a4c:	58025444 	.word	0x58025444
 8001a50:	58025458 	.word	0x58025458
 8001a54:	5802546c 	.word	0x5802546c
 8001a58:	58025480 	.word	0x58025480
 8001a5c:	58025494 	.word	0x58025494

08001a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e226      	b.n	8001eca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA_Start_IT+0x2a>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e21f      	b.n	8001eca <HAL_DMA_Start_IT+0x46a>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	f040 820a 	bne.w	8001eb4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a68      	ldr	r2, [pc, #416]	@ (8001c54 <HAL_DMA_Start_IT+0x1f4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d04a      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a66      	ldr	r2, [pc, #408]	@ (8001c58 <HAL_DMA_Start_IT+0x1f8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d045      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a65      	ldr	r2, [pc, #404]	@ (8001c5c <HAL_DMA_Start_IT+0x1fc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d040      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a63      	ldr	r2, [pc, #396]	@ (8001c60 <HAL_DMA_Start_IT+0x200>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d03b      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a62      	ldr	r2, [pc, #392]	@ (8001c64 <HAL_DMA_Start_IT+0x204>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d036      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a60      	ldr	r2, [pc, #384]	@ (8001c68 <HAL_DMA_Start_IT+0x208>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d031      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5f      	ldr	r2, [pc, #380]	@ (8001c6c <HAL_DMA_Start_IT+0x20c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d02c      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c70 <HAL_DMA_Start_IT+0x210>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d027      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5c      	ldr	r2, [pc, #368]	@ (8001c74 <HAL_DMA_Start_IT+0x214>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d022      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001c78 <HAL_DMA_Start_IT+0x218>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01d      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a59      	ldr	r2, [pc, #356]	@ (8001c7c <HAL_DMA_Start_IT+0x21c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d018      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a57      	ldr	r2, [pc, #348]	@ (8001c80 <HAL_DMA_Start_IT+0x220>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a56      	ldr	r2, [pc, #344]	@ (8001c84 <HAL_DMA_Start_IT+0x224>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00e      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a54      	ldr	r2, [pc, #336]	@ (8001c88 <HAL_DMA_Start_IT+0x228>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d009      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a53      	ldr	r2, [pc, #332]	@ (8001c8c <HAL_DMA_Start_IT+0x22c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d004      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a51      	ldr	r2, [pc, #324]	@ (8001c90 <HAL_DMA_Start_IT+0x230>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d108      	bne.n	8001b60 <HAL_DMA_Start_IT+0x100>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e007      	b.n	8001b70 <HAL_DMA_Start_IT+0x110>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f001 f906 	bl	8002d88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a34      	ldr	r2, [pc, #208]	@ (8001c54 <HAL_DMA_Start_IT+0x1f4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d04a      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a33      	ldr	r2, [pc, #204]	@ (8001c58 <HAL_DMA_Start_IT+0x1f8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d045      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a31      	ldr	r2, [pc, #196]	@ (8001c5c <HAL_DMA_Start_IT+0x1fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d040      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a30      	ldr	r2, [pc, #192]	@ (8001c60 <HAL_DMA_Start_IT+0x200>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d03b      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <HAL_DMA_Start_IT+0x204>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d036      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <HAL_DMA_Start_IT+0x208>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d031      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <HAL_DMA_Start_IT+0x20c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d02c      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c70 <HAL_DMA_Start_IT+0x210>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d027      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <HAL_DMA_Start_IT+0x214>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d022      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_DMA_Start_IT+0x218>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d01d      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <HAL_DMA_Start_IT+0x21c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d018      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a24      	ldr	r2, [pc, #144]	@ (8001c80 <HAL_DMA_Start_IT+0x220>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <HAL_DMA_Start_IT+0x224>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00e      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_DMA_Start_IT+0x228>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_DMA_Start_IT+0x22c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_DMA_Start_IT+0x230>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA_Start_IT+0x1c0>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_DMA_Start_IT+0x1c2>
 8001c20:	2300      	movs	r3, #0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 021e 	bic.w	r2, r3, #30
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0216 	orr.w	r2, r2, #22
 8001c38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d03e      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0208 	orr.w	r2, r2, #8
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e035      	b.n	8001cc0 <HAL_DMA_Start_IT+0x260>
 8001c54:	40020010 	.word	0x40020010
 8001c58:	40020028 	.word	0x40020028
 8001c5c:	40020040 	.word	0x40020040
 8001c60:	40020058 	.word	0x40020058
 8001c64:	40020070 	.word	0x40020070
 8001c68:	40020088 	.word	0x40020088
 8001c6c:	400200a0 	.word	0x400200a0
 8001c70:	400200b8 	.word	0x400200b8
 8001c74:	40020410 	.word	0x40020410
 8001c78:	40020428 	.word	0x40020428
 8001c7c:	40020440 	.word	0x40020440
 8001c80:	40020458 	.word	0x40020458
 8001c84:	40020470 	.word	0x40020470
 8001c88:	40020488 	.word	0x40020488
 8001c8c:	400204a0 	.word	0x400204a0
 8001c90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 020e 	bic.w	r2, r3, #14
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 020a 	orr.w	r2, r2, #10
 8001ca6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0204 	orr.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a83      	ldr	r2, [pc, #524]	@ (8001ed4 <HAL_DMA_Start_IT+0x474>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d072      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a82      	ldr	r2, [pc, #520]	@ (8001ed8 <HAL_DMA_Start_IT+0x478>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d06d      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a80      	ldr	r2, [pc, #512]	@ (8001edc <HAL_DMA_Start_IT+0x47c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d068      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7f      	ldr	r2, [pc, #508]	@ (8001ee0 <HAL_DMA_Start_IT+0x480>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d063      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7d      	ldr	r2, [pc, #500]	@ (8001ee4 <HAL_DMA_Start_IT+0x484>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d05e      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ee8 <HAL_DMA_Start_IT+0x488>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d059      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7a      	ldr	r2, [pc, #488]	@ (8001eec <HAL_DMA_Start_IT+0x48c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d054      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a79      	ldr	r2, [pc, #484]	@ (8001ef0 <HAL_DMA_Start_IT+0x490>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d04f      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a77      	ldr	r2, [pc, #476]	@ (8001ef4 <HAL_DMA_Start_IT+0x494>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d04a      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a76      	ldr	r2, [pc, #472]	@ (8001ef8 <HAL_DMA_Start_IT+0x498>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d045      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a74      	ldr	r2, [pc, #464]	@ (8001efc <HAL_DMA_Start_IT+0x49c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d040      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a73      	ldr	r2, [pc, #460]	@ (8001f00 <HAL_DMA_Start_IT+0x4a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d03b      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a71      	ldr	r2, [pc, #452]	@ (8001f04 <HAL_DMA_Start_IT+0x4a4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d036      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a70      	ldr	r2, [pc, #448]	@ (8001f08 <HAL_DMA_Start_IT+0x4a8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d031      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_DMA_Start_IT+0x4ac>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d02c      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8001f10 <HAL_DMA_Start_IT+0x4b0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d027      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6b      	ldr	r2, [pc, #428]	@ (8001f14 <HAL_DMA_Start_IT+0x4b4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d022      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8001f18 <HAL_DMA_Start_IT+0x4b8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d01d      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a68      	ldr	r2, [pc, #416]	@ (8001f1c <HAL_DMA_Start_IT+0x4bc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d018      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a67      	ldr	r2, [pc, #412]	@ (8001f20 <HAL_DMA_Start_IT+0x4c0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d013      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a65      	ldr	r2, [pc, #404]	@ (8001f24 <HAL_DMA_Start_IT+0x4c4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00e      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a64      	ldr	r2, [pc, #400]	@ (8001f28 <HAL_DMA_Start_IT+0x4c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a62      	ldr	r2, [pc, #392]	@ (8001f2c <HAL_DMA_Start_IT+0x4cc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a61      	ldr	r2, [pc, #388]	@ (8001f30 <HAL_DMA_Start_IT+0x4d0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Start_IT+0x354>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_DMA_Start_IT+0x356>
 8001db4:	2300      	movs	r3, #0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a37      	ldr	r2, [pc, #220]	@ (8001ed4 <HAL_DMA_Start_IT+0x474>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04a      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a36      	ldr	r2, [pc, #216]	@ (8001ed8 <HAL_DMA_Start_IT+0x478>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d045      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a34      	ldr	r2, [pc, #208]	@ (8001edc <HAL_DMA_Start_IT+0x47c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d040      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a33      	ldr	r2, [pc, #204]	@ (8001ee0 <HAL_DMA_Start_IT+0x480>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d03b      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <HAL_DMA_Start_IT+0x484>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a30      	ldr	r2, [pc, #192]	@ (8001ee8 <HAL_DMA_Start_IT+0x488>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2e      	ldr	r2, [pc, #184]	@ (8001eec <HAL_DMA_Start_IT+0x48c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02c      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef0 <HAL_DMA_Start_IT+0x490>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d027      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef4 <HAL_DMA_Start_IT+0x494>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef8 <HAL_DMA_Start_IT+0x498>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d01d      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a28      	ldr	r2, [pc, #160]	@ (8001efc <HAL_DMA_Start_IT+0x49c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a27      	ldr	r2, [pc, #156]	@ (8001f00 <HAL_DMA_Start_IT+0x4a0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	@ (8001f04 <HAL_DMA_Start_IT+0x4a4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <HAL_DMA_Start_IT+0x4a8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <HAL_DMA_Start_IT+0x4ac>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	@ (8001f10 <HAL_DMA_Start_IT+0x4b0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d108      	bne.n	8001ea2 <HAL_DMA_Start_IT+0x442>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e012      	b.n	8001ec8 <HAL_DMA_Start_IT+0x468>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e009      	b.n	8001ec8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020010 	.word	0x40020010
 8001ed8:	40020028 	.word	0x40020028
 8001edc:	40020040 	.word	0x40020040
 8001ee0:	40020058 	.word	0x40020058
 8001ee4:	40020070 	.word	0x40020070
 8001ee8:	40020088 	.word	0x40020088
 8001eec:	400200a0 	.word	0x400200a0
 8001ef0:	400200b8 	.word	0x400200b8
 8001ef4:	40020410 	.word	0x40020410
 8001ef8:	40020428 	.word	0x40020428
 8001efc:	40020440 	.word	0x40020440
 8001f00:	40020458 	.word	0x40020458
 8001f04:	40020470 	.word	0x40020470
 8001f08:	40020488 	.word	0x40020488
 8001f0c:	400204a0 	.word	0x400204a0
 8001f10:	400204b8 	.word	0x400204b8
 8001f14:	58025408 	.word	0x58025408
 8001f18:	5802541c 	.word	0x5802541c
 8001f1c:	58025430 	.word	0x58025430
 8001f20:	58025444 	.word	0x58025444
 8001f24:	58025458 	.word	0x58025458
 8001f28:	5802546c 	.word	0x5802546c
 8001f2c:	58025480 	.word	0x58025480
 8001f30:	58025494 	.word	0x58025494

08001f34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f40:	4b67      	ldr	r3, [pc, #412]	@ (80020e0 <HAL_DMA_IRQHandler+0x1ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a67      	ldr	r2, [pc, #412]	@ (80020e4 <HAL_DMA_IRQHandler+0x1b0>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0a9b      	lsrs	r3, r3, #10
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80020e8 <HAL_DMA_IRQHandler+0x1b4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04a      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5d      	ldr	r2, [pc, #372]	@ (80020ec <HAL_DMA_IRQHandler+0x1b8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d045      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80020f0 <HAL_DMA_IRQHandler+0x1bc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d040      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5a      	ldr	r2, [pc, #360]	@ (80020f4 <HAL_DMA_IRQHandler+0x1c0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d03b      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a59      	ldr	r2, [pc, #356]	@ (80020f8 <HAL_DMA_IRQHandler+0x1c4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a57      	ldr	r2, [pc, #348]	@ (80020fc <HAL_DMA_IRQHandler+0x1c8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d031      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a56      	ldr	r2, [pc, #344]	@ (8002100 <HAL_DMA_IRQHandler+0x1cc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02c      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	@ (8002104 <HAL_DMA_IRQHandler+0x1d0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d027      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a53      	ldr	r2, [pc, #332]	@ (8002108 <HAL_DMA_IRQHandler+0x1d4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	@ (800210c <HAL_DMA_IRQHandler+0x1d8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a50      	ldr	r2, [pc, #320]	@ (8002110 <HAL_DMA_IRQHandler+0x1dc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a4e      	ldr	r2, [pc, #312]	@ (8002114 <HAL_DMA_IRQHandler+0x1e0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4d      	ldr	r2, [pc, #308]	@ (8002118 <HAL_DMA_IRQHandler+0x1e4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4b      	ldr	r2, [pc, #300]	@ (800211c <HAL_DMA_IRQHandler+0x1e8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8002120 <HAL_DMA_IRQHandler+0x1ec>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_IRQHandler+0xd2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a48      	ldr	r2, [pc, #288]	@ (8002124 <HAL_DMA_IRQHandler+0x1f0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_DMA_IRQHandler+0xd6>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_DMA_IRQHandler+0xd8>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 842b 	beq.w	8002868 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2208      	movs	r2, #8
 800201c:	409a      	lsls	r2, r3
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80a2 	beq.w	800216c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2e      	ldr	r2, [pc, #184]	@ (80020e8 <HAL_DMA_IRQHandler+0x1b4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d04a      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2d      	ldr	r2, [pc, #180]	@ (80020ec <HAL_DMA_IRQHandler+0x1b8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d045      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2b      	ldr	r2, [pc, #172]	@ (80020f0 <HAL_DMA_IRQHandler+0x1bc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d040      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2a      	ldr	r2, [pc, #168]	@ (80020f4 <HAL_DMA_IRQHandler+0x1c0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d03b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a28      	ldr	r2, [pc, #160]	@ (80020f8 <HAL_DMA_IRQHandler+0x1c4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d036      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a27      	ldr	r2, [pc, #156]	@ (80020fc <HAL_DMA_IRQHandler+0x1c8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d031      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a25      	ldr	r2, [pc, #148]	@ (8002100 <HAL_DMA_IRQHandler+0x1cc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a24      	ldr	r2, [pc, #144]	@ (8002104 <HAL_DMA_IRQHandler+0x1d0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d027      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a22      	ldr	r2, [pc, #136]	@ (8002108 <HAL_DMA_IRQHandler+0x1d4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d022      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a21      	ldr	r2, [pc, #132]	@ (800210c <HAL_DMA_IRQHandler+0x1d8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d01d      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1f      	ldr	r2, [pc, #124]	@ (8002110 <HAL_DMA_IRQHandler+0x1dc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d018      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_DMA_IRQHandler+0x1e0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_DMA_IRQHandler+0x1e4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00e      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_DMA_IRQHandler+0x1e8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d009      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a19      	ldr	r2, [pc, #100]	@ (8002120 <HAL_DMA_IRQHandler+0x1ec>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x194>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a18      	ldr	r2, [pc, #96]	@ (8002124 <HAL_DMA_IRQHandler+0x1f0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d12f      	bne.n	8002128 <HAL_DMA_IRQHandler+0x1f4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	e02e      	b.n	800213c <HAL_DMA_IRQHandler+0x208>
 80020de:	bf00      	nop
 80020e0:	24000004 	.word	0x24000004
 80020e4:	1b4e81b5 	.word	0x1b4e81b5
 80020e8:	40020010 	.word	0x40020010
 80020ec:	40020028 	.word	0x40020028
 80020f0:	40020040 	.word	0x40020040
 80020f4:	40020058 	.word	0x40020058
 80020f8:	40020070 	.word	0x40020070
 80020fc:	40020088 	.word	0x40020088
 8002100:	400200a0 	.word	0x400200a0
 8002104:	400200b8 	.word	0x400200b8
 8002108:	40020410 	.word	0x40020410
 800210c:	40020428 	.word	0x40020428
 8002110:	40020440 	.word	0x40020440
 8002114:	40020458 	.word	0x40020458
 8002118:	40020470 	.word	0x40020470
 800211c:	40020488 	.word	0x40020488
 8002120:	400204a0 	.word	0x400204a0
 8002124:	400204b8 	.word	0x400204b8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0204 	bic.w	r2, r2, #4
 800214e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	2208      	movs	r2, #8
 800215a:	409a      	lsls	r2, r3
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06e      	beq.n	8002260 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a69      	ldr	r2, [pc, #420]	@ (800232c <HAL_DMA_IRQHandler+0x3f8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04a      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a67      	ldr	r2, [pc, #412]	@ (8002330 <HAL_DMA_IRQHandler+0x3fc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d045      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a66      	ldr	r2, [pc, #408]	@ (8002334 <HAL_DMA_IRQHandler+0x400>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d040      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a64      	ldr	r2, [pc, #400]	@ (8002338 <HAL_DMA_IRQHandler+0x404>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d03b      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a63      	ldr	r2, [pc, #396]	@ (800233c <HAL_DMA_IRQHandler+0x408>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d036      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a61      	ldr	r2, [pc, #388]	@ (8002340 <HAL_DMA_IRQHandler+0x40c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d031      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a60      	ldr	r2, [pc, #384]	@ (8002344 <HAL_DMA_IRQHandler+0x410>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d02c      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002348 <HAL_DMA_IRQHandler+0x414>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d027      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5d      	ldr	r2, [pc, #372]	@ (800234c <HAL_DMA_IRQHandler+0x418>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5b      	ldr	r2, [pc, #364]	@ (8002350 <HAL_DMA_IRQHandler+0x41c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01d      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002354 <HAL_DMA_IRQHandler+0x420>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d018      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a58      	ldr	r2, [pc, #352]	@ (8002358 <HAL_DMA_IRQHandler+0x424>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a57      	ldr	r2, [pc, #348]	@ (800235c <HAL_DMA_IRQHandler+0x428>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00e      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a55      	ldr	r2, [pc, #340]	@ (8002360 <HAL_DMA_IRQHandler+0x42c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a54      	ldr	r2, [pc, #336]	@ (8002364 <HAL_DMA_IRQHandler+0x430>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_DMA_IRQHandler+0x2ee>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a52      	ldr	r2, [pc, #328]	@ (8002368 <HAL_DMA_IRQHandler+0x434>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10a      	bne.n	8002238 <HAL_DMA_IRQHandler+0x304>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e003      	b.n	8002240 <HAL_DMA_IRQHandler+0x30c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00d      	beq.n	8002260 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2201      	movs	r2, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	f043 0202 	orr.w	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	2204      	movs	r2, #4
 800226a:	409a      	lsls	r2, r3
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 808f 	beq.w	8002394 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2c      	ldr	r2, [pc, #176]	@ (800232c <HAL_DMA_IRQHandler+0x3f8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04a      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2a      	ldr	r2, [pc, #168]	@ (8002330 <HAL_DMA_IRQHandler+0x3fc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d045      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a29      	ldr	r2, [pc, #164]	@ (8002334 <HAL_DMA_IRQHandler+0x400>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d040      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a27      	ldr	r2, [pc, #156]	@ (8002338 <HAL_DMA_IRQHandler+0x404>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d03b      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a26      	ldr	r2, [pc, #152]	@ (800233c <HAL_DMA_IRQHandler+0x408>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d036      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a24      	ldr	r2, [pc, #144]	@ (8002340 <HAL_DMA_IRQHandler+0x40c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d031      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <HAL_DMA_IRQHandler+0x410>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d02c      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a21      	ldr	r2, [pc, #132]	@ (8002348 <HAL_DMA_IRQHandler+0x414>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d027      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a20      	ldr	r2, [pc, #128]	@ (800234c <HAL_DMA_IRQHandler+0x418>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <HAL_DMA_IRQHandler+0x41c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <HAL_DMA_IRQHandler+0x420>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002358 <HAL_DMA_IRQHandler+0x424>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1a      	ldr	r2, [pc, #104]	@ (800235c <HAL_DMA_IRQHandler+0x428>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <HAL_DMA_IRQHandler+0x42c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a17      	ldr	r2, [pc, #92]	@ (8002364 <HAL_DMA_IRQHandler+0x430>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_IRQHandler+0x3e2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a15      	ldr	r2, [pc, #84]	@ (8002368 <HAL_DMA_IRQHandler+0x434>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d12a      	bne.n	800236c <HAL_DMA_IRQHandler+0x438>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e023      	b.n	8002374 <HAL_DMA_IRQHandler+0x440>
 800232c:	40020010 	.word	0x40020010
 8002330:	40020028 	.word	0x40020028
 8002334:	40020040 	.word	0x40020040
 8002338:	40020058 	.word	0x40020058
 800233c:	40020070 	.word	0x40020070
 8002340:	40020088 	.word	0x40020088
 8002344:	400200a0 	.word	0x400200a0
 8002348:	400200b8 	.word	0x400200b8
 800234c:	40020410 	.word	0x40020410
 8002350:	40020428 	.word	0x40020428
 8002354:	40020440 	.word	0x40020440
 8002358:	40020458 	.word	0x40020458
 800235c:	40020470 	.word	0x40020470
 8002360:	40020488 	.word	0x40020488
 8002364:	400204a0 	.word	0x400204a0
 8002368:	400204b8 	.word	0x400204b8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2204      	movs	r2, #4
 8002382:	409a      	lsls	r2, r3
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2210      	movs	r2, #16
 800239e:	409a      	lsls	r2, r3
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a6 	beq.w	80024f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a85      	ldr	r2, [pc, #532]	@ (80025c4 <HAL_DMA_IRQHandler+0x690>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d04a      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a83      	ldr	r2, [pc, #524]	@ (80025c8 <HAL_DMA_IRQHandler+0x694>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d045      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a82      	ldr	r2, [pc, #520]	@ (80025cc <HAL_DMA_IRQHandler+0x698>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d040      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a80      	ldr	r2, [pc, #512]	@ (80025d0 <HAL_DMA_IRQHandler+0x69c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d03b      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7f      	ldr	r2, [pc, #508]	@ (80025d4 <HAL_DMA_IRQHandler+0x6a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d036      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a7d      	ldr	r2, [pc, #500]	@ (80025d8 <HAL_DMA_IRQHandler+0x6a4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d031      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7c      	ldr	r2, [pc, #496]	@ (80025dc <HAL_DMA_IRQHandler+0x6a8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d02c      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a7a      	ldr	r2, [pc, #488]	@ (80025e0 <HAL_DMA_IRQHandler+0x6ac>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d027      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a79      	ldr	r2, [pc, #484]	@ (80025e4 <HAL_DMA_IRQHandler+0x6b0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a77      	ldr	r2, [pc, #476]	@ (80025e8 <HAL_DMA_IRQHandler+0x6b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01d      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a76      	ldr	r2, [pc, #472]	@ (80025ec <HAL_DMA_IRQHandler+0x6b8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d018      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a74      	ldr	r2, [pc, #464]	@ (80025f0 <HAL_DMA_IRQHandler+0x6bc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a73      	ldr	r2, [pc, #460]	@ (80025f4 <HAL_DMA_IRQHandler+0x6c0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00e      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a71      	ldr	r2, [pc, #452]	@ (80025f8 <HAL_DMA_IRQHandler+0x6c4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a70      	ldr	r2, [pc, #448]	@ (80025fc <HAL_DMA_IRQHandler+0x6c8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_DMA_IRQHandler+0x516>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6e      	ldr	r2, [pc, #440]	@ (8002600 <HAL_DMA_IRQHandler+0x6cc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10a      	bne.n	8002460 <HAL_DMA_IRQHandler+0x52c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e009      	b.n	8002474 <HAL_DMA_IRQHandler+0x540>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d03e      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2210      	movs	r2, #16
 8002482:	409a      	lsls	r2, r3
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d018      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d108      	bne.n	80024b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d024      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
 80024b4:	e01f      	b.n	80024f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01b      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
 80024c6:	e016      	b.n	80024f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2220      	movs	r2, #32
 8002500:	409a      	lsls	r2, r3
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8110 	beq.w	800272c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2c      	ldr	r2, [pc, #176]	@ (80025c4 <HAL_DMA_IRQHandler+0x690>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d04a      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2b      	ldr	r2, [pc, #172]	@ (80025c8 <HAL_DMA_IRQHandler+0x694>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d045      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a29      	ldr	r2, [pc, #164]	@ (80025cc <HAL_DMA_IRQHandler+0x698>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d040      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a28      	ldr	r2, [pc, #160]	@ (80025d0 <HAL_DMA_IRQHandler+0x69c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d03b      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a26      	ldr	r2, [pc, #152]	@ (80025d4 <HAL_DMA_IRQHandler+0x6a0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d036      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a25      	ldr	r2, [pc, #148]	@ (80025d8 <HAL_DMA_IRQHandler+0x6a4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d031      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a23      	ldr	r2, [pc, #140]	@ (80025dc <HAL_DMA_IRQHandler+0x6a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a22      	ldr	r2, [pc, #136]	@ (80025e0 <HAL_DMA_IRQHandler+0x6ac>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d027      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a20      	ldr	r2, [pc, #128]	@ (80025e4 <HAL_DMA_IRQHandler+0x6b0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d022      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1f      	ldr	r2, [pc, #124]	@ (80025e8 <HAL_DMA_IRQHandler+0x6b4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01d      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	@ (80025ec <HAL_DMA_IRQHandler+0x6b8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d018      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <HAL_DMA_IRQHandler+0x6bc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <HAL_DMA_IRQHandler+0x6c0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00e      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a19      	ldr	r2, [pc, #100]	@ (80025f8 <HAL_DMA_IRQHandler+0x6c4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <HAL_DMA_IRQHandler+0x6c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_IRQHandler+0x678>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <HAL_DMA_IRQHandler+0x6cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d12b      	bne.n	8002604 <HAL_DMA_IRQHandler+0x6d0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	e02a      	b.n	8002618 <HAL_DMA_IRQHandler+0x6e4>
 80025c2:	bf00      	nop
 80025c4:	40020010 	.word	0x40020010
 80025c8:	40020028 	.word	0x40020028
 80025cc:	40020040 	.word	0x40020040
 80025d0:	40020058 	.word	0x40020058
 80025d4:	40020070 	.word	0x40020070
 80025d8:	40020088 	.word	0x40020088
 80025dc:	400200a0 	.word	0x400200a0
 80025e0:	400200b8 	.word	0x400200b8
 80025e4:	40020410 	.word	0x40020410
 80025e8:	40020428 	.word	0x40020428
 80025ec:	40020440 	.word	0x40020440
 80025f0:	40020458 	.word	0x40020458
 80025f4:	40020470 	.word	0x40020470
 80025f8:	40020488 	.word	0x40020488
 80025fc:	400204a0 	.word	0x400204a0
 8002600:	400204b8 	.word	0x400204b8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8087 	beq.w	800272c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2220      	movs	r2, #32
 8002628:	409a      	lsls	r2, r3
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b04      	cmp	r3, #4
 8002638:	d139      	bne.n	80026ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0216 	bic.w	r2, r2, #22
 8002648:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002658:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_DMA_IRQHandler+0x736>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0208 	bic.w	r2, r2, #8
 8002678:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	223f      	movs	r2, #63	@ 0x3f
 8002684:	409a      	lsls	r2, r3
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 834a 	beq.w	8002d38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
          }
          return;
 80026ac:	e344      	b.n	8002d38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d02c      	beq.n	800272c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
 80026da:	e027      	b.n	800272c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
 80026ec:	e01e      	b.n	800272c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8306 	beq.w	8002d42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8088 	beq.w	8002854 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2204      	movs	r2, #4
 8002748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7a      	ldr	r2, [pc, #488]	@ (800293c <HAL_DMA_IRQHandler+0xa08>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d04a      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a79      	ldr	r2, [pc, #484]	@ (8002940 <HAL_DMA_IRQHandler+0xa0c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d045      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a77      	ldr	r2, [pc, #476]	@ (8002944 <HAL_DMA_IRQHandler+0xa10>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d040      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a76      	ldr	r2, [pc, #472]	@ (8002948 <HAL_DMA_IRQHandler+0xa14>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d03b      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a74      	ldr	r2, [pc, #464]	@ (800294c <HAL_DMA_IRQHandler+0xa18>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d036      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a73      	ldr	r2, [pc, #460]	@ (8002950 <HAL_DMA_IRQHandler+0xa1c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d031      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a71      	ldr	r2, [pc, #452]	@ (8002954 <HAL_DMA_IRQHandler+0xa20>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02c      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a70      	ldr	r2, [pc, #448]	@ (8002958 <HAL_DMA_IRQHandler+0xa24>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d027      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6e      	ldr	r2, [pc, #440]	@ (800295c <HAL_DMA_IRQHandler+0xa28>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d022      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002960 <HAL_DMA_IRQHandler+0xa2c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d01d      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002964 <HAL_DMA_IRQHandler+0xa30>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d018      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6a      	ldr	r2, [pc, #424]	@ (8002968 <HAL_DMA_IRQHandler+0xa34>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a68      	ldr	r2, [pc, #416]	@ (800296c <HAL_DMA_IRQHandler+0xa38>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00e      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a67      	ldr	r2, [pc, #412]	@ (8002970 <HAL_DMA_IRQHandler+0xa3c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <HAL_DMA_IRQHandler+0xa40>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_IRQHandler+0x8b8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a64      	ldr	r2, [pc, #400]	@ (8002978 <HAL_DMA_IRQHandler+0xa44>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d108      	bne.n	80027fe <HAL_DMA_IRQHandler+0x8ca>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e007      	b.n	800280e <HAL_DMA_IRQHandler+0x8da>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3301      	adds	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002816:	429a      	cmp	r2, r3
 8002818:	d307      	bcc.n	800282a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f2      	bne.n	800280e <HAL_DMA_IRQHandler+0x8da>
 8002828:	e000      	b.n	800282c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800282a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2203      	movs	r2, #3
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002842:	e003      	b.n	800284c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8272 	beq.w	8002d42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	e26c      	b.n	8002d42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a43      	ldr	r2, [pc, #268]	@ (800297c <HAL_DMA_IRQHandler+0xa48>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d022      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x984>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a42      	ldr	r2, [pc, #264]	@ (8002980 <HAL_DMA_IRQHandler+0xa4c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01d      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x984>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a40      	ldr	r2, [pc, #256]	@ (8002984 <HAL_DMA_IRQHandler+0xa50>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d018      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x984>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3f      	ldr	r2, [pc, #252]	@ (8002988 <HAL_DMA_IRQHandler+0xa54>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d013      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x984>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a3d      	ldr	r2, [pc, #244]	@ (800298c <HAL_DMA_IRQHandler+0xa58>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00e      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x984>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a3c      	ldr	r2, [pc, #240]	@ (8002990 <HAL_DMA_IRQHandler+0xa5c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d009      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x984>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002994 <HAL_DMA_IRQHandler+0xa60>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x984>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a39      	ldr	r2, [pc, #228]	@ (8002998 <HAL_DMA_IRQHandler+0xa64>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_IRQHandler+0x988>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_DMA_IRQHandler+0x98a>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 823f 	beq.w	8002d42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2204      	movs	r2, #4
 80028d6:	409a      	lsls	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80cd 	beq.w	8002a7c <HAL_DMA_IRQHandler+0xb48>
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80c7 	beq.w	8002a7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2204      	movs	r2, #4
 80028f8:	409a      	lsls	r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d049      	beq.n	800299c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8210 	beq.w	8002d3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002924:	e20a      	b.n	8002d3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8206 	beq.w	8002d3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002938:	e200      	b.n	8002d3c <HAL_DMA_IRQHandler+0xe08>
 800293a:	bf00      	nop
 800293c:	40020010 	.word	0x40020010
 8002940:	40020028 	.word	0x40020028
 8002944:	40020040 	.word	0x40020040
 8002948:	40020058 	.word	0x40020058
 800294c:	40020070 	.word	0x40020070
 8002950:	40020088 	.word	0x40020088
 8002954:	400200a0 	.word	0x400200a0
 8002958:	400200b8 	.word	0x400200b8
 800295c:	40020410 	.word	0x40020410
 8002960:	40020428 	.word	0x40020428
 8002964:	40020440 	.word	0x40020440
 8002968:	40020458 	.word	0x40020458
 800296c:	40020470 	.word	0x40020470
 8002970:	40020488 	.word	0x40020488
 8002974:	400204a0 	.word	0x400204a0
 8002978:	400204b8 	.word	0x400204b8
 800297c:	58025408 	.word	0x58025408
 8002980:	5802541c 	.word	0x5802541c
 8002984:	58025430 	.word	0x58025430
 8002988:	58025444 	.word	0x58025444
 800298c:	58025458 	.word	0x58025458
 8002990:	5802546c 	.word	0x5802546c
 8002994:	58025480 	.word	0x58025480
 8002998:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d160      	bne.n	8002a68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7f      	ldr	r2, [pc, #508]	@ (8002ba8 <HAL_DMA_IRQHandler+0xc74>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d04a      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7d      	ldr	r2, [pc, #500]	@ (8002bac <HAL_DMA_IRQHandler+0xc78>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d045      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb0 <HAL_DMA_IRQHandler+0xc7c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d040      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb4 <HAL_DMA_IRQHandler+0xc80>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d03b      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a79      	ldr	r2, [pc, #484]	@ (8002bb8 <HAL_DMA_IRQHandler+0xc84>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d036      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a77      	ldr	r2, [pc, #476]	@ (8002bbc <HAL_DMA_IRQHandler+0xc88>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a76      	ldr	r2, [pc, #472]	@ (8002bc0 <HAL_DMA_IRQHandler+0xc8c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d02c      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a74      	ldr	r2, [pc, #464]	@ (8002bc4 <HAL_DMA_IRQHandler+0xc90>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d027      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a73      	ldr	r2, [pc, #460]	@ (8002bc8 <HAL_DMA_IRQHandler+0xc94>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a71      	ldr	r2, [pc, #452]	@ (8002bcc <HAL_DMA_IRQHandler+0xc98>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a70      	ldr	r2, [pc, #448]	@ (8002bd0 <HAL_DMA_IRQHandler+0xc9c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_DMA_IRQHandler+0xca0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd8 <HAL_DMA_IRQHandler+0xca4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bdc <HAL_DMA_IRQHandler+0xca8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6a      	ldr	r2, [pc, #424]	@ (8002be0 <HAL_DMA_IRQHandler+0xcac>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xb12>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a68      	ldr	r2, [pc, #416]	@ (8002be4 <HAL_DMA_IRQHandler+0xcb0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d108      	bne.n	8002a58 <HAL_DMA_IRQHandler+0xb24>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0208 	bic.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e007      	b.n	8002a68 <HAL_DMA_IRQHandler+0xb34>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0204 	bic.w	r2, r2, #4
 8002a66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8165 	beq.w	8002d3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a7a:	e15f      	b.n	8002d3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2202      	movs	r2, #2
 8002a86:	409a      	lsls	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80c5 	beq.w	8002c1c <HAL_DMA_IRQHandler+0xce8>
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80bf 	beq.w	8002c1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 813a 	beq.w	8002d40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ad4:	e134      	b.n	8002d40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8130 	beq.w	8002d40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ae8:	e12a      	b.n	8002d40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 8089 	bne.w	8002c08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba8 <HAL_DMA_IRQHandler+0xc74>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04a      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a29      	ldr	r2, [pc, #164]	@ (8002bac <HAL_DMA_IRQHandler+0xc78>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d045      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a28      	ldr	r2, [pc, #160]	@ (8002bb0 <HAL_DMA_IRQHandler+0xc7c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a26      	ldr	r2, [pc, #152]	@ (8002bb4 <HAL_DMA_IRQHandler+0xc80>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03b      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <HAL_DMA_IRQHandler+0xc84>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d036      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	@ (8002bbc <HAL_DMA_IRQHandler+0xc88>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_DMA_IRQHandler+0xc8c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d02c      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a20      	ldr	r2, [pc, #128]	@ (8002bc4 <HAL_DMA_IRQHandler+0xc90>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <HAL_DMA_IRQHandler+0xc94>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	@ (8002bcc <HAL_DMA_IRQHandler+0xc98>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <HAL_DMA_IRQHandler+0xc9c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd4 <HAL_DMA_IRQHandler+0xca0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <HAL_DMA_IRQHandler+0xca4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a17      	ldr	r2, [pc, #92]	@ (8002bdc <HAL_DMA_IRQHandler+0xca8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a16      	ldr	r2, [pc, #88]	@ (8002be0 <HAL_DMA_IRQHandler+0xcac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_IRQHandler+0xc62>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <HAL_DMA_IRQHandler+0xcb0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d128      	bne.n	8002be8 <HAL_DMA_IRQHandler+0xcb4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0214 	bic.w	r2, r2, #20
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e027      	b.n	8002bf8 <HAL_DMA_IRQHandler+0xcc4>
 8002ba8:	40020010 	.word	0x40020010
 8002bac:	40020028 	.word	0x40020028
 8002bb0:	40020040 	.word	0x40020040
 8002bb4:	40020058 	.word	0x40020058
 8002bb8:	40020070 	.word	0x40020070
 8002bbc:	40020088 	.word	0x40020088
 8002bc0:	400200a0 	.word	0x400200a0
 8002bc4:	400200b8 	.word	0x400200b8
 8002bc8:	40020410 	.word	0x40020410
 8002bcc:	40020428 	.word	0x40020428
 8002bd0:	40020440 	.word	0x40020440
 8002bd4:	40020458 	.word	0x40020458
 8002bd8:	40020470 	.word	0x40020470
 8002bdc:	40020488 	.word	0x40020488
 8002be0:	400204a0 	.word	0x400204a0
 8002be4:	400204b8 	.word	0x400204b8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 020a 	bic.w	r2, r2, #10
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8097 	beq.w	8002d40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c1a:	e091      	b.n	8002d40 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2208      	movs	r2, #8
 8002c26:	409a      	lsls	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8088 	beq.w	8002d42 <HAL_DMA_IRQHandler+0xe0e>
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8082 	beq.w	8002d42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a41      	ldr	r2, [pc, #260]	@ (8002d48 <HAL_DMA_IRQHandler+0xe14>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04a      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d4c <HAL_DMA_IRQHandler+0xe18>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d045      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3e      	ldr	r2, [pc, #248]	@ (8002d50 <HAL_DMA_IRQHandler+0xe1c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3c      	ldr	r2, [pc, #240]	@ (8002d54 <HAL_DMA_IRQHandler+0xe20>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d03b      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d58 <HAL_DMA_IRQHandler+0xe24>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	@ (8002d5c <HAL_DMA_IRQHandler+0xe28>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a38      	ldr	r2, [pc, #224]	@ (8002d60 <HAL_DMA_IRQHandler+0xe2c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02c      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a36      	ldr	r2, [pc, #216]	@ (8002d64 <HAL_DMA_IRQHandler+0xe30>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d027      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a35      	ldr	r2, [pc, #212]	@ (8002d68 <HAL_DMA_IRQHandler+0xe34>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a33      	ldr	r2, [pc, #204]	@ (8002d6c <HAL_DMA_IRQHandler+0xe38>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <HAL_DMA_IRQHandler+0xe3c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	@ (8002d74 <HAL_DMA_IRQHandler+0xe40>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2f      	ldr	r2, [pc, #188]	@ (8002d78 <HAL_DMA_IRQHandler+0xe44>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <HAL_DMA_IRQHandler+0xe48>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2c      	ldr	r2, [pc, #176]	@ (8002d80 <HAL_DMA_IRQHandler+0xe4c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_DMA_IRQHandler+0xdaa>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d84 <HAL_DMA_IRQHandler+0xe50>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0xdbc>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 021c 	bic.w	r2, r2, #28
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e007      	b.n	8002d00 <HAL_DMA_IRQHandler+0xdcc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020e 	bic.w	r2, r2, #14
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
 8002d36:	e004      	b.n	8002d42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002d38:	bf00      	nop
 8002d3a:	e002      	b.n	8002d42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d42:	3728      	adds	r7, #40	@ 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40020010 	.word	0x40020010
 8002d4c:	40020028 	.word	0x40020028
 8002d50:	40020040 	.word	0x40020040
 8002d54:	40020058 	.word	0x40020058
 8002d58:	40020070 	.word	0x40020070
 8002d5c:	40020088 	.word	0x40020088
 8002d60:	400200a0 	.word	0x400200a0
 8002d64:	400200b8 	.word	0x400200b8
 8002d68:	40020410 	.word	0x40020410
 8002d6c:	40020428 	.word	0x40020428
 8002d70:	40020440 	.word	0x40020440
 8002d74:	40020458 	.word	0x40020458
 8002d78:	40020470 	.word	0x40020470
 8002d7c:	40020488 	.word	0x40020488
 8002d80:	400204a0 	.word	0x400204a0
 8002d84:	400204b8 	.word	0x400204b8

08002d88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7f      	ldr	r2, [pc, #508]	@ (8002fa4 <DMA_SetConfig+0x21c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d072      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7d      	ldr	r2, [pc, #500]	@ (8002fa8 <DMA_SetConfig+0x220>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d06d      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7c      	ldr	r2, [pc, #496]	@ (8002fac <DMA_SetConfig+0x224>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d068      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a7a      	ldr	r2, [pc, #488]	@ (8002fb0 <DMA_SetConfig+0x228>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d063      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a79      	ldr	r2, [pc, #484]	@ (8002fb4 <DMA_SetConfig+0x22c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d05e      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a77      	ldr	r2, [pc, #476]	@ (8002fb8 <DMA_SetConfig+0x230>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d059      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a76      	ldr	r2, [pc, #472]	@ (8002fbc <DMA_SetConfig+0x234>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d054      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a74      	ldr	r2, [pc, #464]	@ (8002fc0 <DMA_SetConfig+0x238>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d04f      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a73      	ldr	r2, [pc, #460]	@ (8002fc4 <DMA_SetConfig+0x23c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d04a      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a71      	ldr	r2, [pc, #452]	@ (8002fc8 <DMA_SetConfig+0x240>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d045      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a70      	ldr	r2, [pc, #448]	@ (8002fcc <DMA_SetConfig+0x244>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d040      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd0 <DMA_SetConfig+0x248>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d03b      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd4 <DMA_SetConfig+0x24c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d036      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a6b      	ldr	r2, [pc, #428]	@ (8002fd8 <DMA_SetConfig+0x250>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d031      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6a      	ldr	r2, [pc, #424]	@ (8002fdc <DMA_SetConfig+0x254>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d02c      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a68      	ldr	r2, [pc, #416]	@ (8002fe0 <DMA_SetConfig+0x258>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d027      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a67      	ldr	r2, [pc, #412]	@ (8002fe4 <DMA_SetConfig+0x25c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a65      	ldr	r2, [pc, #404]	@ (8002fe8 <DMA_SetConfig+0x260>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01d      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a64      	ldr	r2, [pc, #400]	@ (8002fec <DMA_SetConfig+0x264>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d018      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a62      	ldr	r2, [pc, #392]	@ (8002ff0 <DMA_SetConfig+0x268>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a61      	ldr	r2, [pc, #388]	@ (8002ff4 <DMA_SetConfig+0x26c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff8 <DMA_SetConfig+0x270>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5e      	ldr	r2, [pc, #376]	@ (8002ffc <DMA_SetConfig+0x274>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <DMA_SetConfig+0x10a>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5c      	ldr	r2, [pc, #368]	@ (8003000 <DMA_SetConfig+0x278>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <DMA_SetConfig+0x10e>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <DMA_SetConfig+0x110>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ea4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002eb6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a39      	ldr	r2, [pc, #228]	@ (8002fa4 <DMA_SetConfig+0x21c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d04a      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a38      	ldr	r2, [pc, #224]	@ (8002fa8 <DMA_SetConfig+0x220>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d045      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a36      	ldr	r2, [pc, #216]	@ (8002fac <DMA_SetConfig+0x224>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d040      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a35      	ldr	r2, [pc, #212]	@ (8002fb0 <DMA_SetConfig+0x228>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d03b      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a33      	ldr	r2, [pc, #204]	@ (8002fb4 <DMA_SetConfig+0x22c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d036      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a32      	ldr	r2, [pc, #200]	@ (8002fb8 <DMA_SetConfig+0x230>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d031      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a30      	ldr	r2, [pc, #192]	@ (8002fbc <DMA_SetConfig+0x234>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02c      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc0 <DMA_SetConfig+0x238>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d027      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <DMA_SetConfig+0x23c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d022      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc8 <DMA_SetConfig+0x240>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01d      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2a      	ldr	r2, [pc, #168]	@ (8002fcc <DMA_SetConfig+0x244>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d018      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a29      	ldr	r2, [pc, #164]	@ (8002fd0 <DMA_SetConfig+0x248>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a27      	ldr	r2, [pc, #156]	@ (8002fd4 <DMA_SetConfig+0x24c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	@ (8002fd8 <DMA_SetConfig+0x250>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a24      	ldr	r2, [pc, #144]	@ (8002fdc <DMA_SetConfig+0x254>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <DMA_SetConfig+0x1d0>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <DMA_SetConfig+0x258>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <DMA_SetConfig+0x1d4>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <DMA_SetConfig+0x1d6>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d059      	beq.n	8003016 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	223f      	movs	r2, #63	@ 0x3f
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f80:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b40      	cmp	r3, #64	@ 0x40
 8002f90:	d138      	bne.n	8003004 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002fa2:	e086      	b.n	80030b2 <DMA_SetConfig+0x32a>
 8002fa4:	40020010 	.word	0x40020010
 8002fa8:	40020028 	.word	0x40020028
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	40020070 	.word	0x40020070
 8002fb8:	40020088 	.word	0x40020088
 8002fbc:	400200a0 	.word	0x400200a0
 8002fc0:	400200b8 	.word	0x400200b8
 8002fc4:	40020410 	.word	0x40020410
 8002fc8:	40020428 	.word	0x40020428
 8002fcc:	40020440 	.word	0x40020440
 8002fd0:	40020458 	.word	0x40020458
 8002fd4:	40020470 	.word	0x40020470
 8002fd8:	40020488 	.word	0x40020488
 8002fdc:	400204a0 	.word	0x400204a0
 8002fe0:	400204b8 	.word	0x400204b8
 8002fe4:	58025408 	.word	0x58025408
 8002fe8:	5802541c 	.word	0x5802541c
 8002fec:	58025430 	.word	0x58025430
 8002ff0:	58025444 	.word	0x58025444
 8002ff4:	58025458 	.word	0x58025458
 8002ff8:	5802546c 	.word	0x5802546c
 8002ffc:	58025480 	.word	0x58025480
 8003000:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
}
 8003014:	e04d      	b.n	80030b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a29      	ldr	r2, [pc, #164]	@ (80030c0 <DMA_SetConfig+0x338>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <DMA_SetConfig+0x2de>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a27      	ldr	r2, [pc, #156]	@ (80030c4 <DMA_SetConfig+0x33c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01d      	beq.n	8003066 <DMA_SetConfig+0x2de>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a26      	ldr	r2, [pc, #152]	@ (80030c8 <DMA_SetConfig+0x340>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <DMA_SetConfig+0x2de>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <DMA_SetConfig+0x344>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <DMA_SetConfig+0x2de>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <DMA_SetConfig+0x348>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <DMA_SetConfig+0x2de>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a21      	ldr	r2, [pc, #132]	@ (80030d4 <DMA_SetConfig+0x34c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <DMA_SetConfig+0x2de>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a20      	ldr	r2, [pc, #128]	@ (80030d8 <DMA_SetConfig+0x350>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <DMA_SetConfig+0x2de>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <DMA_SetConfig+0x354>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <DMA_SetConfig+0x2e2>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <DMA_SetConfig+0x2e4>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d108      	bne.n	80030a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	60da      	str	r2, [r3, #12]
}
 80030a0:	e007      	b.n	80030b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	60da      	str	r2, [r3, #12]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	58025408 	.word	0x58025408
 80030c4:	5802541c 	.word	0x5802541c
 80030c8:	58025430 	.word	0x58025430
 80030cc:	58025444 	.word	0x58025444
 80030d0:	58025458 	.word	0x58025458
 80030d4:	5802546c 	.word	0x5802546c
 80030d8:	58025480 	.word	0x58025480
 80030dc:	58025494 	.word	0x58025494

080030e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a42      	ldr	r2, [pc, #264]	@ (80031f8 <DMA_CalcBaseAndBitshift+0x118>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d04a      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a41      	ldr	r2, [pc, #260]	@ (80031fc <DMA_CalcBaseAndBitshift+0x11c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d045      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3f      	ldr	r2, [pc, #252]	@ (8003200 <DMA_CalcBaseAndBitshift+0x120>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d040      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3e      	ldr	r2, [pc, #248]	@ (8003204 <DMA_CalcBaseAndBitshift+0x124>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03b      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3c      	ldr	r2, [pc, #240]	@ (8003208 <DMA_CalcBaseAndBitshift+0x128>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d036      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3b      	ldr	r2, [pc, #236]	@ (800320c <DMA_CalcBaseAndBitshift+0x12c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d031      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a39      	ldr	r2, [pc, #228]	@ (8003210 <DMA_CalcBaseAndBitshift+0x130>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02c      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a38      	ldr	r2, [pc, #224]	@ (8003214 <DMA_CalcBaseAndBitshift+0x134>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d027      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a36      	ldr	r2, [pc, #216]	@ (8003218 <DMA_CalcBaseAndBitshift+0x138>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a35      	ldr	r2, [pc, #212]	@ (800321c <DMA_CalcBaseAndBitshift+0x13c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01d      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a33      	ldr	r2, [pc, #204]	@ (8003220 <DMA_CalcBaseAndBitshift+0x140>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d018      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a32      	ldr	r2, [pc, #200]	@ (8003224 <DMA_CalcBaseAndBitshift+0x144>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a30      	ldr	r2, [pc, #192]	@ (8003228 <DMA_CalcBaseAndBitshift+0x148>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2f      	ldr	r2, [pc, #188]	@ (800322c <DMA_CalcBaseAndBitshift+0x14c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2d      	ldr	r2, [pc, #180]	@ (8003230 <DMA_CalcBaseAndBitshift+0x150>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xa8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2c      	ldr	r2, [pc, #176]	@ (8003234 <DMA_CalcBaseAndBitshift+0x154>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <DMA_CalcBaseAndBitshift+0xac>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <DMA_CalcBaseAndBitshift+0xae>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d024      	beq.n	80031dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3b10      	subs	r3, #16
 800319a:	4a27      	ldr	r2, [pc, #156]	@ (8003238 <DMA_CalcBaseAndBitshift+0x158>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	4a24      	ldr	r2, [pc, #144]	@ (800323c <DMA_CalcBaseAndBitshift+0x15c>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d908      	bls.n	80031cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003240 <DMA_CalcBaseAndBitshift+0x160>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	1d1a      	adds	r2, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80031ca:	e00d      	b.n	80031e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <DMA_CalcBaseAndBitshift+0x160>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031da:	e005      	b.n	80031e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40020010 	.word	0x40020010
 80031fc:	40020028 	.word	0x40020028
 8003200:	40020040 	.word	0x40020040
 8003204:	40020058 	.word	0x40020058
 8003208:	40020070 	.word	0x40020070
 800320c:	40020088 	.word	0x40020088
 8003210:	400200a0 	.word	0x400200a0
 8003214:	400200b8 	.word	0x400200b8
 8003218:	40020410 	.word	0x40020410
 800321c:	40020428 	.word	0x40020428
 8003220:	40020440 	.word	0x40020440
 8003224:	40020458 	.word	0x40020458
 8003228:	40020470 	.word	0x40020470
 800322c:	40020488 	.word	0x40020488
 8003230:	400204a0 	.word	0x400204a0
 8003234:	400204b8 	.word	0x400204b8
 8003238:	aaaaaaab 	.word	0xaaaaaaab
 800323c:	080087bc 	.word	0x080087bc
 8003240:	fffffc00 	.word	0xfffffc00

08003244 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d120      	bne.n	800329a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	2b03      	cmp	r3, #3
 800325e:	d858      	bhi.n	8003312 <DMA_CheckFifoParam+0xce>
 8003260:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <DMA_CheckFifoParam+0x24>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	0800328b 	.word	0x0800328b
 8003270:	08003279 	.word	0x08003279
 8003274:	08003313 	.word	0x08003313
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d048      	beq.n	8003316 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003288:	e045      	b.n	8003316 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003292:	d142      	bne.n	800331a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003298:	e03f      	b.n	800331a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a2:	d123      	bne.n	80032ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d838      	bhi.n	800331e <DMA_CheckFifoParam+0xda>
 80032ac:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <DMA_CheckFifoParam+0x70>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032cb 	.word	0x080032cb
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	080032dd 	.word	0x080032dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
        break;
 80032c8:	e030      	b.n	800332c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d025      	beq.n	8003322 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032da:	e022      	b.n	8003322 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032e4:	d11f      	bne.n	8003326 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032ea:	e01c      	b.n	8003326 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d902      	bls.n	80032fa <DMA_CheckFifoParam+0xb6>
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d003      	beq.n	8003300 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80032f8:	e018      	b.n	800332c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
        break;
 80032fe:	e015      	b.n	800332c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
    break;
 8003310:	e00b      	b.n	800332a <DMA_CheckFifoParam+0xe6>
        break;
 8003312:	bf00      	nop
 8003314:	e00a      	b.n	800332c <DMA_CheckFifoParam+0xe8>
        break;
 8003316:	bf00      	nop
 8003318:	e008      	b.n	800332c <DMA_CheckFifoParam+0xe8>
        break;
 800331a:	bf00      	nop
 800331c:	e006      	b.n	800332c <DMA_CheckFifoParam+0xe8>
        break;
 800331e:	bf00      	nop
 8003320:	e004      	b.n	800332c <DMA_CheckFifoParam+0xe8>
        break;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <DMA_CheckFifoParam+0xe8>
        break;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <DMA_CheckFifoParam+0xe8>
    break;
 800332a:	bf00      	nop
    }
  }

  return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a38      	ldr	r2, [pc, #224]	@ (8003430 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d022      	beq.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a36      	ldr	r2, [pc, #216]	@ (8003434 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01d      	beq.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a35      	ldr	r2, [pc, #212]	@ (8003438 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d018      	beq.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a33      	ldr	r2, [pc, #204]	@ (800343c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a32      	ldr	r2, [pc, #200]	@ (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a30      	ldr	r2, [pc, #192]	@ (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2f      	ldr	r2, [pc, #188]	@ (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2d      	ldr	r2, [pc, #180]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01a      	beq.n	80033da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3b08      	subs	r3, #8
 80033ac:	4a28      	ldr	r2, [pc, #160]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4b26      	ldr	r3, [pc, #152]	@ (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a24      	ldr	r2, [pc, #144]	@ (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80033c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80033d8:	e024      	b.n	8003424 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3b10      	subs	r3, #16
 80033e2:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d806      	bhi.n	8003402 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d902      	bls.n	8003402 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3308      	adds	r3, #8
 8003400:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4b18      	ldr	r3, [pc, #96]	@ (8003468 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a16      	ldr	r2, [pc, #88]	@ (800346c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003414:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2201      	movs	r2, #1
 800341e:	409a      	lsls	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	58025408 	.word	0x58025408
 8003434:	5802541c 	.word	0x5802541c
 8003438:	58025430 	.word	0x58025430
 800343c:	58025444 	.word	0x58025444
 8003440:	58025458 	.word	0x58025458
 8003444:	5802546c 	.word	0x5802546c
 8003448:	58025480 	.word	0x58025480
 800344c:	58025494 	.word	0x58025494
 8003450:	cccccccd 	.word	0xcccccccd
 8003454:	16009600 	.word	0x16009600
 8003458:	58025880 	.word	0x58025880
 800345c:	aaaaaaab 	.word	0xaaaaaaab
 8003460:	400204b8 	.word	0x400204b8
 8003464:	4002040f 	.word	0x4002040f
 8003468:	10008200 	.word	0x10008200
 800346c:	40020880 	.word	0x40020880

08003470 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04a      	beq.n	800351c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d847      	bhi.n	800351c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a25      	ldr	r2, [pc, #148]	@ (8003528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d022      	beq.n	80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a24      	ldr	r2, [pc, #144]	@ (800352c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d01d      	beq.n	80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d018      	beq.n	80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00e      	beq.n	80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d009      	beq.n	80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80034e0:	2300      	movs	r3, #0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a15      	ldr	r2, [pc, #84]	@ (800354c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80034f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80034fa:	e009      	b.n	8003510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a11      	ldr	r2, [pc, #68]	@ (8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800350e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3b01      	subs	r3, #1
 8003514:	2201      	movs	r2, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	58025408 	.word	0x58025408
 800352c:	5802541c 	.word	0x5802541c
 8003530:	58025430 	.word	0x58025430
 8003534:	58025444 	.word	0x58025444
 8003538:	58025458 	.word	0x58025458
 800353c:	5802546c 	.word	0x5802546c
 8003540:	58025480 	.word	0x58025480
 8003544:	58025494 	.word	0x58025494
 8003548:	1600963f 	.word	0x1600963f
 800354c:	58025940 	.word	0x58025940
 8003550:	1000823f 	.word	0x1000823f
 8003554:	40020940 	.word	0x40020940

08003558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	@ 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003566:	4b89      	ldr	r3, [pc, #548]	@ (800378c <HAL_GPIO_Init+0x234>)
 8003568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800356a:	e194      	b.n	8003896 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8186 	beq.w	8003890 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d005      	beq.n	800359c <HAL_GPIO_Init+0x44>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d130      	bne.n	80035fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035d2:	2201      	movs	r2, #1
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	f003 0201 	and.w	r2, r3, #1
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b03      	cmp	r3, #3
 8003608:	d017      	beq.n	800363a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	2203      	movs	r2, #3
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d123      	bne.n	800368e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	08da      	lsrs	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	08da      	lsrs	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3208      	adds	r2, #8
 8003688:	69b9      	ldr	r1, [r7, #24]
 800368a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80e0 	beq.w	8003890 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003790 <HAL_GPIO_Init+0x238>)
 80036d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003790 <HAL_GPIO_Init+0x238>)
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003790 <HAL_GPIO_Init+0x238>)
 80036e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ee:	4a29      	ldr	r2, [pc, #164]	@ (8003794 <HAL_GPIO_Init+0x23c>)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a20      	ldr	r2, [pc, #128]	@ (8003798 <HAL_GPIO_Init+0x240>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d052      	beq.n	80037c0 <HAL_GPIO_Init+0x268>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1f      	ldr	r2, [pc, #124]	@ (800379c <HAL_GPIO_Init+0x244>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d031      	beq.n	8003786 <HAL_GPIO_Init+0x22e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a1e      	ldr	r2, [pc, #120]	@ (80037a0 <HAL_GPIO_Init+0x248>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d02b      	beq.n	8003782 <HAL_GPIO_Init+0x22a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <HAL_GPIO_Init+0x24c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d025      	beq.n	800377e <HAL_GPIO_Init+0x226>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <HAL_GPIO_Init+0x250>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01f      	beq.n	800377a <HAL_GPIO_Init+0x222>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ac <HAL_GPIO_Init+0x254>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d019      	beq.n	8003776 <HAL_GPIO_Init+0x21e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <HAL_GPIO_Init+0x258>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_GPIO_Init+0x21a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <HAL_GPIO_Init+0x25c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00d      	beq.n	800376e <HAL_GPIO_Init+0x216>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a18      	ldr	r2, [pc, #96]	@ (80037b8 <HAL_GPIO_Init+0x260>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <HAL_GPIO_Init+0x212>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a17      	ldr	r2, [pc, #92]	@ (80037bc <HAL_GPIO_Init+0x264>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_GPIO_Init+0x20e>
 8003762:	2309      	movs	r3, #9
 8003764:	e02d      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 8003766:	230a      	movs	r3, #10
 8003768:	e02b      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 800376a:	2308      	movs	r3, #8
 800376c:	e029      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 800376e:	2307      	movs	r3, #7
 8003770:	e027      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 8003772:	2306      	movs	r3, #6
 8003774:	e025      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 8003776:	2305      	movs	r3, #5
 8003778:	e023      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 800377a:	2304      	movs	r3, #4
 800377c:	e021      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 800377e:	2303      	movs	r3, #3
 8003780:	e01f      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 8003782:	2302      	movs	r3, #2
 8003784:	e01d      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 8003786:	2301      	movs	r3, #1
 8003788:	e01b      	b.n	80037c2 <HAL_GPIO_Init+0x26a>
 800378a:	bf00      	nop
 800378c:	58000080 	.word	0x58000080
 8003790:	58024400 	.word	0x58024400
 8003794:	58000400 	.word	0x58000400
 8003798:	58020000 	.word	0x58020000
 800379c:	58020400 	.word	0x58020400
 80037a0:	58020800 	.word	0x58020800
 80037a4:	58020c00 	.word	0x58020c00
 80037a8:	58021000 	.word	0x58021000
 80037ac:	58021400 	.word	0x58021400
 80037b0:	58021800 	.word	0x58021800
 80037b4:	58021c00 	.word	0x58021c00
 80037b8:	58022000 	.word	0x58022000
 80037bc:	58022400 	.word	0x58022400
 80037c0:	2300      	movs	r3, #0
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	f002 0203 	and.w	r2, r2, #3
 80037c8:	0092      	lsls	r2, r2, #2
 80037ca:	4093      	lsls	r3, r2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d2:	4938      	ldr	r1, [pc, #224]	@ (80038b4 <HAL_GPIO_Init+0x35c>)
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	3302      	adds	r3, #2
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800380e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	3301      	adds	r3, #1
 8003894:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f47f ae63 	bne.w	800356c <HAL_GPIO_Init+0x14>
  }
}
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
 80038aa:	3724      	adds	r7, #36	@ 0x24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	58000400 	.word	0x58000400

080038b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c8:	787b      	ldrb	r3, [r7, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038d4:	e003      	b.n	80038de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e10d      	b.n	8003b1a <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd f89e 	bl	8000a54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d008      	beq.n	8003960 <HAL_I2S_Init+0x74>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d004      	beq.n	8003960 <HAL_I2S_Init+0x74>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b0a      	cmp	r3, #10
 800395c:	f040 8087 	bne.w	8003a6e <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d05a      	beq.n	8003a1e <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003970:	2302      	movs	r3, #2
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e001      	b.n	800397a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003976:	2301      	movs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b30      	cmp	r3, #48	@ 0x30
 8003980:	d003      	beq.n	800398a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003986:	2bb0      	cmp	r3, #176	@ 0xb0
 8003988:	d102      	bne.n	8003990 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800398a:	2301      	movs	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e001      	b.n	8003994 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003994:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	f002 fbf4 	bl	8006188 <HAL_RCCEx_GetPeriphCLKFreq>
 80039a0:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039aa:	d113      	bne.n	80039d4 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80039ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	3305      	adds	r3, #5
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e014      	b.n	80039fe <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80039d4:	2220      	movs	r2, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	3305      	adds	r3, #5
 80039fc:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4a48      	ldr	r2, [pc, #288]	@ (8003b24 <HAL_I2S_Init+0x238>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	08db      	lsrs	r3, r3, #3
 8003a08:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e003      	b.n	8003a26 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_I2S_Init+0x146>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d002      	beq.n	8003a38 <HAL_I2S_Init+0x14c>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2bff      	cmp	r3, #255	@ 0xff
 8003a36:	d907      	bls.n	8003a48 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e068      	b.n	8003b1a <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a58:	4b33      	ldr	r3, [pc, #204]	@ (8003b28 <HAL_I2S_Init+0x23c>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	0411      	lsls	r1, r2, #16
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	0612      	lsls	r2, r2, #24
 8003a64:	4311      	orrs	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a74:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <HAL_I2S_Init+0x240>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6851      	ldr	r1, [r2, #4]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	4311      	orrs	r1, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6992      	ldr	r2, [r2, #24]
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a12      	ldr	r2, [r2, #32]
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6912      	ldr	r2, [r2, #16]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8003ab4:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ac4:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d007      	beq.n	8003af4 <HAL_I2S_Init+0x208>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d003      	beq.n	8003af4 <HAL_I2S_Init+0x208>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b0a      	cmp	r3, #10
 8003af2:	d10a      	bne.n	8003b0a <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	cccccccd 	.word	0xcccccccd
 8003b28:	fe00ffff 	.word	0xfe00ffff
 8003b2c:	fdff9040 	.word	0xfdff9040

08003b30 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_I2S_Receive_DMA+0x1e>
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e086      	b.n	8003c60 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e07e      	b.n	8003c60 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2S_Receive_DMA+0x42>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e076      	b.n	8003c60 <HAL_I2S_Receive_DMA+0x130>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c68 <HAL_I2S_Receive_DMA+0x138>)
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <HAL_I2S_Receive_DMA+0x13c>)
 8003bba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c70 <HAL_I2S_Receive_DMA+0x140>)
 8003bc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3330      	adds	r3, #48	@ 0x30
 8003bce:	4619      	mov	r1, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003bda:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003bdc:	f7fd ff40 	bl	8001a60 <HAL_DMA_Start_IT>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d011      	beq.n	8003c0a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bea:	f043 0208 	orr.w	r2, r3, #8
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	e02a      	b.n	8003c60 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c54:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	08003ccb 	.word	0x08003ccb
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	08003ce7 	.word	0x08003ce7

08003c74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c94:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10e      	bne.n	8003cbc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cac:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7fc fe83 	bl	80009c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7fc fe4d 	bl	8000978 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003d02:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1c:	f043 0208 	orr.w	r2, r3, #8
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff ffa5 	bl	8003c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d3c:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <HAL_PWREx_ConfigSupply+0x70>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d00a      	beq.n	8003d5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d48:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <HAL_PWREx_ConfigSupply+0x70>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d001      	beq.n	8003d5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01f      	b.n	8003d9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e01d      	b.n	8003d9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d5e:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <HAL_PWREx_ConfigSupply+0x70>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	490f      	ldr	r1, [pc, #60]	@ (8003da4 <HAL_PWREx_ConfigSupply+0x70>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d6e:	f7fd f9f3 	bl	8001158 <HAL_GetTick>
 8003d72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d74:	e009      	b.n	8003d8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d76:	f7fd f9ef 	bl	8001158 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d84:	d901      	bls.n	8003d8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e007      	b.n	8003d9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <HAL_PWREx_ConfigSupply+0x70>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d96:	d1ee      	bne.n	8003d76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	58024800 	.word	0x58024800

08003da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	@ 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f000 bc48 	b.w	800464c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8088 	beq.w	8003eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dca:	4b99      	ldr	r3, [pc, #612]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dd4:	4b96      	ldr	r3, [pc, #600]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d007      	beq.n	8003df0 <HAL_RCC_OscConfig+0x48>
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	2b18      	cmp	r3, #24
 8003de4:	d111      	bne.n	8003e0a <HAL_RCC_OscConfig+0x62>
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	4b8f      	ldr	r3, [pc, #572]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d06d      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x130>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d169      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f000 bc21 	b.w	800464c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x7a>
 8003e14:	4b86      	ldr	r3, [pc, #536]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a85      	ldr	r2, [pc, #532]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e02e      	b.n	8003e80 <HAL_RCC_OscConfig+0xd8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x9c>
 8003e2a:	4b81      	ldr	r3, [pc, #516]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a80      	ldr	r2, [pc, #512]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b7e      	ldr	r3, [pc, #504]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xd8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0xc0>
 8003e4e:	4b78      	ldr	r3, [pc, #480]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a77      	ldr	r2, [pc, #476]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b75      	ldr	r3, [pc, #468]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a74      	ldr	r2, [pc, #464]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xd8>
 8003e68:	4b71      	ldr	r3, [pc, #452]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a70      	ldr	r2, [pc, #448]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b6e      	ldr	r3, [pc, #440]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6d      	ldr	r2, [pc, #436]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd f966 	bl	8001158 <HAL_GetTick>
 8003e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd f962 	bl	8001158 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e3d4      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ea2:	4b63      	ldr	r3, [pc, #396]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe8>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd f952 	bl	8001158 <HAL_GetTick>
 8003eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd f94e 	bl	8001158 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	@ 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e3c0      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eca:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x110>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80ca 	beq.w	800407c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee8:	4b51      	ldr	r3, [pc, #324]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ef0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_RCC_OscConfig+0x166>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2b18      	cmp	r3, #24
 8003f02:	d156      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x20a>
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d151      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f0e:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCC_OscConfig+0x17e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e392      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f26:	4b42      	ldr	r3, [pc, #264]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 0219 	bic.w	r2, r3, #25
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	493f      	ldr	r1, [pc, #252]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fd f90e 	bl	8001158 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f40:	f7fd f90a 	bl	8001158 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e37c      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f52:	4b37      	ldr	r3, [pc, #220]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	f7fd f907 	bl	8001170 <HAL_GetREVID>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d817      	bhi.n	8003f9c <HAL_RCC_OscConfig+0x1f4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b40      	cmp	r3, #64	@ 0x40
 8003f72:	d108      	bne.n	8003f86 <HAL_RCC_OscConfig+0x1de>
 8003f74:	4b2e      	ldr	r3, [pc, #184]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f84:	e07a      	b.n	800407c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f86:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	031b      	lsls	r3, r3, #12
 8003f94:	4926      	ldr	r1, [pc, #152]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f9a:	e06f      	b.n	800407c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b24      	ldr	r3, [pc, #144]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	4921      	ldr	r1, [pc, #132]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb0:	e064      	b.n	800407c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d047      	beq.n	800404a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fba:	4b1d      	ldr	r3, [pc, #116]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 0219 	bic.w	r2, r3, #25
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	491a      	ldr	r1, [pc, #104]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd f8c4 	bl	8001158 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd4:	f7fd f8c0 	bl	8001158 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e332      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fe6:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	f7fd f8bd 	bl	8001170 <HAL_GetREVID>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d819      	bhi.n	8004034 <HAL_RCC_OscConfig+0x28c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b40      	cmp	r3, #64	@ 0x40
 8004006:	d108      	bne.n	800401a <HAL_RCC_OscConfig+0x272>
 8004008:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004010:	4a07      	ldr	r2, [pc, #28]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004016:	6053      	str	r3, [r2, #4]
 8004018:	e030      	b.n	800407c <HAL_RCC_OscConfig+0x2d4>
 800401a:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	031b      	lsls	r3, r3, #12
 8004028:	4901      	ldr	r1, [pc, #4]	@ (8004030 <HAL_RCC_OscConfig+0x288>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	e025      	b.n	800407c <HAL_RCC_OscConfig+0x2d4>
 8004030:	58024400 	.word	0x58024400
 8004034:	4b9a      	ldr	r3, [pc, #616]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	4997      	ldr	r1, [pc, #604]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
 8004048:	e018      	b.n	800407c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b95      	ldr	r3, [pc, #596]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a94      	ldr	r2, [pc, #592]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fd f87f 	bl	8001158 <HAL_GetTick>
 800405a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405e:	f7fd f87b 	bl	8001158 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e2ed      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004070:	4b8b      	ldr	r3, [pc, #556]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80a9 	beq.w	80041dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408a:	4b85      	ldr	r3, [pc, #532]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004092:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004094:	4b82      	ldr	r3, [pc, #520]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d007      	beq.n	80040b0 <HAL_RCC_OscConfig+0x308>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b18      	cmp	r3, #24
 80040a4:	d13a      	bne.n	800411c <HAL_RCC_OscConfig+0x374>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d135      	bne.n	800411c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040b0:	4b7b      	ldr	r3, [pc, #492]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x320>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	2b80      	cmp	r3, #128	@ 0x80
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e2c1      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040c8:	f7fd f852 	bl	8001170 <HAL_GetREVID>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d817      	bhi.n	8004106 <HAL_RCC_OscConfig+0x35e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d108      	bne.n	80040f0 <HAL_RCC_OscConfig+0x348>
 80040de:	4b70      	ldr	r3, [pc, #448]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040e6:	4a6e      	ldr	r2, [pc, #440]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80040e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ee:	e075      	b.n	80041dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040f0:	4b6b      	ldr	r3, [pc, #428]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	069b      	lsls	r3, r3, #26
 80040fe:	4968      	ldr	r1, [pc, #416]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004104:	e06a      	b.n	80041dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004106:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	4962      	ldr	r1, [pc, #392]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800411a:	e05f      	b.n	80041dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d042      	beq.n	80041aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004124:	4b5e      	ldr	r3, [pc, #376]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5d      	ldr	r2, [pc, #372]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd f812 	bl	8001158 <HAL_GetTick>
 8004134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004138:	f7fd f80e 	bl	8001158 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e280      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800414a:	4b55      	ldr	r3, [pc, #340]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004156:	f7fd f80b 	bl	8001170 <HAL_GetREVID>
 800415a:	4603      	mov	r3, r0
 800415c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004160:	4293      	cmp	r3, r2
 8004162:	d817      	bhi.n	8004194 <HAL_RCC_OscConfig+0x3ec>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	2b20      	cmp	r3, #32
 800416a:	d108      	bne.n	800417e <HAL_RCC_OscConfig+0x3d6>
 800416c:	4b4c      	ldr	r3, [pc, #304]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004174:	4a4a      	ldr	r2, [pc, #296]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800417a:	6053      	str	r3, [r2, #4]
 800417c:	e02e      	b.n	80041dc <HAL_RCC_OscConfig+0x434>
 800417e:	4b48      	ldr	r3, [pc, #288]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	069b      	lsls	r3, r3, #26
 800418c:	4944      	ldr	r1, [pc, #272]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
 8004192:	e023      	b.n	80041dc <HAL_RCC_OscConfig+0x434>
 8004194:	4b42      	ldr	r3, [pc, #264]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	493f      	ldr	r1, [pc, #252]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
 80041a8:	e018      	b.n	80041dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041aa:	4b3d      	ldr	r3, [pc, #244]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3c      	ldr	r2, [pc, #240]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fc ffcf 	bl	8001158 <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041be:	f7fc ffcb 	bl	8001158 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e23d      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041d0:	4b33      	ldr	r3, [pc, #204]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d036      	beq.n	8004256 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d019      	beq.n	8004224 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f0:	4b2b      	ldr	r3, [pc, #172]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80041f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f4:	4a2a      	ldr	r2, [pc, #168]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fc ffac 	bl	8001158 <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004204:	f7fc ffa8 	bl	8001158 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e21a      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004216:	4b22      	ldr	r3, [pc, #136]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x45c>
 8004222:	e018      	b.n	8004256 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004224:	4b1e      	ldr	r3, [pc, #120]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fc ff92 	bl	8001158 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004238:	f7fc ff8e 	bl	8001158 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e200      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d039      	beq.n	80042d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800426a:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004276:	f7fc ff6f 	bl	8001158 <HAL_GetTick>
 800427a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800427e:	f7fc ff6b 	bl	8001158 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1dd      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004290:	4b03      	ldr	r3, [pc, #12]	@ (80042a0 <HAL_RCC_OscConfig+0x4f8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x4d6>
 800429c:	e01b      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
 800429e:	bf00      	nop
 80042a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042a4:	4b9b      	ldr	r3, [pc, #620]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a9a      	ldr	r2, [pc, #616]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80042aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042b0:	f7fc ff52 	bl	8001158 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b8:	f7fc ff4e 	bl	8001158 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e1c0      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042ca:	4b92      	ldr	r3, [pc, #584]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8081 	beq.w	80043e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004518 <HAL_RCC_OscConfig+0x770>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a8b      	ldr	r2, [pc, #556]	@ (8004518 <HAL_RCC_OscConfig+0x770>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042f0:	f7fc ff32 	bl	8001158 <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fc ff2e 	bl	8001158 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	@ 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1a0      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800430a:	4b83      	ldr	r3, [pc, #524]	@ (8004518 <HAL_RCC_OscConfig+0x770>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d106      	bne.n	800432c <HAL_RCC_OscConfig+0x584>
 800431e:	4b7d      	ldr	r3, [pc, #500]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004322:	4a7c      	ldr	r2, [pc, #496]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6713      	str	r3, [r2, #112]	@ 0x70
 800432a:	e02d      	b.n	8004388 <HAL_RCC_OscConfig+0x5e0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10c      	bne.n	800434e <HAL_RCC_OscConfig+0x5a6>
 8004334:	4b77      	ldr	r3, [pc, #476]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004338:	4a76      	ldr	r2, [pc, #472]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004340:	4b74      	ldr	r3, [pc, #464]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	4a73      	ldr	r2, [pc, #460]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004346:	f023 0304 	bic.w	r3, r3, #4
 800434a:	6713      	str	r3, [r2, #112]	@ 0x70
 800434c:	e01c      	b.n	8004388 <HAL_RCC_OscConfig+0x5e0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b05      	cmp	r3, #5
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c8>
 8004356:	4b6f      	ldr	r3, [pc, #444]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435a:	4a6e      	ldr	r2, [pc, #440]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	6713      	str	r3, [r2, #112]	@ 0x70
 8004362:	4b6c      	ldr	r3, [pc, #432]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a6b      	ldr	r2, [pc, #428]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	@ 0x70
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0x5e0>
 8004370:	4b68      	ldr	r3, [pc, #416]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004374:	4a67      	ldr	r2, [pc, #412]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	6713      	str	r3, [r2, #112]	@ 0x70
 800437c:	4b65      	ldr	r3, [pc, #404]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	4a64      	ldr	r2, [pc, #400]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004382:	f023 0304 	bic.w	r3, r3, #4
 8004386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fc fee2 	bl	8001158 <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fc fede 	bl	8001158 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e14e      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ae:	4b59      	ldr	r3, [pc, #356]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ee      	beq.n	8004398 <HAL_RCC_OscConfig+0x5f0>
 80043ba:	e014      	b.n	80043e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7fc fecc 	bl	8001158 <HAL_GetTick>
 80043c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043c2:	e00a      	b.n	80043da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c4:	f7fc fec8 	bl	8001158 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e138      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043da:	4b4e      	ldr	r3, [pc, #312]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ee      	bne.n	80043c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 812d 	beq.w	800464a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043f0:	4b48      	ldr	r3, [pc, #288]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043f8:	2b18      	cmp	r3, #24
 80043fa:	f000 80bd 	beq.w	8004578 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	2b02      	cmp	r3, #2
 8004404:	f040 809e 	bne.w	8004544 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b42      	ldr	r3, [pc, #264]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a41      	ldr	r2, [pc, #260]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fc fea0 	bl	8001158 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fc fe9c 	bl	8001158 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e10e      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800442e:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443a:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 800443c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800443e:	4b37      	ldr	r3, [pc, #220]	@ (800451c <HAL_RCC_OscConfig+0x774>)
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800444a:	0112      	lsls	r2, r2, #4
 800444c:	430a      	orrs	r2, r1
 800444e:	4931      	ldr	r1, [pc, #196]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	628b      	str	r3, [r1, #40]	@ 0x28
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	3b01      	subs	r3, #1
 800445a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004462:	3b01      	subs	r3, #1
 8004464:	025b      	lsls	r3, r3, #9
 8004466:	b29b      	uxth	r3, r3
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446e:	3b01      	subs	r3, #1
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	3b01      	subs	r3, #1
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004484:	4923      	ldr	r1, [pc, #140]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800448a:	4b22      	ldr	r3, [pc, #136]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 800448c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448e:	4a21      	ldr	r2, [pc, #132]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004496:	4b1f      	ldr	r3, [pc, #124]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800449a:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <HAL_RCC_OscConfig+0x778>)
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044a2:	00d2      	lsls	r2, r2, #3
 80044a4:	491b      	ldr	r1, [pc, #108]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	f023 020c 	bic.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	4917      	ldr	r1, [pc, #92]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044bc:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	f023 0202 	bic.w	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	4912      	ldr	r1, [pc, #72]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044ce:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	4a10      	ldr	r2, [pc, #64]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044da:	4b0e      	ldr	r3, [pc, #56]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	4a0d      	ldr	r2, [pc, #52]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80044f2:	4b08      	ldr	r3, [pc, #32]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	4a07      	ldr	r2, [pc, #28]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fe:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <HAL_RCC_OscConfig+0x76c>)
 8004504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fc fe25 	bl	8001158 <HAL_GetTick>
 800450e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004510:	e011      	b.n	8004536 <HAL_RCC_OscConfig+0x78e>
 8004512:	bf00      	nop
 8004514:	58024400 	.word	0x58024400
 8004518:	58024800 	.word	0x58024800
 800451c:	fffffc0c 	.word	0xfffffc0c
 8004520:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004524:	f7fc fe18 	bl	8001158 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e08a      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004536:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x77c>
 8004542:	e082      	b.n	800464a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004544:	4b43      	ldr	r3, [pc, #268]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a42      	ldr	r2, [pc, #264]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 800454a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800454e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fc fe02 	bl	8001158 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004558:	f7fc fdfe 	bl	8001158 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e070      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800456a:	4b3a      	ldr	r3, [pc, #232]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x7b0>
 8004576:	e068      	b.n	800464a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004578:	4b36      	ldr	r3, [pc, #216]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800457e:	4b35      	ldr	r3, [pc, #212]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	2b01      	cmp	r3, #1
 800458a:	d031      	beq.n	80045f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f003 0203 	and.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d12a      	bne.n	80045f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d122      	bne.n	80045f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d11a      	bne.n	80045f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0a5b      	lsrs	r3, r3, #9
 80045be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d111      	bne.n	80045f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d108      	bne.n	80045f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	0e1b      	lsrs	r3, r3, #24
 80045e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e02b      	b.n	800464c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80045f4:	4b17      	ldr	r3, [pc, #92]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 80045f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	429a      	cmp	r2, r3
 8004608:	d01f      	beq.n	800464a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800460a:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	4a11      	ldr	r2, [pc, #68]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004616:	f7fc fd9f 	bl	8001158 <HAL_GetTick>
 800461a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800461c:	bf00      	nop
 800461e:	f7fc fd9b 	bl	8001158 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	4293      	cmp	r3, r2
 8004628:	d0f9      	beq.n	800461e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800462a:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 800462c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800462e:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <HAL_RCC_OscConfig+0x8b0>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004636:	00d2      	lsls	r2, r2, #3
 8004638:	4906      	ldr	r1, [pc, #24]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 800463a:	4313      	orrs	r3, r2
 800463c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800463e:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	4a04      	ldr	r2, [pc, #16]	@ (8004654 <HAL_RCC_OscConfig+0x8ac>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3730      	adds	r7, #48	@ 0x30
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	58024400 	.word	0x58024400
 8004658:	ffff0007 	.word	0xffff0007

0800465c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e19c      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b8a      	ldr	r3, [pc, #552]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d910      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b87      	ldr	r3, [pc, #540]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 020f 	bic.w	r2, r3, #15
 8004686:	4985      	ldr	r1, [pc, #532]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b83      	ldr	r3, [pc, #524]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e184      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	4b7b      	ldr	r3, [pc, #492]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d908      	bls.n	80046ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046bc:	4b78      	ldr	r3, [pc, #480]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	4975      	ldr	r1, [pc, #468]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	4b70      	ldr	r3, [pc, #448]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d908      	bls.n	80046fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046ea:	4b6d      	ldr	r3, [pc, #436]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	496a      	ldr	r1, [pc, #424]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d010      	beq.n	800472a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699a      	ldr	r2, [r3, #24]
 800470c:	4b64      	ldr	r3, [pc, #400]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004714:	429a      	cmp	r2, r3
 8004716:	d908      	bls.n	800472a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004718:	4b61      	ldr	r3, [pc, #388]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	495e      	ldr	r1, [pc, #376]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004726:	4313      	orrs	r3, r2
 8004728:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	4b59      	ldr	r3, [pc, #356]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004742:	429a      	cmp	r2, r3
 8004744:	d908      	bls.n	8004758 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004746:	4b56      	ldr	r3, [pc, #344]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	4953      	ldr	r1, [pc, #332]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004754:	4313      	orrs	r3, r2
 8004756:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d010      	beq.n	8004786 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4b4d      	ldr	r3, [pc, #308]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	429a      	cmp	r2, r3
 8004772:	d908      	bls.n	8004786 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b4a      	ldr	r3, [pc, #296]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f023 020f 	bic.w	r2, r3, #15
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4947      	ldr	r1, [pc, #284]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004782:	4313      	orrs	r3, r2
 8004784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d055      	beq.n	800483e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004792:	4b43      	ldr	r3, [pc, #268]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4940      	ldr	r1, [pc, #256]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ac:	4b3c      	ldr	r3, [pc, #240]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d121      	bne.n	80047fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0f6      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047c4:	4b36      	ldr	r3, [pc, #216]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d115      	bne.n	80047fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0ea      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d107      	bne.n	80047ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047dc:	4b30      	ldr	r3, [pc, #192]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0de      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ec:	4b2c      	ldr	r3, [pc, #176]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0d6      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047fc:	4b28      	ldr	r3, [pc, #160]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f023 0207 	bic.w	r2, r3, #7
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4925      	ldr	r1, [pc, #148]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 800480a:	4313      	orrs	r3, r2
 800480c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480e:	f7fc fca3 	bl	8001158 <HAL_GetTick>
 8004812:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004814:	e00a      	b.n	800482c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004816:	f7fc fc9f 	bl	8001158 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e0be      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482c:	4b1c      	ldr	r3, [pc, #112]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	429a      	cmp	r2, r3
 800483c:	d1eb      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d010      	beq.n	800486c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	429a      	cmp	r2, r3
 8004858:	d208      	bcs.n	800486c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485a:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	490e      	ldr	r1, [pc, #56]	@ (80048a0 <HAL_RCC_ClockConfig+0x244>)
 8004868:	4313      	orrs	r3, r2
 800486a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d214      	bcs.n	80048a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b08      	ldr	r3, [pc, #32]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 020f 	bic.w	r2, r3, #15
 8004882:	4906      	ldr	r1, [pc, #24]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b04      	ldr	r3, [pc, #16]	@ (800489c <HAL_RCC_ClockConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e086      	b.n	80049aa <HAL_RCC_ClockConfig+0x34e>
 800489c:	52002000 	.word	0x52002000
 80048a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d010      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	4b3f      	ldr	r3, [pc, #252]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048bc:	429a      	cmp	r2, r3
 80048be:	d208      	bcs.n	80048d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048c0:	4b3c      	ldr	r3, [pc, #240]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	4939      	ldr	r1, [pc, #228]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	4b34      	ldr	r3, [pc, #208]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d208      	bcs.n	8004900 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048ee:	4b31      	ldr	r3, [pc, #196]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	492e      	ldr	r1, [pc, #184]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d010      	beq.n	800492e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	4b28      	ldr	r3, [pc, #160]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004918:	429a      	cmp	r2, r3
 800491a:	d208      	bcs.n	800492e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800491c:	4b25      	ldr	r3, [pc, #148]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4922      	ldr	r1, [pc, #136]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 800492a:	4313      	orrs	r3, r2
 800492c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	4b1d      	ldr	r3, [pc, #116]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004946:	429a      	cmp	r2, r3
 8004948:	d208      	bcs.n	800495c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800494a:	4b1a      	ldr	r3, [pc, #104]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4917      	ldr	r1, [pc, #92]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 8004958:	4313      	orrs	r3, r2
 800495a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800495c:	f000 f834 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b14      	ldr	r3, [pc, #80]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	4912      	ldr	r1, [pc, #72]	@ (80049b8 <HAL_RCC_ClockConfig+0x35c>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800497a:	4b0e      	ldr	r3, [pc, #56]	@ (80049b4 <HAL_RCC_ClockConfig+0x358>)
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	4a0d      	ldr	r2, [pc, #52]	@ (80049b8 <HAL_RCC_ClockConfig+0x35c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	4a0a      	ldr	r2, [pc, #40]	@ (80049bc <HAL_RCC_ClockConfig+0x360>)
 8004992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004994:	4a0a      	ldr	r2, [pc, #40]	@ (80049c0 <HAL_RCC_ClockConfig+0x364>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800499a:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x368>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc fb90 	bl	80010c4 <HAL_InitTick>
 80049a4:	4603      	mov	r3, r0
 80049a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	58024400 	.word	0x58024400
 80049b8:	080087a4 	.word	0x080087a4
 80049bc:	24000008 	.word	0x24000008
 80049c0:	24000004 	.word	0x24000004
 80049c4:	2400001c 	.word	0x2400001c

080049c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	@ 0x24
 80049cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ce:	4bb3      	ldr	r3, [pc, #716]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049d6:	2b18      	cmp	r3, #24
 80049d8:	f200 8155 	bhi.w	8004c86 <HAL_RCC_GetSysClockFreq+0x2be>
 80049dc:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a49 	.word	0x08004a49
 80049e8:	08004c87 	.word	0x08004c87
 80049ec:	08004c87 	.word	0x08004c87
 80049f0:	08004c87 	.word	0x08004c87
 80049f4:	08004c87 	.word	0x08004c87
 80049f8:	08004c87 	.word	0x08004c87
 80049fc:	08004c87 	.word	0x08004c87
 8004a00:	08004c87 	.word	0x08004c87
 8004a04:	08004a6f 	.word	0x08004a6f
 8004a08:	08004c87 	.word	0x08004c87
 8004a0c:	08004c87 	.word	0x08004c87
 8004a10:	08004c87 	.word	0x08004c87
 8004a14:	08004c87 	.word	0x08004c87
 8004a18:	08004c87 	.word	0x08004c87
 8004a1c:	08004c87 	.word	0x08004c87
 8004a20:	08004c87 	.word	0x08004c87
 8004a24:	08004a75 	.word	0x08004a75
 8004a28:	08004c87 	.word	0x08004c87
 8004a2c:	08004c87 	.word	0x08004c87
 8004a30:	08004c87 	.word	0x08004c87
 8004a34:	08004c87 	.word	0x08004c87
 8004a38:	08004c87 	.word	0x08004c87
 8004a3c:	08004c87 	.word	0x08004c87
 8004a40:	08004c87 	.word	0x08004c87
 8004a44:	08004a7b 	.word	0x08004a7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a48:	4b94      	ldr	r3, [pc, #592]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d009      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a54:	4b91      	ldr	r3, [pc, #580]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	08db      	lsrs	r3, r3, #3
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	4a90      	ldr	r2, [pc, #576]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a66:	e111      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a68:	4b8d      	ldr	r3, [pc, #564]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a6a:	61bb      	str	r3, [r7, #24]
      break;
 8004a6c:	e10e      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a70:	61bb      	str	r3, [r7, #24]
      break;
 8004a72:	e10b      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a74:	4b8c      	ldr	r3, [pc, #560]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a76:	61bb      	str	r3, [r7, #24]
      break;
 8004a78:	e108      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a7a:	4b88      	ldr	r3, [pc, #544]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a84:	4b85      	ldr	r3, [pc, #532]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a90:	4b82      	ldr	r3, [pc, #520]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a9a:	4b80      	ldr	r3, [pc, #512]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80e1 	beq.w	8004c80 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f000 8083 	beq.w	8004bcc <HAL_RCC_GetSysClockFreq+0x204>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f200 80a1 	bhi.w	8004c10 <HAL_RCC_GetSysClockFreq+0x248>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x114>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d056      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ada:	e099      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004adc:	4b6f      	ldr	r3, [pc, #444]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02d      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b62      	ldr	r3, [pc, #392]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b42:	e087      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004cb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b51      	ldr	r3, [pc, #324]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b86:	e065      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b40      	ldr	r3, [pc, #256]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bca:	e043      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b2f      	ldr	r3, [pc, #188]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c0e:	e021      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b1e      	ldr	r3, [pc, #120]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c54:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	0a5b      	lsrs	r3, r3, #9
 8004c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c5e:	3301      	adds	r3, #1
 8004c60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c78:	ee17 3a90 	vmov	r3, s15
 8004c7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c7e:	e005      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
      break;
 8004c84:	e002      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c86:	4b07      	ldr	r3, [pc, #28]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c88:	61bb      	str	r3, [r7, #24]
      break;
 8004c8a:	bf00      	nop
  }

  return sysclockfreq;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3724      	adds	r7, #36	@ 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	03d09000 	.word	0x03d09000
 8004ca4:	003d0900 	.word	0x003d0900
 8004ca8:	007a1200 	.word	0x007a1200
 8004cac:	46000000 	.word	0x46000000
 8004cb0:	4c742400 	.word	0x4c742400
 8004cb4:	4a742400 	.word	0x4a742400
 8004cb8:	4af42400 	.word	0x4af42400

08004cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cc2:	f7ff fe81 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490f      	ldr	r1, [pc, #60]	@ (8004d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	4a09      	ldr	r2, [pc, #36]	@ (8004d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cea:	5cd3      	ldrb	r3, [r2, r3]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf6:	4a07      	ldr	r2, [pc, #28]	@ (8004d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cfa:	4a07      	ldr	r2, [pc, #28]	@ (8004d18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d02:	681b      	ldr	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	58024400 	.word	0x58024400
 8004d10:	080087a4 	.word	0x080087a4
 8004d14:	24000008 	.word	0x24000008
 8004d18:	24000004 	.word	0x24000004

08004d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d20:	f7ff ffcc 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	@ (8004d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	58024400 	.word	0x58024400
 8004d44:	080087a4 	.word	0x080087a4

08004d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d4c:	f7ff ffb6 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4904      	ldr	r1, [pc, #16]	@ (8004d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	080087a4 	.word	0x080087a4

08004d74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d78:	b0ca      	sub	sp, #296	@ 0x128
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d98:	2500      	movs	r5, #0
 8004d9a:	ea54 0305 	orrs.w	r3, r4, r5
 8004d9e:	d049      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004da6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004daa:	d02f      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004dac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004db0:	d828      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004db6:	d01a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004db8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dbc:	d822      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dc6:	d007      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dca:	4bb8      	ldr	r3, [pc, #736]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	4ab7      	ldr	r2, [pc, #732]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dd6:	e01a      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	3308      	adds	r3, #8
 8004dde:	2102      	movs	r1, #2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 fb61 	bl	80074a8 <RCCEx_PLL2_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dec:	e00f      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df2:	3328      	adds	r3, #40	@ 0x28
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f002 fc08 	bl	800760c <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e16:	4ba5      	ldr	r3, [pc, #660]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e24:	4aa1      	ldr	r2, [pc, #644]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e26:	430b      	orrs	r3, r1
 8004e28:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e2a:	e003      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e40:	f04f 0900 	mov.w	r9, #0
 8004e44:	ea58 0309 	orrs.w	r3, r8, r9
 8004e48:	d047      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d82a      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e54:	a201      	add	r2, pc, #4	@ (adr r2, 8004e5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004e71 	.word	0x08004e71
 8004e60:	08004e7f 	.word	0x08004e7f
 8004e64:	08004e95 	.word	0x08004e95
 8004e68:	08004eb3 	.word	0x08004eb3
 8004e6c:	08004eb3 	.word	0x08004eb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e70:	4b8e      	ldr	r3, [pc, #568]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	4a8d      	ldr	r2, [pc, #564]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e7c:	e01a      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	3308      	adds	r3, #8
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f002 fb0e 	bl	80074a8 <RCCEx_PLL2_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e92:	e00f      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e98:	3328      	adds	r3, #40	@ 0x28
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f002 fbb5 	bl	800760c <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ea8:	e004      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec0:	f023 0107 	bic.w	r1, r3, #7
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eca:	4a78      	ldr	r2, [pc, #480]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ed0:	e003      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004ee6:	f04f 0b00 	mov.w	fp, #0
 8004eea:	ea5a 030b 	orrs.w	r3, sl, fp
 8004eee:	d04c      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efa:	d030      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f00:	d829      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f04:	d02d      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f08:	d825      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f0a:	2b80      	cmp	r3, #128	@ 0x80
 8004f0c:	d018      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f0e:	2b80      	cmp	r3, #128	@ 0x80
 8004f10:	d821      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	d007      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f1a:	e01c      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4b63      	ldr	r3, [pc, #396]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4a62      	ldr	r2, [pc, #392]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f28:	e01c      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	3308      	adds	r3, #8
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f002 fab8 	bl	80074a8 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f3e:	e011      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f44:	3328      	adds	r3, #40	@ 0x28
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f002 fb5f 	bl	800760c <RCCEx_PLL3_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004fa0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	d053      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fb6:	d035      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004fb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fbc:	d82e      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fc2:	d031      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004fc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fc8:	d828      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fce:	d01a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd4:	d822      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004fda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fde:	d007      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004fe0:	e01c      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe2:	4b32      	ldr	r3, [pc, #200]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a31      	ldr	r2, [pc, #196]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fee:	e01c      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 fa55 	bl	80074a8 <RCCEx_PLL2_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005004:	e011      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500a:	3328      	adds	r3, #40	@ 0x28
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f002 fafc 	bl	800760c <RCCEx_PLL3_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800501a:	e006      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005022:	e002      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005024:	bf00      	nop
 8005026:	e000      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005032:	4b1e      	ldr	r3, [pc, #120]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005042:	4a1a      	ldr	r2, [pc, #104]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6593      	str	r3, [r2, #88]	@ 0x58
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800505e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005062:	2300      	movs	r3, #0
 8005064:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005068:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d056      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800507a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800507e:	d038      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005084:	d831      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005086:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800508a:	d034      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800508c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005090:	d82b      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005096:	d01d      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800509c:	d825      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80050a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050a8:	e01f      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4ba2      	ldr	r3, [pc, #648]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	4aa1      	ldr	r2, [pc, #644]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050bc:	e01c      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c2:	3308      	adds	r3, #8
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f002 f9ee 	bl	80074a8 <RCCEx_PLL2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050d2:	e011      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	3328      	adds	r3, #40	@ 0x28
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f002 fa95 	bl	800760c <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050e8:	e006      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050f0:	e002      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005100:	4b8e      	ldr	r3, [pc, #568]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005104:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005110:	4a8a      	ldr	r2, [pc, #552]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005112:	430b      	orrs	r3, r1
 8005114:	6593      	str	r3, [r2, #88]	@ 0x58
 8005116:	e003      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800512c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005136:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d03a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005146:	2b30      	cmp	r3, #48	@ 0x30
 8005148:	d01f      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800514a:	2b30      	cmp	r3, #48	@ 0x30
 800514c:	d819      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800514e:	2b20      	cmp	r3, #32
 8005150:	d00c      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005152:	2b20      	cmp	r3, #32
 8005154:	d815      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d019      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800515a:	2b10      	cmp	r3, #16
 800515c:	d111      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515e:	4b77      	ldr	r3, [pc, #476]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	4a76      	ldr	r2, [pc, #472]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800516a:	e011      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005170:	3308      	adds	r3, #8
 8005172:	2102      	movs	r1, #2
 8005174:	4618      	mov	r0, r3
 8005176:	f002 f997 	bl	80074a8 <RCCEx_PLL2_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005180:	e006      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005188:	e002      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800518a:	bf00      	nop
 800518c:	e000      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800518e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005198:	4b68      	ldr	r3, [pc, #416]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800519a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a6:	4a65      	ldr	r2, [pc, #404]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051a8:	430b      	orrs	r3, r1
 80051aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051ac:	e003      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80051c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051c6:	2300      	movs	r3, #0
 80051c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4313      	orrs	r3, r2
 80051d4:	d051      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051e0:	d035      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051e6:	d82e      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051ec:	d031      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051f2:	d828      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f8:	d01a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80051fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051fe:	d822      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005208:	d007      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800520a:	e01c      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520c:	4b4b      	ldr	r3, [pc, #300]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	4a4a      	ldr	r2, [pc, #296]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005216:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005218:	e01c      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521e:	3308      	adds	r3, #8
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f002 f940 	bl	80074a8 <RCCEx_PLL2_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800522e:	e011      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005234:	3328      	adds	r3, #40	@ 0x28
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f002 f9e7 	bl	800760c <RCCEx_PLL3_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800524c:	e002      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800525c:	4b37      	ldr	r3, [pc, #220]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800525e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005260:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526a:	4a34      	ldr	r2, [pc, #208]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800526c:	430b      	orrs	r3, r1
 800526e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005270:	e003      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005290:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005294:	460b      	mov	r3, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	d056      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052a4:	d033      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80052a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052aa:	d82c      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052b0:	d02f      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80052b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052b6:	d826      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052bc:	d02b      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80052be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052c2:	d820      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052c8:	d012      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80052ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ce:	d81a      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d022      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d8:	d115      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052de:	3308      	adds	r3, #8
 80052e0:	2101      	movs	r1, #1
 80052e2:	4618      	mov	r0, r3
 80052e4:	f002 f8e0 	bl	80074a8 <RCCEx_PLL2_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052ee:	e015      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	3328      	adds	r3, #40	@ 0x28
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f002 f987 	bl	800760c <RCCEx_PLL3_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005304:	e00a      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800530c:	e006      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800530e:	bf00      	nop
 8005310:	e004      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800531a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10d      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005324:	4b05      	ldr	r3, [pc, #20]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005328:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005332:	4a02      	ldr	r2, [pc, #8]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6513      	str	r3, [r2, #80]	@ 0x50
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800535e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d055      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005374:	d033      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800537a:	d82c      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005380:	d02f      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	d826      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005388:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800538c:	d02b      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800538e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005392:	d820      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005398:	d012      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800539a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800539e:	d81a      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d022      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80053a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a8:	d115      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	3308      	adds	r3, #8
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 f878 	bl	80074a8 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053be:	e015      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c4:	3328      	adds	r3, #40	@ 0x28
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f002 f91f 	bl	800760c <RCCEx_PLL3_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053d4:	e00a      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053dc:	e006      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053de:	bf00      	nop
 80053e0:	e004      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053e2:	bf00      	nop
 80053e4:	e002      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053f4:	4ba3      	ldr	r3, [pc, #652]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005404:	4a9f      	ldr	r2, [pc, #636]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005406:	430b      	orrs	r3, r1
 8005408:	6593      	str	r3, [r2, #88]	@ 0x58
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005424:	2300      	movs	r3, #0
 8005426:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800542a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800542e:	460b      	mov	r3, r1
 8005430:	4313      	orrs	r3, r2
 8005432:	d037      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800543e:	d00e      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005444:	d816      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d018      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800544a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800544e:	d111      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005450:	4b8c      	ldr	r3, [pc, #560]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	4a8b      	ldr	r2, [pc, #556]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800545c:	e00f      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	3308      	adds	r3, #8
 8005464:	2101      	movs	r1, #1
 8005466:	4618      	mov	r0, r3
 8005468:	f002 f81e 	bl	80074a8 <RCCEx_PLL2_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005472:	e004      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005486:	4b7f      	ldr	r3, [pc, #508]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005494:	4a7b      	ldr	r2, [pc, #492]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005496:	430b      	orrs	r3, r1
 8005498:	6513      	str	r3, [r2, #80]	@ 0x50
 800549a:	e003      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80054b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054be:	460b      	mov	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	d039      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d81c      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	08005511 	.word	0x08005511
 80054d8:	080054e5 	.word	0x080054e5
 80054dc:	080054f3 	.word	0x080054f3
 80054e0:	08005511 	.word	0x08005511
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e4:	4b67      	ldr	r3, [pc, #412]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	4a66      	ldr	r2, [pc, #408]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054f0:	e00f      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	3308      	adds	r3, #8
 80054f8:	2102      	movs	r1, #2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 ffd4 	bl	80074a8 <RCCEx_PLL2_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005506:	e004      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800550e:	e000      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800551a:	4b5a      	ldr	r3, [pc, #360]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800551c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551e:	f023 0103 	bic.w	r1, r3, #3
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005528:	4a56      	ldr	r2, [pc, #344]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800552a:	430b      	orrs	r3, r1
 800552c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800552e:	e003      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005544:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800554e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005552:	460b      	mov	r3, r1
 8005554:	4313      	orrs	r3, r2
 8005556:	f000 809f 	beq.w	8005698 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800555a:	4b4b      	ldr	r3, [pc, #300]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a4a      	ldr	r2, [pc, #296]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005564:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005566:	f7fb fdf7 	bl	8001158 <HAL_GetTick>
 800556a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800556e:	e00b      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005570:	f7fb fdf2 	bl	8001158 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b64      	cmp	r3, #100	@ 0x64
 800557e:	d903      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005586:	e005      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005588:	4b3f      	ldr	r3, [pc, #252]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ed      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005598:	2b00      	cmp	r3, #0
 800559a:	d179      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800559c:	4b39      	ldr	r3, [pc, #228]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800559e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055a8:	4053      	eors	r3, r2
 80055aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d015      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055b2:	4b34      	ldr	r3, [pc, #208]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055be:	4b31      	ldr	r3, [pc, #196]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c2:	4a30      	ldr	r2, [pc, #192]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ea:	d118      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fb fdb4 	bl	8001158 <HAL_GetTick>
 80055f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055f4:	e00d      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f6:	f7fb fdaf 	bl	8001158 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005600:	1ad2      	subs	r2, r2, r3
 8005602:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005606:	429a      	cmp	r2, r3
 8005608:	d903      	bls.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005610:	e005      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005612:	4b1c      	ldr	r3, [pc, #112]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0eb      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800561e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005622:	2b00      	cmp	r3, #0
 8005624:	d129      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800562e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005636:	d10e      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005638:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005648:	091a      	lsrs	r2, r3, #4
 800564a:	4b10      	ldr	r3, [pc, #64]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800564c:	4013      	ands	r3, r2
 800564e:	4a0d      	ldr	r2, [pc, #52]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005650:	430b      	orrs	r3, r1
 8005652:	6113      	str	r3, [r2, #16]
 8005654:	e005      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005656:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	4a0a      	ldr	r2, [pc, #40]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800565c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005660:	6113      	str	r3, [r2, #16]
 8005662:	4b08      	ldr	r3, [pc, #32]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005664:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800566e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005672:	4a04      	ldr	r2, [pc, #16]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6713      	str	r3, [r2, #112]	@ 0x70
 8005678:	e00e      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800567a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005682:	e009      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005684:	58024400 	.word	0x58024400
 8005688:	58024800 	.word	0x58024800
 800568c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 0301 	and.w	r3, r2, #1
 80056a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056a8:	2300      	movs	r3, #0
 80056aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f000 8089 	beq.w	80057cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056c0:	2b28      	cmp	r3, #40	@ 0x28
 80056c2:	d86b      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80056c4:	a201      	add	r2, pc, #4	@ (adr r2, 80056cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080057a5 	.word	0x080057a5
 80056d0:	0800579d 	.word	0x0800579d
 80056d4:	0800579d 	.word	0x0800579d
 80056d8:	0800579d 	.word	0x0800579d
 80056dc:	0800579d 	.word	0x0800579d
 80056e0:	0800579d 	.word	0x0800579d
 80056e4:	0800579d 	.word	0x0800579d
 80056e8:	0800579d 	.word	0x0800579d
 80056ec:	08005771 	.word	0x08005771
 80056f0:	0800579d 	.word	0x0800579d
 80056f4:	0800579d 	.word	0x0800579d
 80056f8:	0800579d 	.word	0x0800579d
 80056fc:	0800579d 	.word	0x0800579d
 8005700:	0800579d 	.word	0x0800579d
 8005704:	0800579d 	.word	0x0800579d
 8005708:	0800579d 	.word	0x0800579d
 800570c:	08005787 	.word	0x08005787
 8005710:	0800579d 	.word	0x0800579d
 8005714:	0800579d 	.word	0x0800579d
 8005718:	0800579d 	.word	0x0800579d
 800571c:	0800579d 	.word	0x0800579d
 8005720:	0800579d 	.word	0x0800579d
 8005724:	0800579d 	.word	0x0800579d
 8005728:	0800579d 	.word	0x0800579d
 800572c:	080057a5 	.word	0x080057a5
 8005730:	0800579d 	.word	0x0800579d
 8005734:	0800579d 	.word	0x0800579d
 8005738:	0800579d 	.word	0x0800579d
 800573c:	0800579d 	.word	0x0800579d
 8005740:	0800579d 	.word	0x0800579d
 8005744:	0800579d 	.word	0x0800579d
 8005748:	0800579d 	.word	0x0800579d
 800574c:	080057a5 	.word	0x080057a5
 8005750:	0800579d 	.word	0x0800579d
 8005754:	0800579d 	.word	0x0800579d
 8005758:	0800579d 	.word	0x0800579d
 800575c:	0800579d 	.word	0x0800579d
 8005760:	0800579d 	.word	0x0800579d
 8005764:	0800579d 	.word	0x0800579d
 8005768:	0800579d 	.word	0x0800579d
 800576c:	080057a5 	.word	0x080057a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005774:	3308      	adds	r3, #8
 8005776:	2101      	movs	r1, #1
 8005778:	4618      	mov	r0, r3
 800577a:	f001 fe95 	bl	80074a8 <RCCEx_PLL2_Config>
 800577e:	4603      	mov	r3, r0
 8005780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005784:	e00f      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578a:	3328      	adds	r3, #40	@ 0x28
 800578c:	2101      	movs	r1, #1
 800578e:	4618      	mov	r0, r3
 8005790:	f001 ff3c 	bl	800760c <RCCEx_PLL3_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800579a:	e004      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057a2:	e000      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80057a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057ae:	4bbf      	ldr	r3, [pc, #764]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057bc:	4abb      	ldr	r2, [pc, #748]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057be:	430b      	orrs	r3, r1
 80057c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057c2:	e003      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f002 0302 	and.w	r3, r2, #2
 80057d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d041      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d824      	bhi.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80057f6:	a201      	add	r2, pc, #4	@ (adr r2, 80057fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	08005849 	.word	0x08005849
 8005800:	08005815 	.word	0x08005815
 8005804:	0800582b 	.word	0x0800582b
 8005808:	08005849 	.word	0x08005849
 800580c:	08005849 	.word	0x08005849
 8005810:	08005849 	.word	0x08005849
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	3308      	adds	r3, #8
 800581a:	2101      	movs	r1, #1
 800581c:	4618      	mov	r0, r3
 800581e:	f001 fe43 	bl	80074a8 <RCCEx_PLL2_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005828:	e00f      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	3328      	adds	r3, #40	@ 0x28
 8005830:	2101      	movs	r1, #1
 8005832:	4618      	mov	r0, r3
 8005834:	f001 feea 	bl	800760c <RCCEx_PLL3_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800583e:	e004      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005846:	e000      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005852:	4b96      	ldr	r3, [pc, #600]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005856:	f023 0107 	bic.w	r1, r3, #7
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005860:	4a92      	ldr	r2, [pc, #584]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005862:	430b      	orrs	r3, r1
 8005864:	6553      	str	r3, [r2, #84]	@ 0x54
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f002 0304 	and.w	r3, r2, #4
 800587c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005886:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800588a:	460b      	mov	r3, r1
 800588c:	4313      	orrs	r3, r2
 800588e:	d044      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005898:	2b05      	cmp	r3, #5
 800589a:	d825      	bhi.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800589c:	a201      	add	r2, pc, #4	@ (adr r2, 80058a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058f1 	.word	0x080058f1
 80058a8:	080058bd 	.word	0x080058bd
 80058ac:	080058d3 	.word	0x080058d3
 80058b0:	080058f1 	.word	0x080058f1
 80058b4:	080058f1 	.word	0x080058f1
 80058b8:	080058f1 	.word	0x080058f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c0:	3308      	adds	r3, #8
 80058c2:	2101      	movs	r1, #1
 80058c4:	4618      	mov	r0, r3
 80058c6:	f001 fdef 	bl	80074a8 <RCCEx_PLL2_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058d0:	e00f      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	3328      	adds	r3, #40	@ 0x28
 80058d8:	2101      	movs	r1, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fe96 	bl	800760c <RCCEx_PLL3_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058e6:	e004      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80058f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058fa:	4b6c      	ldr	r3, [pc, #432]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	f023 0107 	bic.w	r1, r3, #7
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800590a:	4a68      	ldr	r2, [pc, #416]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800590c:	430b      	orrs	r3, r1
 800590e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005910:	e003      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f002 0320 	and.w	r3, r2, #32
 8005926:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800592a:	2300      	movs	r3, #0
 800592c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005934:	460b      	mov	r3, r1
 8005936:	4313      	orrs	r3, r2
 8005938:	d055      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005946:	d033      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800594c:	d82c      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005952:	d02f      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005958:	d826      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800595a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800595e:	d02b      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005960:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005964:	d820      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800596a:	d012      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800596c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005970:	d81a      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d022      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800597a:	d115      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005980:	3308      	adds	r3, #8
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f001 fd8f 	bl	80074a8 <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005990:	e015      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	3328      	adds	r3, #40	@ 0x28
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fe36 	bl	800760c <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059a6:	e00a      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ae:	e006      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059b0:	bf00      	nop
 80059b2:	e004      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059b4:	bf00      	nop
 80059b6:	e002      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059b8:	bf00      	nop
 80059ba:	e000      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059c6:	4b39      	ldr	r3, [pc, #228]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d6:	4a35      	ldr	r2, [pc, #212]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059d8:	430b      	orrs	r3, r1
 80059da:	6553      	str	r3, [r2, #84]	@ 0x54
 80059dc:	e003      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059f6:	2300      	movs	r3, #0
 80059f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4313      	orrs	r3, r2
 8005a04:	d058      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a12:	d033      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a18:	d82c      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a1e:	d02f      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a24:	d826      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a2a:	d02b      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005a2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a30:	d820      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a36:	d012      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a3c:	d81a      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d022      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a46:	d115      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 fd29 	bl	80074a8 <RCCEx_PLL2_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a5c:	e015      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a62:	3328      	adds	r3, #40	@ 0x28
 8005a64:	2102      	movs	r1, #2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 fdd0 	bl	800760c <RCCEx_PLL3_Config>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a72:	e00a      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a7a:	e006      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a7c:	bf00      	nop
 8005a7e:	e004      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a80:	bf00      	nop
 8005a82:	e002      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a84:	bf00      	nop
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10e      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a92:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa2:	4a02      	ldr	r2, [pc, #8]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aa8:	e006      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005aaa:	bf00      	nop
 8005aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ace:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	d055      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005adc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ae0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ae4:	d033      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005ae6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005aea:	d82c      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af0:	d02f      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af6:	d826      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005af8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005afc:	d02b      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005afe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b02:	d820      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b08:	d012      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b0e:	d81a      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d022      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b18:	d115      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	3308      	adds	r3, #8
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 fcc0 	bl	80074a8 <RCCEx_PLL2_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b2e:	e015      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b34:	3328      	adds	r3, #40	@ 0x28
 8005b36:	2102      	movs	r1, #2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fd67 	bl	800760c <RCCEx_PLL3_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b44:	e00a      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b4c:	e006      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e004      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b52:	bf00      	nop
 8005b54:	e002      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b64:	4ba1      	ldr	r3, [pc, #644]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b74:	4a9d      	ldr	r2, [pc, #628]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b76:	430b      	orrs	r3, r1
 8005b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b7a:	e003      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f002 0308 	and.w	r3, r2, #8
 8005b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b94:	2300      	movs	r3, #0
 8005b96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d01e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	3328      	adds	r3, #40	@ 0x28
 8005bb8:	2102      	movs	r1, #2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 fd26 	bl	800760c <RCCEx_PLL3_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005bcc:	4b87      	ldr	r3, [pc, #540]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bdc:	4a83      	ldr	r2, [pc, #524]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bde:	430b      	orrs	r3, r1
 8005be0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f002 0310 	and.w	r3, r2, #16
 8005bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bf8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	d01e      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c0e:	d10c      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c14:	3328      	adds	r3, #40	@ 0x28
 8005c16:	2102      	movs	r1, #2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fcf7 	bl	800760c <RCCEx_PLL3_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c2a:	4b70      	ldr	r3, [pc, #448]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3a:	4a6c      	ldr	r2, [pc, #432]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	d03e      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c6c:	d022      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c72:	d81b      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c7c:	d00b      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c7e:	e015      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	3308      	adds	r3, #8
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fc0d 	bl	80074a8 <RCCEx_PLL2_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c94:	e00f      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	3328      	adds	r3, #40	@ 0x28
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fcb4 	bl	800760c <RCCEx_PLL3_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005caa:	e004      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cce:	4a47      	ldr	r2, [pc, #284]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005cea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cec:	2300      	movs	r3, #0
 8005cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cf0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d03b      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d06:	d01f      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005d08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d0c:	d818      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d12:	d003      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d18:	d007      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005d1a:	e011      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d1c:	4b33      	ldr	r3, [pc, #204]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d28:	e00f      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	3328      	adds	r3, #40	@ 0x28
 8005d30:	2101      	movs	r1, #1
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 fc6a 	bl	800760c <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d3e:	e004      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d46:	e000      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d52:	4b26      	ldr	r3, [pc, #152]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d62:	4a22      	ldr	r2, [pc, #136]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d80:	2300      	movs	r3, #0
 8005d82:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	d034      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d9c:	d007      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005d9e:	e011      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da0:	4b12      	ldr	r3, [pc, #72]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	4a11      	ldr	r2, [pc, #68]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dac:	e00e      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db2:	3308      	adds	r3, #8
 8005db4:	2102      	movs	r1, #2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fb76 	bl	80074a8 <RCCEx_PLL2_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dc2:	e003      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10d      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dd4:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de2:	4a02      	ldr	r2, [pc, #8]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005de4:	430b      	orrs	r3, r1
 8005de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005dea:	bf00      	nop
 8005dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e06:	2300      	movs	r3, #0
 8005e08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4313      	orrs	r3, r2
 8005e12:	d00c      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	3328      	adds	r3, #40	@ 0x28
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fbf5 	bl	800760c <RCCEx_PLL3_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e44:	460b      	mov	r3, r1
 8005e46:	4313      	orrs	r3, r2
 8005e48:	d038      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e56:	d018      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e5c:	d811      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e62:	d014      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e68:	d80b      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d011      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e72:	d106      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e74:	4bc3      	ldr	r3, [pc, #780]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	4ac2      	ldr	r2, [pc, #776]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e80:	e008      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e88:	e004      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e8a:	bf00      	nop
 8005e8c:	e002      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e9c:	4bb9      	ldr	r3, [pc, #740]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eac:	4ab5      	ldr	r2, [pc, #724]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eb2:	e003      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eca:	2300      	movs	r3, #0
 8005ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ece:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	d009      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ed8:	4baa      	ldr	r3, [pc, #680]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee6:	4aa7      	ldr	r2, [pc, #668]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005efa:	2300      	movs	r3, #0
 8005efc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005efe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f02:	460b      	mov	r3, r1
 8005f04:	4313      	orrs	r3, r2
 8005f06:	d00a      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f08:	4b9e      	ldr	r3, [pc, #632]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f18:	4a9a      	ldr	r2, [pc, #616]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f34:	460b      	mov	r3, r1
 8005f36:	4313      	orrs	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f3a:	4b92      	ldr	r3, [pc, #584]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f48:	4a8e      	ldr	r2, [pc, #568]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f64:	460b      	mov	r3, r1
 8005f66:	4313      	orrs	r3, r2
 8005f68:	d00e      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f6a:	4b86      	ldr	r3, [pc, #536]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	4a85      	ldr	r2, [pc, #532]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f74:	6113      	str	r3, [r2, #16]
 8005f76:	4b83      	ldr	r3, [pc, #524]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f78:	6919      	ldr	r1, [r3, #16]
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f82:	4a80      	ldr	r2, [pc, #512]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f96:	2300      	movs	r3, #0
 8005f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fa4:	4b77      	ldr	r3, [pc, #476]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	4a74      	ldr	r2, [pc, #464]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fe4:	4a67      	ldr	r2, [pc, #412]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ffc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006000:	460b      	mov	r3, r1
 8006002:	4313      	orrs	r3, r2
 8006004:	d011      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600a:	3308      	adds	r3, #8
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fa4a 	bl	80074a8 <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800601a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	2100      	movs	r1, #0
 8006034:	6239      	str	r1, [r7, #32]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
 800603c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006040:	460b      	mov	r3, r1
 8006042:	4313      	orrs	r3, r2
 8006044:	d011      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	3308      	adds	r3, #8
 800604c:	2101      	movs	r1, #1
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fa2a 	bl	80074a8 <RCCEx_PLL2_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800605a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	2100      	movs	r1, #0
 8006074:	61b9      	str	r1, [r7, #24]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006080:	460b      	mov	r3, r1
 8006082:	4313      	orrs	r3, r2
 8006084:	d011      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608a:	3308      	adds	r3, #8
 800608c:	2102      	movs	r1, #2
 800608e:	4618      	mov	r0, r3
 8006090:	f001 fa0a 	bl	80074a8 <RCCEx_PLL2_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800609a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	2100      	movs	r1, #0
 80060b4:	6139      	str	r1, [r7, #16]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060c0:	460b      	mov	r3, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d011      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	3328      	adds	r3, #40	@ 0x28
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa9c 	bl	800760c <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80060da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	2100      	movs	r1, #0
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006100:	460b      	mov	r3, r1
 8006102:	4313      	orrs	r3, r2
 8006104:	d011      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	3328      	adds	r3, #40	@ 0x28
 800610c:	2101      	movs	r1, #1
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fa7c 	bl	800760c <RCCEx_PLL3_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800611a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	2100      	movs	r1, #0
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006140:	460b      	mov	r3, r1
 8006142:	4313      	orrs	r3, r2
 8006144:	d011      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	3328      	adds	r3, #40	@ 0x28
 800614c:	2102      	movs	r1, #2
 800614e:	4618      	mov	r0, r3
 8006150:	f001 fa5c 	bl	800760c <RCCEx_PLL3_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800615a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800616a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e000      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
}
 8006178:	4618      	mov	r0, r3
 800617a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800617e:	46bd      	mov	sp, r7
 8006180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006184:	58024400 	.word	0x58024400

08006188 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b090      	sub	sp, #64	@ 0x40
 800618c:	af00      	add	r7, sp, #0
 800618e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006196:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800619a:	430b      	orrs	r3, r1
 800619c:	f040 8094 	bne.w	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80061a0:	4b9e      	ldr	r3, [pc, #632]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	f200 8087 	bhi.w	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80061b2:	a201      	add	r2, pc, #4	@ (adr r2, 80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061cd 	.word	0x080061cd
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	0800621d 	.word	0x0800621d
 80061c4:	080062b9 	.word	0x080062b9
 80061c8:	08006245 	.word	0x08006245
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061cc:	4b93      	ldr	r3, [pc, #588]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061d8:	d108      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 f810 	bl	8007204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061e8:	f000 bd45 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f0:	f000 bd41 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061f4:	4b89      	ldr	r3, [pc, #548]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006200:	d108      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006202:	f107 0318 	add.w	r3, r7, #24
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fd54 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006210:	f000 bd31 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006218:	f000 bd2d 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800621c:	4b7f      	ldr	r3, [pc, #508]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006228:	d108      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800622a:	f107 030c 	add.w	r3, r7, #12
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fe94 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006238:	f000 bd1d 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006240:	f000 bd19 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006244:	4b75      	ldr	r3, [pc, #468]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800624c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800624e:	4b73      	ldr	r3, [pc, #460]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b04      	cmp	r3, #4
 8006258:	d10c      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800625a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006260:	4b6e      	ldr	r3, [pc, #440]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	4a6d      	ldr	r2, [pc, #436]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
 8006270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006272:	e01f      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006274:	4b69      	ldr	r3, [pc, #420]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006280:	d106      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006288:	d102      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800628a:	4b66      	ldr	r3, [pc, #408]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800628e:	e011      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006290:	4b62      	ldr	r3, [pc, #392]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629c:	d106      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a4:	d102      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062a6:	4b60      	ldr	r3, [pc, #384]	@ (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80062a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062aa:	e003      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062b0:	f000 bce1 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062b4:	f000 bcdf 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062b8:	4b5c      	ldr	r3, [pc, #368]	@ (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062bc:	f000 bcdb 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c4:	f000 bcd7 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80062c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80062d0:	430b      	orrs	r3, r1
 80062d2:	f040 80ad 	bne.w	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80062d6:	4b51      	ldr	r3, [pc, #324]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80062de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e6:	d056      	beq.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ee:	f200 8090 	bhi.w	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80062f6:	f000 8088 	beq.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80062fe:	f200 8088 	bhi.w	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	2b80      	cmp	r3, #128	@ 0x80
 8006306:	d032      	beq.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	2b80      	cmp	r3, #128	@ 0x80
 800630c:	f200 8081 	bhi.w	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	d014      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800631c:	e079      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800631e:	4b3f      	ldr	r3, [pc, #252]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800632a:	d108      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800632c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006330:	4618      	mov	r0, r3
 8006332:	f000 ff67 	bl	8007204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800633a:	f000 bc9c 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006342:	f000 bc98 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006346:	4b35      	ldr	r3, [pc, #212]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800634e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006352:	d108      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006354:	f107 0318 	add.w	r3, r7, #24
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fcab 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006362:	f000 bc88 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636a:	f000 bc84 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800636e:	4b2b      	ldr	r3, [pc, #172]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800637a:	d108      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fdeb 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800638a:	f000 bc74 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006392:	f000 bc70 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006396:	4b21      	ldr	r3, [pc, #132]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800639e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063a0:	4b1e      	ldr	r3, [pc, #120]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d10c      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80063ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063b2:	4b1a      	ldr	r3, [pc, #104]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	08db      	lsrs	r3, r3, #3
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	4a18      	ldr	r2, [pc, #96]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063c4:	e01f      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063c6:	4b15      	ldr	r3, [pc, #84]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d2:	d106      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80063d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063da:	d102      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063dc:	4b11      	ldr	r3, [pc, #68]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063e0:	e011      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063e2:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ee:	d106      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80063f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063f6:	d102      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80063fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006402:	f000 bc38 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006406:	f000 bc36 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800640a:	4b08      	ldr	r3, [pc, #32]	@ (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640e:	f000 bc32 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006416:	f000 bc2e 	b.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800641a:	bf00      	nop
 800641c:	58024400 	.word	0x58024400
 8006420:	03d09000 	.word	0x03d09000
 8006424:	003d0900 	.word	0x003d0900
 8006428:	007a1200 	.word	0x007a1200
 800642c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006434:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006438:	430b      	orrs	r3, r1
 800643a:	f040 809c 	bne.w	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800643e:	4b9e      	ldr	r3, [pc, #632]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006442:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006446:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800644e:	d054      	beq.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006456:	f200 808b 	bhi.w	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006460:	f000 8083 	beq.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800646a:	f200 8081 	bhi.w	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006474:	d02f      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800647c:	d878      	bhi.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800648a:	d012      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800648c:	e070      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800648e:	4b8a      	ldr	r3, [pc, #552]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006496:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800649a:	d107      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800649c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 feaf 	bl	8007204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064aa:	e3e4      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064b0:	e3e1      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064b2:	4b81      	ldr	r3, [pc, #516]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064be:	d107      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c0:	f107 0318 	add.w	r3, r7, #24
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fbf5 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ce:	e3d2      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d4:	e3cf      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064d6:	4b78      	ldr	r3, [pc, #480]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e2:	d107      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e4:	f107 030c 	add.w	r3, r7, #12
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fd37 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064f2:	e3c0      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f8:	e3bd      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064fa:	4b6f      	ldr	r3, [pc, #444]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006502:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006504:	4b6c      	ldr	r3, [pc, #432]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b04      	cmp	r3, #4
 800650e:	d10c      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006516:	4b68      	ldr	r3, [pc, #416]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	08db      	lsrs	r3, r3, #3
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	4a66      	ldr	r2, [pc, #408]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006522:	fa22 f303 	lsr.w	r3, r2, r3
 8006526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006528:	e01e      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800652a:	4b63      	ldr	r3, [pc, #396]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006536:	d106      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800653e:	d102      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006540:	4b5f      	ldr	r3, [pc, #380]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006544:	e010      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006546:	4b5c      	ldr	r3, [pc, #368]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006552:	d106      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800655a:	d102      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800655c:	4b59      	ldr	r3, [pc, #356]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006560:	e002      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006566:	e386      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006568:	e385      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800656a:	4b57      	ldr	r3, [pc, #348]	@ (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800656c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800656e:	e382      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006574:	e37f      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800657a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800657e:	430b      	orrs	r3, r1
 8006580:	f040 80a7 	bne.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006584:	4b4c      	ldr	r3, [pc, #304]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006588:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800658c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006594:	d055      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800659c:	f200 8096 	bhi.w	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065a6:	f000 8084 	beq.w	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80065aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065b0:	f200 808c 	bhi.w	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065ba:	d030      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065c2:	f200 8083 	bhi.w	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065d2:	d012      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80065d4:	e07a      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065d6:	4b38      	ldr	r3, [pc, #224]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065e2:	d107      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fe0b 	bl	8007204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f2:	e340      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065f8:	e33d      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065fa:	4b2f      	ldr	r3, [pc, #188]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006608:	f107 0318 	add.w	r3, r7, #24
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fb51 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006616:	e32e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e32b      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800661e:	4b26      	ldr	r3, [pc, #152]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800662a:	d107      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800662c:	f107 030c 	add.w	r3, r7, #12
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fc93 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800663a:	e31c      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006640:	e319      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006642:	4b1d      	ldr	r3, [pc, #116]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006646:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800664c:	4b1a      	ldr	r3, [pc, #104]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b04      	cmp	r3, #4
 8006656:	d10c      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800665e:	4b16      	ldr	r3, [pc, #88]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	08db      	lsrs	r3, r3, #3
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	4a14      	ldr	r2, [pc, #80]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006670:	e01e      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006672:	4b11      	ldr	r3, [pc, #68]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800667e:	d106      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006686:	d102      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006688:	4b0d      	ldr	r3, [pc, #52]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800668c:	e010      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800668e:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800669a:	d106      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a2:	d102      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066a4:	4b07      	ldr	r3, [pc, #28]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80066a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a8:	e002      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066ae:	e2e2      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066b0:	e2e1      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066b2:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80066b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b6:	e2de      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066b8:	58024400 	.word	0x58024400
 80066bc:	03d09000 	.word	0x03d09000
 80066c0:	003d0900 	.word	0x003d0900
 80066c4:	007a1200 	.word	0x007a1200
 80066c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d0:	e2d1      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80066da:	430b      	orrs	r3, r1
 80066dc:	f040 809c 	bne.w	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80066e0:	4b93      	ldr	r3, [pc, #588]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066f0:	d054      	beq.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066f8:	f200 808b 	bhi.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006702:	f000 8083 	beq.w	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800670c:	f200 8081 	bhi.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006716:	d02f      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671e:	d878      	bhi.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672c:	d012      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800672e:	e070      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006730:	4b7f      	ldr	r3, [pc, #508]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800673c:	d107      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800673e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fd5e 	bl	8007204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800674c:	e293      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006752:	e290      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006754:	4b76      	ldr	r3, [pc, #472]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800675c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006760:	d107      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006762:	f107 0318 	add.w	r3, r7, #24
 8006766:	4618      	mov	r0, r3
 8006768:	f000 faa4 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006770:	e281      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006776:	e27e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006778:	4b6d      	ldr	r3, [pc, #436]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006784:	d107      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006786:	f107 030c 	add.w	r3, r7, #12
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fbe6 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006794:	e26f      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679a:	e26c      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800679c:	4b64      	ldr	r3, [pc, #400]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800679e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067a6:	4b62      	ldr	r3, [pc, #392]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d10c      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80067b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	08db      	lsrs	r3, r3, #3
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	4a5c      	ldr	r2, [pc, #368]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
 80067c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ca:	e01e      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067cc:	4b58      	ldr	r3, [pc, #352]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d8:	d106      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80067da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067e0:	d102      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067e2:	4b55      	ldr	r3, [pc, #340]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e6:	e010      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e8:	4b51      	ldr	r3, [pc, #324]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f4:	d106      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80067f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067fc:	d102      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067fe:	4b4f      	ldr	r3, [pc, #316]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006802:	e002      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006808:	e235      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800680a:	e234      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800680c:	4b4c      	ldr	r3, [pc, #304]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006810:	e231      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006816:	e22e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006820:	430b      	orrs	r3, r1
 8006822:	f040 808f 	bne.w	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006826:	4b42      	ldr	r3, [pc, #264]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800682e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006832:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006836:	d06b      	beq.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800683e:	d874      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006842:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006846:	d056      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800684e:	d86c      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006856:	d03b      	beq.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800685e:	d864      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006866:	d021      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800686e:	d85c      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800687c:	d004      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800687e:	e054      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fe fa4c 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8006884:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006886:	e1f6      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006888:	4b29      	ldr	r3, [pc, #164]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006894:	d107      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006896:	f107 0318 	add.w	r3, r7, #24
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fa0a 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a4:	e1e7      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068aa:	e1e4      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ac:	4b20      	ldr	r3, [pc, #128]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b8:	d107      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb4c 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c8:	e1d5      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ce:	e1d2      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068d0:	4b17      	ldr	r3, [pc, #92]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d109      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068dc:	4b14      	ldr	r3, [pc, #80]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	08db      	lsrs	r3, r3, #3
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	4a13      	ldr	r2, [pc, #76]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ee:	e1c2      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f4:	e1bf      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006902:	d102      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006908:	e1b5      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690e:	e1b2      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006910:	4b07      	ldr	r3, [pc, #28]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800691c:	d102      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800691e:	4b07      	ldr	r3, [pc, #28]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006922:	e1a8      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006928:	e1a5      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800692e:	e1a2      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006930:	58024400 	.word	0x58024400
 8006934:	03d09000 	.word	0x03d09000
 8006938:	003d0900 	.word	0x003d0900
 800693c:	007a1200 	.word	0x007a1200
 8006940:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006948:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800694c:	430b      	orrs	r3, r1
 800694e:	d173      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006950:	4b9c      	ldr	r3, [pc, #624]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006958:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006960:	d02f      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006968:	d863      	bhi.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006976:	d012      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006978:	e05b      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800697a:	4b92      	ldr	r3, [pc, #584]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006986:	d107      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006988:	f107 0318 	add.w	r3, r7, #24
 800698c:	4618      	mov	r0, r3
 800698e:	f000 f991 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006996:	e16e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	e16b      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800699e:	4b89      	ldr	r3, [pc, #548]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069aa:	d107      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ac:	f107 030c 	add.w	r3, r7, #12
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fad3 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ba:	e15c      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c0:	e159      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069c2:	4b80      	ldr	r3, [pc, #512]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069cc:	4b7d      	ldr	r3, [pc, #500]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d10c      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80069d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069de:	4b79      	ldr	r3, [pc, #484]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	08db      	lsrs	r3, r3, #3
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	4a77      	ldr	r2, [pc, #476]	@ (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80069ea:	fa22 f303 	lsr.w	r3, r2, r3
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069f0:	e01e      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069f2:	4b74      	ldr	r3, [pc, #464]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fe:	d106      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a06:	d102      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a08:	4b70      	ldr	r3, [pc, #448]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a0c:	e010      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a1a:	d106      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a22:	d102      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a24:	4b6a      	ldr	r3, [pc, #424]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a28:	e002      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a2e:	e122      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a30:	e121      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a36:	e11e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006a40:	430b      	orrs	r3, r1
 8006a42:	d133      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a44:	4b5f      	ldr	r3, [pc, #380]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a5a:	d012      	beq.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006a5c:	e023      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a5e:	4b59      	ldr	r3, [pc, #356]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a6a:	d107      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fbc7 	bl	8007204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a7a:	e0fc      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a80:	e0f9      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a82:	4b50      	ldr	r3, [pc, #320]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a8e:	d107      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a90:	f107 0318 	add.w	r3, r7, #24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 f90d 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a9e:	e0ea      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa4:	e0e7      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aaa:	e0e4      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	f040 808d 	bne.w	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006aba:	4b42      	ldr	r3, [pc, #264]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006abe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aca:	d06b      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ad2:	d874      	bhi.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ada:	d056      	beq.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ae2:	d86c      	bhi.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006aea:	d03b      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006af2:	d864      	bhi.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006afa:	d021      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b02:	d85c      	bhi.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b10:	d004      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006b12:	e054      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006b14:	f000 f8b8 	bl	8006c88 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b1a:	e0ac      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b1c:	4b29      	ldr	r3, [pc, #164]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b2a:	f107 0318 	add.w	r3, r7, #24
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8c0 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b38:	e09d      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3e:	e09a      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b40:	4b20      	ldr	r3, [pc, #128]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b4c:	d107      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b4e:	f107 030c 	add.w	r3, r7, #12
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fa02 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5c:	e08b      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b62:	e088      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b64:	4b17      	ldr	r3, [pc, #92]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b70:	4b14      	ldr	r3, [pc, #80]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	4a13      	ldr	r2, [pc, #76]	@ (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b82:	e078      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b88:	e075      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b96:	d102      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006b98:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b9c:	e06b      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba2:	e068      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ba4:	4b07      	ldr	r3, [pc, #28]	@ (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb0:	d102      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006bb2:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bb6:	e05e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bbc:	e05b      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc2:	e058      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	03d09000 	.word	0x03d09000
 8006bcc:	003d0900 	.word	0x003d0900
 8006bd0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	d148      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006be0:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006be8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf0:	d02a      	beq.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf8:	d838      	bhi.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c06:	d00d      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006c08:	e030      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c16:	d102      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006c18:	4b1a      	ldr	r3, [pc, #104]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1c:	e02b      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c22:	e028      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c24:	4b16      	ldr	r3, [pc, #88]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c30:	d107      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fae4 	bl	8007204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c40:	e019      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c46:	e016      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c48:	4b0d      	ldr	r3, [pc, #52]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c54:	d107      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c56:	f107 0318 	add.w	r3, r7, #24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 f82a 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c64:	e007      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c6a:	e004      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c70:	e001      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3740      	adds	r7, #64	@ 0x40
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	58024400 	.word	0x58024400
 8006c84:	007a1200 	.word	0x007a1200

08006c88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c8c:	f7fe f816 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b06      	ldr	r3, [pc, #24]	@ (8006cac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	091b      	lsrs	r3, r3, #4
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	4904      	ldr	r1, [pc, #16]	@ (8006cb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	080087a4 	.word	0x080087a4

08006cb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	@ 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	0b1b      	lsrs	r3, r3, #12
 8006ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cde:	4b99      	ldr	r3, [pc, #612]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8111 	beq.w	8006f24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	f000 8083 	beq.w	8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f200 80a1 	bhi.w	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d056      	beq.n	8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d1e:	e099      	b.n	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d20:	4b88      	ldr	r3, [pc, #544]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d02d      	beq.n	8006d88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d2c:	4b85      	ldr	r3, [pc, #532]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	4a84      	ldr	r2, [pc, #528]	@ (8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b7b      	ldr	r3, [pc, #492]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d86:	e087      	b.n	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dca:	e065      	b.n	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b59      	ldr	r3, [pc, #356]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e043      	b.n	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b48      	ldr	r3, [pc, #288]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	e021      	b.n	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b37      	ldr	r3, [pc, #220]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e98:	4b2a      	ldr	r3, [pc, #168]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	0a5b      	lsrs	r3, r3, #9
 8006e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	ee17 2a90 	vmov	r2, s15
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eec:	ee17 2a90 	vmov	r2, s15
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ef4:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	0e1b      	lsrs	r3, r3, #24
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1a:	ee17 2a90 	vmov	r2, s15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f22:	e008      	b.n	8006f36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
}
 8006f36:	bf00      	nop
 8006f38:	3724      	adds	r7, #36	@ 0x24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400
 8006f48:	03d09000 	.word	0x03d09000
 8006f4c:	46000000 	.word	0x46000000
 8006f50:	4c742400 	.word	0x4c742400
 8006f54:	4a742400 	.word	0x4a742400
 8006f58:	4af42400 	.word	0x4af42400

08006f5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f64:	4ba1      	ldr	r3, [pc, #644]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f6e:	4b9f      	ldr	r3, [pc, #636]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	0d1b      	lsrs	r3, r3, #20
 8006f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f86:	4b99      	ldr	r3, [pc, #612]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8a:	08db      	lsrs	r3, r3, #3
 8006f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8111 	beq.w	80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	f000 8083 	beq.w	80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	f200 80a1 	bhi.w	80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d056      	beq.n	8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fc6:	e099      	b.n	80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc8:	4b88      	ldr	r3, [pc, #544]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d02d      	beq.n	8007030 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd4:	4b85      	ldr	r3, [pc, #532]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	4a84      	ldr	r2, [pc, #528]	@ (80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007012:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800702e:	e087      	b.n	8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b6a      	ldr	r3, [pc, #424]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a03 	vldr	s12, [r7, #12]
 8007056:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007072:	e065      	b.n	8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b59      	ldr	r3, [pc, #356]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a03 	vldr	s12, [r7, #12]
 800709a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b6:	e043      	b.n	8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b48      	ldr	r3, [pc, #288]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a03 	vldr	s12, [r7, #12]
 80070de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fa:	e021      	b.n	8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b37      	ldr	r3, [pc, #220]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007122:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007140:	4b2a      	ldr	r3, [pc, #168]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007144:	0a5b      	lsrs	r3, r3, #9
 8007146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800715a:	edd7 6a07 	vldr	s13, [r7, #28]
 800715e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007166:	ee17 2a90 	vmov	r2, s15
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800716e:	4b1f      	ldr	r3, [pc, #124]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	0c1b      	lsrs	r3, r3, #16
 8007174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007180:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007184:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007188:	edd7 6a07 	vldr	s13, [r7, #28]
 800718c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007194:	ee17 2a90 	vmov	r2, s15
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800719c:	4b13      	ldr	r3, [pc, #76]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	0e1b      	lsrs	r3, r3, #24
 80071a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c2:	ee17 2a90 	vmov	r2, s15
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071ca:	e008      	b.n	80071de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	609a      	str	r2, [r3, #8]
}
 80071de:	bf00      	nop
 80071e0:	3724      	adds	r7, #36	@ 0x24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	58024400 	.word	0x58024400
 80071f0:	03d09000 	.word	0x03d09000
 80071f4:	46000000 	.word	0x46000000
 80071f8:	4c742400 	.word	0x4c742400
 80071fc:	4a742400 	.word	0x4a742400
 8007200:	4af42400 	.word	0x4af42400

08007204 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	@ 0x24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800720c:	4ba0      	ldr	r3, [pc, #640]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007216:	4b9e      	ldr	r3, [pc, #632]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721a:	091b      	lsrs	r3, r3, #4
 800721c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007220:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007222:	4b9b      	ldr	r3, [pc, #620]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800722c:	4b98      	ldr	r3, [pc, #608]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800722e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	fb02 f303 	mul.w	r3, r2, r3
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007244:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8111 	beq.w	8007472 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b02      	cmp	r3, #2
 8007254:	f000 8083 	beq.w	800735e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2b02      	cmp	r3, #2
 800725c:	f200 80a1 	bhi.w	80073a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d056      	beq.n	800731a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800726c:	e099      	b.n	80073a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800726e:	4b88      	ldr	r3, [pc, #544]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d02d      	beq.n	80072d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800727a:	4b85      	ldr	r3, [pc, #532]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	08db      	lsrs	r3, r3, #3
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	4a83      	ldr	r2, [pc, #524]	@ (8007494 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	ee07 3a90 	vmov	s15, r3
 800729c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a4:	4b7a      	ldr	r3, [pc, #488]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072d4:	e087      	b.n	80073e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800749c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e8:	4b69      	ldr	r3, [pc, #420]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007314:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007318:	e065      	b.n	80073e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007324:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80074a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732c:	4b58      	ldr	r3, [pc, #352]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800732e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007334:	ee07 3a90 	vmov	s15, r3
 8007338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007340:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735c:	e043      	b.n	80073e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80074a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800736c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007370:	4b47      	ldr	r3, [pc, #284]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007380:	ed97 6a03 	vldr	s12, [r7, #12]
 8007384:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a0:	e021      	b.n	80073e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800749c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80073b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b4:	4b36      	ldr	r3, [pc, #216]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80073e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ea:	0a5b      	lsrs	r3, r3, #9
 80073ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007400:	edd7 6a07 	vldr	s13, [r7, #28]
 8007404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740c:	ee17 2a90 	vmov	r2, s15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007414:	4b1e      	ldr	r3, [pc, #120]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800742e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743a:	ee17 2a90 	vmov	r2, s15
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007442:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007446:	0e1b      	lsrs	r3, r3, #24
 8007448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744c:	ee07 3a90 	vmov	s15, r3
 8007450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007468:	ee17 2a90 	vmov	r2, s15
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007470:	e008      	b.n	8007484 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	609a      	str	r2, [r3, #8]
}
 8007484:	bf00      	nop
 8007486:	3724      	adds	r7, #36	@ 0x24
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	58024400 	.word	0x58024400
 8007494:	03d09000 	.word	0x03d09000
 8007498:	46000000 	.word	0x46000000
 800749c:	4c742400 	.word	0x4c742400
 80074a0:	4a742400 	.word	0x4a742400
 80074a4:	4af42400 	.word	0x4af42400

080074a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074b6:	4b53      	ldr	r3, [pc, #332]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d101      	bne.n	80074c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e099      	b.n	80075fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80074cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d2:	f7f9 fe41 	bl	8001158 <HAL_GetTick>
 80074d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074d8:	e008      	b.n	80074ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074da:	f7f9 fe3d 	bl	8001158 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e086      	b.n	80075fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074ec:	4b45      	ldr	r3, [pc, #276]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f0      	bne.n	80074da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074f8:	4b42      	ldr	r3, [pc, #264]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	031b      	lsls	r3, r3, #12
 8007506:	493f      	ldr	r1, [pc, #252]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007508:	4313      	orrs	r3, r2
 800750a:	628b      	str	r3, [r1, #40]	@ 0x28
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	3b01      	subs	r3, #1
 8007512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	3b01      	subs	r3, #1
 800751c:	025b      	lsls	r3, r3, #9
 800751e:	b29b      	uxth	r3, r3
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	3b01      	subs	r3, #1
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	3b01      	subs	r3, #1
 8007536:	061b      	lsls	r3, r3, #24
 8007538:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800753c:	4931      	ldr	r1, [pc, #196]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007542:	4b30      	ldr	r3, [pc, #192]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	492d      	ldr	r1, [pc, #180]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007550:	4313      	orrs	r3, r2
 8007552:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007554:	4b2b      	ldr	r3, [pc, #172]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	f023 0220 	bic.w	r2, r3, #32
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	4928      	ldr	r1, [pc, #160]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007566:	4b27      	ldr	r3, [pc, #156]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	4a26      	ldr	r2, [pc, #152]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 800756c:	f023 0310 	bic.w	r3, r3, #16
 8007570:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007572:	4b24      	ldr	r3, [pc, #144]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007576:	4b24      	ldr	r3, [pc, #144]	@ (8007608 <RCCEx_PLL2_Config+0x160>)
 8007578:	4013      	ands	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	69d2      	ldr	r2, [r2, #28]
 800757e:	00d2      	lsls	r2, r2, #3
 8007580:	4920      	ldr	r1, [pc, #128]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007582:	4313      	orrs	r3, r2
 8007584:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007586:	4b1f      	ldr	r3, [pc, #124]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 800758c:	f043 0310 	orr.w	r3, r3, #16
 8007590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d106      	bne.n	80075a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007598:	4b1a      	ldr	r3, [pc, #104]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	4a19      	ldr	r2, [pc, #100]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 800759e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075a4:	e00f      	b.n	80075c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d106      	bne.n	80075ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075ac:	4b15      	ldr	r3, [pc, #84]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	4a14      	ldr	r2, [pc, #80]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80075b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075b8:	e005      	b.n	80075c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075ba:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	4a11      	ldr	r2, [pc, #68]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80075c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d2:	f7f9 fdc1 	bl	8001158 <HAL_GetTick>
 80075d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075d8:	e008      	b.n	80075ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075da:	f7f9 fdbd 	bl	8001158 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e006      	b.n	80075fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075ec:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <RCCEx_PLL2_Config+0x15c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	58024400 	.word	0x58024400
 8007608:	ffff0007 	.word	0xffff0007

0800760c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800761a:	4b53      	ldr	r3, [pc, #332]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b03      	cmp	r3, #3
 8007624:	d101      	bne.n	800762a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e099      	b.n	800775e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800762a:	4b4f      	ldr	r3, [pc, #316]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a4e      	ldr	r2, [pc, #312]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007636:	f7f9 fd8f 	bl	8001158 <HAL_GetTick>
 800763a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800763c:	e008      	b.n	8007650 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800763e:	f7f9 fd8b 	bl	8001158 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e086      	b.n	800775e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007650:	4b45      	ldr	r3, [pc, #276]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f0      	bne.n	800763e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800765c:	4b42      	ldr	r3, [pc, #264]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	051b      	lsls	r3, r3, #20
 800766a:	493f      	ldr	r1, [pc, #252]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 800766c:	4313      	orrs	r3, r2
 800766e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	3b01      	subs	r3, #1
 8007676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	3b01      	subs	r3, #1
 8007680:	025b      	lsls	r3, r3, #9
 8007682:	b29b      	uxth	r3, r3
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	3b01      	subs	r3, #1
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	3b01      	subs	r3, #1
 800769a:	061b      	lsls	r3, r3, #24
 800769c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076a0:	4931      	ldr	r1, [pc, #196]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076a6:	4b30      	ldr	r3, [pc, #192]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	492d      	ldr	r1, [pc, #180]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	4928      	ldr	r1, [pc, #160]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076ca:	4b27      	ldr	r3, [pc, #156]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ce:	4a26      	ldr	r2, [pc, #152]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076d6:	4b24      	ldr	r3, [pc, #144]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076da:	4b24      	ldr	r3, [pc, #144]	@ (800776c <RCCEx_PLL3_Config+0x160>)
 80076dc:	4013      	ands	r3, r2
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	69d2      	ldr	r2, [r2, #28]
 80076e2:	00d2      	lsls	r2, r2, #3
 80076e4:	4920      	ldr	r1, [pc, #128]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d106      	bne.n	800770a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	4a19      	ldr	r2, [pc, #100]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007702:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007706:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007708:	e00f      	b.n	800772a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d106      	bne.n	800771e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007710:	4b15      	ldr	r3, [pc, #84]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	4a14      	ldr	r2, [pc, #80]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007716:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800771a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800771c:	e005      	b.n	800772a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800771e:	4b12      	ldr	r3, [pc, #72]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007722:	4a11      	ldr	r2, [pc, #68]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007724:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007728:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800772a:	4b0f      	ldr	r3, [pc, #60]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a0e      	ldr	r2, [pc, #56]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007736:	f7f9 fd0f 	bl	8001158 <HAL_GetTick>
 800773a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800773c:	e008      	b.n	8007750 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800773e:	f7f9 fd0b 	bl	8001158 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e006      	b.n	800775e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007750:	4b05      	ldr	r3, [pc, #20]	@ (8007768 <RCCEx_PLL3_Config+0x15c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0f0      	beq.n	800773e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	58024400 	.word	0x58024400
 800776c:	ffff0007 	.word	0xffff0007

08007770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e042      	b.n	8007808 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007788:	2b00      	cmp	r3, #0
 800778a:	d106      	bne.n	800779a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f83b 	bl	8007810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2224      	movs	r2, #36	@ 0x24
 800779e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0201 	bic.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fd9a 	bl	80082f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f82f 	bl	8007824 <UART_SetConfig>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e01b      	b.n	8007808 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fe19 	bl	8008438 <UART_CheckIdleState>
 8007806:	4603      	mov	r3, r0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007828:	b092      	sub	sp, #72	@ 0x48
 800782a:	af00      	add	r7, sp, #0
 800782c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	431a      	orrs	r2, r3
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	431a      	orrs	r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	4313      	orrs	r3, r2
 800784a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	4bbe      	ldr	r3, [pc, #760]	@ (8007b4c <UART_SetConfig+0x328>)
 8007854:	4013      	ands	r3, r2
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	6812      	ldr	r2, [r2, #0]
 800785a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800785c:	430b      	orrs	r3, r1
 800785e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4ab3      	ldr	r2, [pc, #716]	@ (8007b50 <UART_SetConfig+0x32c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d004      	beq.n	8007890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800788c:	4313      	orrs	r3, r2
 800788e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	4baf      	ldr	r3, [pc, #700]	@ (8007b54 <UART_SetConfig+0x330>)
 8007898:	4013      	ands	r3, r2
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078a0:	430b      	orrs	r3, r1
 80078a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	f023 010f 	bic.w	r1, r3, #15
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4aa6      	ldr	r2, [pc, #664]	@ (8007b58 <UART_SetConfig+0x334>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d177      	bne.n	80079b4 <UART_SetConfig+0x190>
 80078c4:	4ba5      	ldr	r3, [pc, #660]	@ (8007b5c <UART_SetConfig+0x338>)
 80078c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078cc:	2b28      	cmp	r3, #40	@ 0x28
 80078ce:	d86d      	bhi.n	80079ac <UART_SetConfig+0x188>
 80078d0:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <UART_SetConfig+0xb4>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	0800797d 	.word	0x0800797d
 80078dc:	080079ad 	.word	0x080079ad
 80078e0:	080079ad 	.word	0x080079ad
 80078e4:	080079ad 	.word	0x080079ad
 80078e8:	080079ad 	.word	0x080079ad
 80078ec:	080079ad 	.word	0x080079ad
 80078f0:	080079ad 	.word	0x080079ad
 80078f4:	080079ad 	.word	0x080079ad
 80078f8:	08007985 	.word	0x08007985
 80078fc:	080079ad 	.word	0x080079ad
 8007900:	080079ad 	.word	0x080079ad
 8007904:	080079ad 	.word	0x080079ad
 8007908:	080079ad 	.word	0x080079ad
 800790c:	080079ad 	.word	0x080079ad
 8007910:	080079ad 	.word	0x080079ad
 8007914:	080079ad 	.word	0x080079ad
 8007918:	0800798d 	.word	0x0800798d
 800791c:	080079ad 	.word	0x080079ad
 8007920:	080079ad 	.word	0x080079ad
 8007924:	080079ad 	.word	0x080079ad
 8007928:	080079ad 	.word	0x080079ad
 800792c:	080079ad 	.word	0x080079ad
 8007930:	080079ad 	.word	0x080079ad
 8007934:	080079ad 	.word	0x080079ad
 8007938:	08007995 	.word	0x08007995
 800793c:	080079ad 	.word	0x080079ad
 8007940:	080079ad 	.word	0x080079ad
 8007944:	080079ad 	.word	0x080079ad
 8007948:	080079ad 	.word	0x080079ad
 800794c:	080079ad 	.word	0x080079ad
 8007950:	080079ad 	.word	0x080079ad
 8007954:	080079ad 	.word	0x080079ad
 8007958:	0800799d 	.word	0x0800799d
 800795c:	080079ad 	.word	0x080079ad
 8007960:	080079ad 	.word	0x080079ad
 8007964:	080079ad 	.word	0x080079ad
 8007968:	080079ad 	.word	0x080079ad
 800796c:	080079ad 	.word	0x080079ad
 8007970:	080079ad 	.word	0x080079ad
 8007974:	080079ad 	.word	0x080079ad
 8007978:	080079a5 	.word	0x080079a5
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e222      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007984:	2304      	movs	r3, #4
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e21e      	b.n	8007dca <UART_SetConfig+0x5a6>
 800798c:	2308      	movs	r3, #8
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e21a      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007994:	2310      	movs	r3, #16
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e216      	b.n	8007dca <UART_SetConfig+0x5a6>
 800799c:	2320      	movs	r3, #32
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e212      	b.n	8007dca <UART_SetConfig+0x5a6>
 80079a4:	2340      	movs	r3, #64	@ 0x40
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e20e      	b.n	8007dca <UART_SetConfig+0x5a6>
 80079ac:	2380      	movs	r3, #128	@ 0x80
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e20a      	b.n	8007dca <UART_SetConfig+0x5a6>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a69      	ldr	r2, [pc, #420]	@ (8007b60 <UART_SetConfig+0x33c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d130      	bne.n	8007a20 <UART_SetConfig+0x1fc>
 80079be:	4b67      	ldr	r3, [pc, #412]	@ (8007b5c <UART_SetConfig+0x338>)
 80079c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b05      	cmp	r3, #5
 80079c8:	d826      	bhi.n	8007a18 <UART_SetConfig+0x1f4>
 80079ca:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <UART_SetConfig+0x1ac>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	080079e9 	.word	0x080079e9
 80079d4:	080079f1 	.word	0x080079f1
 80079d8:	080079f9 	.word	0x080079f9
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a09 	.word	0x08007a09
 80079e4:	08007a11 	.word	0x08007a11
 80079e8:	2300      	movs	r3, #0
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e1ec      	b.n	8007dca <UART_SetConfig+0x5a6>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e1e8      	b.n	8007dca <UART_SetConfig+0x5a6>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e1e4      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e1e0      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a08:	2320      	movs	r3, #32
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e1dc      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a10:	2340      	movs	r3, #64	@ 0x40
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e1d8      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a18:	2380      	movs	r3, #128	@ 0x80
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e1d4      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a4f      	ldr	r2, [pc, #316]	@ (8007b64 <UART_SetConfig+0x340>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d130      	bne.n	8007a8c <UART_SetConfig+0x268>
 8007a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b5c <UART_SetConfig+0x338>)
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d826      	bhi.n	8007a84 <UART_SetConfig+0x260>
 8007a36:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <UART_SetConfig+0x218>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a55 	.word	0x08007a55
 8007a40:	08007a5d 	.word	0x08007a5d
 8007a44:	08007a65 	.word	0x08007a65
 8007a48:	08007a6d 	.word	0x08007a6d
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007a7d 	.word	0x08007a7d
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e1b6      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e1b2      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a64:	2308      	movs	r3, #8
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e1ae      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e1aa      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a74:	2320      	movs	r3, #32
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e1a6      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a7c:	2340      	movs	r3, #64	@ 0x40
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e1a2      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a84:	2380      	movs	r3, #128	@ 0x80
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e19e      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a35      	ldr	r2, [pc, #212]	@ (8007b68 <UART_SetConfig+0x344>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d130      	bne.n	8007af8 <UART_SetConfig+0x2d4>
 8007a96:	4b31      	ldr	r3, [pc, #196]	@ (8007b5c <UART_SetConfig+0x338>)
 8007a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d826      	bhi.n	8007af0 <UART_SetConfig+0x2cc>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <UART_SetConfig+0x284>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ac1 	.word	0x08007ac1
 8007aac:	08007ac9 	.word	0x08007ac9
 8007ab0:	08007ad1 	.word	0x08007ad1
 8007ab4:	08007ad9 	.word	0x08007ad9
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae9 	.word	0x08007ae9
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e180      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e17c      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e178      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e174      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e170      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007ae8:	2340      	movs	r3, #64	@ 0x40
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e16c      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e168      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b6c <UART_SetConfig+0x348>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d142      	bne.n	8007b88 <UART_SetConfig+0x364>
 8007b02:	4b16      	ldr	r3, [pc, #88]	@ (8007b5c <UART_SetConfig+0x338>)
 8007b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d838      	bhi.n	8007b80 <UART_SetConfig+0x35c>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <UART_SetConfig+0x2f0>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b2d 	.word	0x08007b2d
 8007b18:	08007b35 	.word	0x08007b35
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b71 	.word	0x08007b71
 8007b28:	08007b79 	.word	0x08007b79
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e14a      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e146      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e142      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e13e      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007b4c:	cfff69f3 	.word	0xcfff69f3
 8007b50:	58000c00 	.word	0x58000c00
 8007b54:	11fff4ff 	.word	0x11fff4ff
 8007b58:	40011000 	.word	0x40011000
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	40004400 	.word	0x40004400
 8007b64:	40004800 	.word	0x40004800
 8007b68:	40004c00 	.word	0x40004c00
 8007b6c:	40005000 	.word	0x40005000
 8007b70:	2320      	movs	r3, #32
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e128      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007b78:	2340      	movs	r3, #64	@ 0x40
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e124      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007b80:	2380      	movs	r3, #128	@ 0x80
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e120      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4acb      	ldr	r2, [pc, #812]	@ (8007ebc <UART_SetConfig+0x698>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d176      	bne.n	8007c80 <UART_SetConfig+0x45c>
 8007b92:	4bcb      	ldr	r3, [pc, #812]	@ (8007ec0 <UART_SetConfig+0x69c>)
 8007b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b9a:	2b28      	cmp	r3, #40	@ 0x28
 8007b9c:	d86c      	bhi.n	8007c78 <UART_SetConfig+0x454>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <UART_SetConfig+0x380>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007c49 	.word	0x08007c49
 8007ba8:	08007c79 	.word	0x08007c79
 8007bac:	08007c79 	.word	0x08007c79
 8007bb0:	08007c79 	.word	0x08007c79
 8007bb4:	08007c79 	.word	0x08007c79
 8007bb8:	08007c79 	.word	0x08007c79
 8007bbc:	08007c79 	.word	0x08007c79
 8007bc0:	08007c79 	.word	0x08007c79
 8007bc4:	08007c51 	.word	0x08007c51
 8007bc8:	08007c79 	.word	0x08007c79
 8007bcc:	08007c79 	.word	0x08007c79
 8007bd0:	08007c79 	.word	0x08007c79
 8007bd4:	08007c79 	.word	0x08007c79
 8007bd8:	08007c79 	.word	0x08007c79
 8007bdc:	08007c79 	.word	0x08007c79
 8007be0:	08007c79 	.word	0x08007c79
 8007be4:	08007c59 	.word	0x08007c59
 8007be8:	08007c79 	.word	0x08007c79
 8007bec:	08007c79 	.word	0x08007c79
 8007bf0:	08007c79 	.word	0x08007c79
 8007bf4:	08007c79 	.word	0x08007c79
 8007bf8:	08007c79 	.word	0x08007c79
 8007bfc:	08007c79 	.word	0x08007c79
 8007c00:	08007c79 	.word	0x08007c79
 8007c04:	08007c61 	.word	0x08007c61
 8007c08:	08007c79 	.word	0x08007c79
 8007c0c:	08007c79 	.word	0x08007c79
 8007c10:	08007c79 	.word	0x08007c79
 8007c14:	08007c79 	.word	0x08007c79
 8007c18:	08007c79 	.word	0x08007c79
 8007c1c:	08007c79 	.word	0x08007c79
 8007c20:	08007c79 	.word	0x08007c79
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c79 	.word	0x08007c79
 8007c2c:	08007c79 	.word	0x08007c79
 8007c30:	08007c79 	.word	0x08007c79
 8007c34:	08007c79 	.word	0x08007c79
 8007c38:	08007c79 	.word	0x08007c79
 8007c3c:	08007c79 	.word	0x08007c79
 8007c40:	08007c79 	.word	0x08007c79
 8007c44:	08007c71 	.word	0x08007c71
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e0bc      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e0b8      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e0b4      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e0b0      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007c68:	2320      	movs	r3, #32
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e0ac      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007c70:	2340      	movs	r3, #64	@ 0x40
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e0a8      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007c78:	2380      	movs	r3, #128	@ 0x80
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e0a4      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a8f      	ldr	r2, [pc, #572]	@ (8007ec4 <UART_SetConfig+0x6a0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d130      	bne.n	8007cec <UART_SetConfig+0x4c8>
 8007c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ec0 <UART_SetConfig+0x69c>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d826      	bhi.n	8007ce4 <UART_SetConfig+0x4c0>
 8007c96:	a201      	add	r2, pc, #4	@ (adr r2, 8007c9c <UART_SetConfig+0x478>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cb5 	.word	0x08007cb5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e086      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e082      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e07e      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e07a      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e076      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007cdc:	2340      	movs	r3, #64	@ 0x40
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e072      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007ce4:	2380      	movs	r3, #128	@ 0x80
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e06e      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a75      	ldr	r2, [pc, #468]	@ (8007ec8 <UART_SetConfig+0x6a4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d130      	bne.n	8007d58 <UART_SetConfig+0x534>
 8007cf6:	4b72      	ldr	r3, [pc, #456]	@ (8007ec0 <UART_SetConfig+0x69c>)
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	d826      	bhi.n	8007d50 <UART_SetConfig+0x52c>
 8007d02:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <UART_SetConfig+0x4e4>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d29 	.word	0x08007d29
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e050      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e04c      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e048      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e044      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d40:	2320      	movs	r3, #32
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e040      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d48:	2340      	movs	r3, #64	@ 0x40
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e03c      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d50:	2380      	movs	r3, #128	@ 0x80
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e038      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a5b      	ldr	r2, [pc, #364]	@ (8007ecc <UART_SetConfig+0x6a8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d130      	bne.n	8007dc4 <UART_SetConfig+0x5a0>
 8007d62:	4b57      	ldr	r3, [pc, #348]	@ (8007ec0 <UART_SetConfig+0x69c>)
 8007d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d826      	bhi.n	8007dbc <UART_SetConfig+0x598>
 8007d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <UART_SetConfig+0x550>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d8d 	.word	0x08007d8d
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e01a      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d94:	2304      	movs	r3, #4
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e016      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e012      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007da4:	2310      	movs	r3, #16
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e00e      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007dac:	2320      	movs	r3, #32
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e00a      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007db4:	2340      	movs	r3, #64	@ 0x40
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e006      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007dbc:	2380      	movs	r3, #128	@ 0x80
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e002      	b.n	8007dca <UART_SetConfig+0x5a6>
 8007dc4:	2380      	movs	r3, #128	@ 0x80
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a3f      	ldr	r2, [pc, #252]	@ (8007ecc <UART_SetConfig+0x6a8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	f040 80f8 	bne.w	8007fc6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	dc46      	bgt.n	8007e6c <UART_SetConfig+0x648>
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	f2c0 8082 	blt.w	8007ee8 <UART_SetConfig+0x6c4>
 8007de4:	3b02      	subs	r3, #2
 8007de6:	2b1e      	cmp	r3, #30
 8007de8:	d87e      	bhi.n	8007ee8 <UART_SetConfig+0x6c4>
 8007dea:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <UART_SetConfig+0x5cc>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e73 	.word	0x08007e73
 8007df4:	08007ee9 	.word	0x08007ee9
 8007df8:	08007e7b 	.word	0x08007e7b
 8007dfc:	08007ee9 	.word	0x08007ee9
 8007e00:	08007ee9 	.word	0x08007ee9
 8007e04:	08007ee9 	.word	0x08007ee9
 8007e08:	08007e8b 	.word	0x08007e8b
 8007e0c:	08007ee9 	.word	0x08007ee9
 8007e10:	08007ee9 	.word	0x08007ee9
 8007e14:	08007ee9 	.word	0x08007ee9
 8007e18:	08007ee9 	.word	0x08007ee9
 8007e1c:	08007ee9 	.word	0x08007ee9
 8007e20:	08007ee9 	.word	0x08007ee9
 8007e24:	08007ee9 	.word	0x08007ee9
 8007e28:	08007e9b 	.word	0x08007e9b
 8007e2c:	08007ee9 	.word	0x08007ee9
 8007e30:	08007ee9 	.word	0x08007ee9
 8007e34:	08007ee9 	.word	0x08007ee9
 8007e38:	08007ee9 	.word	0x08007ee9
 8007e3c:	08007ee9 	.word	0x08007ee9
 8007e40:	08007ee9 	.word	0x08007ee9
 8007e44:	08007ee9 	.word	0x08007ee9
 8007e48:	08007ee9 	.word	0x08007ee9
 8007e4c:	08007ee9 	.word	0x08007ee9
 8007e50:	08007ee9 	.word	0x08007ee9
 8007e54:	08007ee9 	.word	0x08007ee9
 8007e58:	08007ee9 	.word	0x08007ee9
 8007e5c:	08007ee9 	.word	0x08007ee9
 8007e60:	08007ee9 	.word	0x08007ee9
 8007e64:	08007ee9 	.word	0x08007ee9
 8007e68:	08007edb 	.word	0x08007edb
 8007e6c:	2b40      	cmp	r3, #64	@ 0x40
 8007e6e:	d037      	beq.n	8007ee0 <UART_SetConfig+0x6bc>
 8007e70:	e03a      	b.n	8007ee8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e72:	f7fe ff09 	bl	8006c88 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e78:	e03c      	b.n	8007ef4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe ff18 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e034      	b.n	8007ef4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e8a:	f107 0318 	add.w	r3, r7, #24
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff f864 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e98:	e02c      	b.n	8007ef4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e9a:	4b09      	ldr	r3, [pc, #36]	@ (8007ec0 <UART_SetConfig+0x69c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d016      	beq.n	8007ed4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ea6:	4b06      	ldr	r3, [pc, #24]	@ (8007ec0 <UART_SetConfig+0x69c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	08db      	lsrs	r3, r3, #3
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	4a07      	ldr	r2, [pc, #28]	@ (8007ed0 <UART_SetConfig+0x6ac>)
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007eb8:	e01c      	b.n	8007ef4 <UART_SetConfig+0x6d0>
 8007eba:	bf00      	nop
 8007ebc:	40011400 	.word	0x40011400
 8007ec0:	58024400 	.word	0x58024400
 8007ec4:	40007800 	.word	0x40007800
 8007ec8:	40007c00 	.word	0x40007c00
 8007ecc:	58000c00 	.word	0x58000c00
 8007ed0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800814c <UART_SetConfig+0x928>)
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed8:	e00c      	b.n	8007ef4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eda:	4b9d      	ldr	r3, [pc, #628]	@ (8008150 <UART_SetConfig+0x92c>)
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ede:	e009      	b.n	8007ef4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee6:	e005      	b.n	8007ef4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ef2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 81de 	beq.w	80082b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f00:	4a94      	ldr	r2, [pc, #592]	@ (8008154 <UART_SetConfig+0x930>)
 8007f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f0e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	4413      	add	r3, r2
 8007f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d305      	bcc.n	8007f2c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d903      	bls.n	8007f34 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f32:	e1c1      	b.n	80082b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f36:	2200      	movs	r2, #0
 8007f38:	60bb      	str	r3, [r7, #8]
 8007f3a:	60fa      	str	r2, [r7, #12]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	4a84      	ldr	r2, [pc, #528]	@ (8008154 <UART_SetConfig+0x930>)
 8007f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2200      	movs	r2, #0
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f56:	f7f8 f9bf 	bl	80002d8 <__aeabi_uldivmod>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4610      	mov	r0, r2
 8007f60:	4619      	mov	r1, r3
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	020b      	lsls	r3, r1, #8
 8007f6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f70:	0202      	lsls	r2, r0, #8
 8007f72:	6979      	ldr	r1, [r7, #20]
 8007f74:	6849      	ldr	r1, [r1, #4]
 8007f76:	0849      	lsrs	r1, r1, #1
 8007f78:	2000      	movs	r0, #0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	eb12 0804 	adds.w	r8, r2, r4
 8007f82:	eb43 0905 	adc.w	r9, r3, r5
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	469a      	mov	sl, r3
 8007f8e:	4693      	mov	fp, r2
 8007f90:	4652      	mov	r2, sl
 8007f92:	465b      	mov	r3, fp
 8007f94:	4640      	mov	r0, r8
 8007f96:	4649      	mov	r1, r9
 8007f98:	f7f8 f99e 	bl	80002d8 <__aeabi_uldivmod>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007faa:	d308      	bcc.n	8007fbe <UART_SetConfig+0x79a>
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fb2:	d204      	bcs.n	8007fbe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fba:	60da      	str	r2, [r3, #12]
 8007fbc:	e17c      	b.n	80082b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fc4:	e178      	b.n	80082b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fce:	f040 80c5 	bne.w	800815c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007fd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	dc48      	bgt.n	800806c <UART_SetConfig+0x848>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	db7b      	blt.n	80080d6 <UART_SetConfig+0x8b2>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d879      	bhi.n	80080d6 <UART_SetConfig+0x8b2>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <UART_SetConfig+0x7c4>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008073 	.word	0x08008073
 8007fec:	0800807b 	.word	0x0800807b
 8007ff0:	080080d7 	.word	0x080080d7
 8007ff4:	080080d7 	.word	0x080080d7
 8007ff8:	08008083 	.word	0x08008083
 8007ffc:	080080d7 	.word	0x080080d7
 8008000:	080080d7 	.word	0x080080d7
 8008004:	080080d7 	.word	0x080080d7
 8008008:	08008093 	.word	0x08008093
 800800c:	080080d7 	.word	0x080080d7
 8008010:	080080d7 	.word	0x080080d7
 8008014:	080080d7 	.word	0x080080d7
 8008018:	080080d7 	.word	0x080080d7
 800801c:	080080d7 	.word	0x080080d7
 8008020:	080080d7 	.word	0x080080d7
 8008024:	080080d7 	.word	0x080080d7
 8008028:	080080a3 	.word	0x080080a3
 800802c:	080080d7 	.word	0x080080d7
 8008030:	080080d7 	.word	0x080080d7
 8008034:	080080d7 	.word	0x080080d7
 8008038:	080080d7 	.word	0x080080d7
 800803c:	080080d7 	.word	0x080080d7
 8008040:	080080d7 	.word	0x080080d7
 8008044:	080080d7 	.word	0x080080d7
 8008048:	080080d7 	.word	0x080080d7
 800804c:	080080d7 	.word	0x080080d7
 8008050:	080080d7 	.word	0x080080d7
 8008054:	080080d7 	.word	0x080080d7
 8008058:	080080d7 	.word	0x080080d7
 800805c:	080080d7 	.word	0x080080d7
 8008060:	080080d7 	.word	0x080080d7
 8008064:	080080d7 	.word	0x080080d7
 8008068:	080080c9 	.word	0x080080c9
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	d02e      	beq.n	80080ce <UART_SetConfig+0x8aa>
 8008070:	e031      	b.n	80080d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008072:	f7fc fe53 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8008076:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008078:	e033      	b.n	80080e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800807a:	f7fc fe65 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 800807e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008080:	e02f      	b.n	80080e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fe14 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800808c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008090:	e027      	b.n	80080e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008092:	f107 0318 	add.w	r3, r7, #24
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe ff60 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a0:	e01f      	b.n	80080e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080a2:	4b2d      	ldr	r3, [pc, #180]	@ (8008158 <UART_SetConfig+0x934>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008158 <UART_SetConfig+0x934>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	08db      	lsrs	r3, r3, #3
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	4a24      	ldr	r2, [pc, #144]	@ (800814c <UART_SetConfig+0x928>)
 80080ba:	fa22 f303 	lsr.w	r3, r2, r3
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080c0:	e00f      	b.n	80080e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80080c2:	4b22      	ldr	r3, [pc, #136]	@ (800814c <UART_SetConfig+0x928>)
 80080c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c6:	e00c      	b.n	80080e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080c8:	4b21      	ldr	r3, [pc, #132]	@ (8008150 <UART_SetConfig+0x92c>)
 80080ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080cc:	e009      	b.n	80080e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d4:	e005      	b.n	80080e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80080e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 80e7 	beq.w	80082b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ee:	4a19      	ldr	r2, [pc, #100]	@ (8008154 <UART_SetConfig+0x930>)
 80080f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f4:	461a      	mov	r2, r3
 80080f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080fc:	005a      	lsls	r2, r3, #1
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	085b      	lsrs	r3, r3, #1
 8008104:	441a      	add	r2, r3
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	fbb2 f3f3 	udiv	r3, r2, r3
 800810e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008112:	2b0f      	cmp	r3, #15
 8008114:	d916      	bls.n	8008144 <UART_SetConfig+0x920>
 8008116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800811c:	d212      	bcs.n	8008144 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008120:	b29b      	uxth	r3, r3
 8008122:	f023 030f 	bic.w	r3, r3, #15
 8008126:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	085b      	lsrs	r3, r3, #1
 800812c:	b29b      	uxth	r3, r3
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	b29a      	uxth	r2, r3
 8008134:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008136:	4313      	orrs	r3, r2
 8008138:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008140:	60da      	str	r2, [r3, #12]
 8008142:	e0b9      	b.n	80082b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800814a:	e0b5      	b.n	80082b8 <UART_SetConfig+0xa94>
 800814c:	03d09000 	.word	0x03d09000
 8008150:	003d0900 	.word	0x003d0900
 8008154:	080087c4 	.word	0x080087c4
 8008158:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800815c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008160:	2b20      	cmp	r3, #32
 8008162:	dc49      	bgt.n	80081f8 <UART_SetConfig+0x9d4>
 8008164:	2b00      	cmp	r3, #0
 8008166:	db7c      	blt.n	8008262 <UART_SetConfig+0xa3e>
 8008168:	2b20      	cmp	r3, #32
 800816a:	d87a      	bhi.n	8008262 <UART_SetConfig+0xa3e>
 800816c:	a201      	add	r2, pc, #4	@ (adr r2, 8008174 <UART_SetConfig+0x950>)
 800816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008172:	bf00      	nop
 8008174:	080081ff 	.word	0x080081ff
 8008178:	08008207 	.word	0x08008207
 800817c:	08008263 	.word	0x08008263
 8008180:	08008263 	.word	0x08008263
 8008184:	0800820f 	.word	0x0800820f
 8008188:	08008263 	.word	0x08008263
 800818c:	08008263 	.word	0x08008263
 8008190:	08008263 	.word	0x08008263
 8008194:	0800821f 	.word	0x0800821f
 8008198:	08008263 	.word	0x08008263
 800819c:	08008263 	.word	0x08008263
 80081a0:	08008263 	.word	0x08008263
 80081a4:	08008263 	.word	0x08008263
 80081a8:	08008263 	.word	0x08008263
 80081ac:	08008263 	.word	0x08008263
 80081b0:	08008263 	.word	0x08008263
 80081b4:	0800822f 	.word	0x0800822f
 80081b8:	08008263 	.word	0x08008263
 80081bc:	08008263 	.word	0x08008263
 80081c0:	08008263 	.word	0x08008263
 80081c4:	08008263 	.word	0x08008263
 80081c8:	08008263 	.word	0x08008263
 80081cc:	08008263 	.word	0x08008263
 80081d0:	08008263 	.word	0x08008263
 80081d4:	08008263 	.word	0x08008263
 80081d8:	08008263 	.word	0x08008263
 80081dc:	08008263 	.word	0x08008263
 80081e0:	08008263 	.word	0x08008263
 80081e4:	08008263 	.word	0x08008263
 80081e8:	08008263 	.word	0x08008263
 80081ec:	08008263 	.word	0x08008263
 80081f0:	08008263 	.word	0x08008263
 80081f4:	08008255 	.word	0x08008255
 80081f8:	2b40      	cmp	r3, #64	@ 0x40
 80081fa:	d02e      	beq.n	800825a <UART_SetConfig+0xa36>
 80081fc:	e031      	b.n	8008262 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081fe:	f7fc fd8d 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8008202:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008204:	e033      	b.n	800826e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008206:	f7fc fd9f 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 800820a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800820c:	e02f      	b.n	800826e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800820e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fd4e 	bl	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821c:	e027      	b.n	800826e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800821e:	f107 0318 	add.w	r3, r7, #24
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fe9a 	bl	8006f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800822c:	e01f      	b.n	800826e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800822e:	4b2d      	ldr	r3, [pc, #180]	@ (80082e4 <UART_SetConfig+0xac0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800823a:	4b2a      	ldr	r3, [pc, #168]	@ (80082e4 <UART_SetConfig+0xac0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	4a28      	ldr	r2, [pc, #160]	@ (80082e8 <UART_SetConfig+0xac4>)
 8008246:	fa22 f303 	lsr.w	r3, r2, r3
 800824a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800824c:	e00f      	b.n	800826e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800824e:	4b26      	ldr	r3, [pc, #152]	@ (80082e8 <UART_SetConfig+0xac4>)
 8008250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008252:	e00c      	b.n	800826e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008254:	4b25      	ldr	r3, [pc, #148]	@ (80082ec <UART_SetConfig+0xac8>)
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008258:	e009      	b.n	800826e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008260:	e005      	b.n	800826e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800826c:	bf00      	nop
    }

    if (pclk != 0U)
 800826e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d021      	beq.n	80082b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	4a1d      	ldr	r2, [pc, #116]	@ (80082f0 <UART_SetConfig+0xacc>)
 800827a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800827e:	461a      	mov	r2, r3
 8008280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008282:	fbb3 f2f2 	udiv	r2, r3, r2
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	441a      	add	r2, r3
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	fbb2 f3f3 	udiv	r3, r2, r3
 8008296:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d909      	bls.n	80082b2 <UART_SetConfig+0xa8e>
 800829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a4:	d205      	bcs.n	80082b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60da      	str	r2, [r3, #12]
 80082b0:	e002      	b.n	80082b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2200      	movs	r2, #0
 80082cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2200      	movs	r2, #0
 80082d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3748      	adds	r7, #72	@ 0x48
 80082dc:	46bd      	mov	sp, r7
 80082de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e2:	bf00      	nop
 80082e4:	58024400 	.word	0x58024400
 80082e8:	03d09000 	.word	0x03d09000
 80082ec:	003d0900 	.word	0x003d0900
 80082f0:	080087c4 	.word	0x080087c4

080082f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008388:	f003 0310 	and.w	r3, r3, #16
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01a      	beq.n	800840a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083f2:	d10a      	bne.n	800840a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	605a      	str	r2, [r3, #4]
  }
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b098      	sub	sp, #96	@ 0x60
 800843c:	af02      	add	r7, sp, #8
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008448:	f7f8 fe86 	bl	8001158 <HAL_GetTick>
 800844c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0308 	and.w	r3, r3, #8
 8008458:	2b08      	cmp	r3, #8
 800845a:	d12f      	bne.n	80084bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800845c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008464:	2200      	movs	r2, #0
 8008466:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f88e 	bl	800858c <UART_WaitOnFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d022      	beq.n	80084bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800848a:	653b      	str	r3, [r7, #80]	@ 0x50
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008494:	647b      	str	r3, [r7, #68]	@ 0x44
 8008496:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800849a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e6      	bne.n	8008476 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e063      	b.n	8008584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d149      	bne.n	800855e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d2:	2200      	movs	r2, #0
 80084d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f857 	bl	800858c <UART_WaitOnFlagUntilTimeout>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d03c      	beq.n	800855e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	623b      	str	r3, [r7, #32]
   return(result);
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008502:	633b      	str	r3, [r7, #48]	@ 0x30
 8008504:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e6      	bne.n	80084e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	60fb      	str	r3, [r7, #12]
   return(result);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 0301 	bic.w	r3, r3, #1
 800852c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008536:	61fa      	str	r2, [r7, #28]
 8008538:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	69b9      	ldr	r1, [r7, #24]
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	617b      	str	r3, [r7, #20]
   return(result);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e5      	bne.n	8008516 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e012      	b.n	8008584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3758      	adds	r7, #88	@ 0x58
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	4613      	mov	r3, r2
 800859a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859c:	e04f      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d04b      	beq.n	800863e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085a6:	f7f8 fdd7 	bl	8001158 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d302      	bcc.n	80085bc <UART_WaitOnFlagUntilTimeout+0x30>
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e04e      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d037      	beq.n	800863e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b80      	cmp	r3, #128	@ 0x80
 80085d2:	d034      	beq.n	800863e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b40      	cmp	r3, #64	@ 0x40
 80085d8:	d031      	beq.n	800863e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d110      	bne.n	800860a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2208      	movs	r2, #8
 80085ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 f839 	bl	8008668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2208      	movs	r2, #8
 80085fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e029      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008618:	d111      	bne.n	800863e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f81f 	bl	8008668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e00f      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69da      	ldr	r2, [r3, #28]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4013      	ands	r3, r2
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	429a      	cmp	r2, r3
 800864c:	bf0c      	ite	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	2300      	movne	r3, #0
 8008652:	b2db      	uxtb	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	429a      	cmp	r2, r3
 800865a:	d0a0      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b095      	sub	sp, #84	@ 0x54
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008690:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800869c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e6      	bne.n	8008670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086b2:	69fa      	ldr	r2, [r7, #28]
 80086b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008730 <UART_EndRxTransfer+0xc8>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e5      	bne.n	80086a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d118      	bne.n	8008710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f023 0310 	bic.w	r3, r3, #16
 80086f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086fc:	61bb      	str	r3, [r7, #24]
 80086fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	6979      	ldr	r1, [r7, #20]
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	613b      	str	r3, [r7, #16]
   return(result);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e6      	bne.n	80086de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008724:	bf00      	nop
 8008726:	3754      	adds	r7, #84	@ 0x54
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	effffffe 	.word	0xeffffffe

08008734 <memset>:
 8008734:	4402      	add	r2, r0
 8008736:	4603      	mov	r3, r0
 8008738:	4293      	cmp	r3, r2
 800873a:	d100      	bne.n	800873e <memset+0xa>
 800873c:	4770      	bx	lr
 800873e:	f803 1b01 	strb.w	r1, [r3], #1
 8008742:	e7f9      	b.n	8008738 <memset+0x4>

08008744 <__libc_init_array>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	4d0d      	ldr	r5, [pc, #52]	@ (800877c <__libc_init_array+0x38>)
 8008748:	4c0d      	ldr	r4, [pc, #52]	@ (8008780 <__libc_init_array+0x3c>)
 800874a:	1b64      	subs	r4, r4, r5
 800874c:	10a4      	asrs	r4, r4, #2
 800874e:	2600      	movs	r6, #0
 8008750:	42a6      	cmp	r6, r4
 8008752:	d109      	bne.n	8008768 <__libc_init_array+0x24>
 8008754:	4d0b      	ldr	r5, [pc, #44]	@ (8008784 <__libc_init_array+0x40>)
 8008756:	4c0c      	ldr	r4, [pc, #48]	@ (8008788 <__libc_init_array+0x44>)
 8008758:	f000 f818 	bl	800878c <_init>
 800875c:	1b64      	subs	r4, r4, r5
 800875e:	10a4      	asrs	r4, r4, #2
 8008760:	2600      	movs	r6, #0
 8008762:	42a6      	cmp	r6, r4
 8008764:	d105      	bne.n	8008772 <__libc_init_array+0x2e>
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	f855 3b04 	ldr.w	r3, [r5], #4
 800876c:	4798      	blx	r3
 800876e:	3601      	adds	r6, #1
 8008770:	e7ee      	b.n	8008750 <__libc_init_array+0xc>
 8008772:	f855 3b04 	ldr.w	r3, [r5], #4
 8008776:	4798      	blx	r3
 8008778:	3601      	adds	r6, #1
 800877a:	e7f2      	b.n	8008762 <__libc_init_array+0x1e>
 800877c:	080087e4 	.word	0x080087e4
 8008780:	080087e4 	.word	0x080087e4
 8008784:	080087e4 	.word	0x080087e4
 8008788:	080087e8 	.word	0x080087e8

0800878c <_init>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr

08008798 <_fini>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr
